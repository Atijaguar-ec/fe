/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainBulkPayment } from '../model/apiResponseChainBulkPayment';
import { ApiResponseChainPayment } from '../model/apiResponseChainPayment';
import { ApiResponsePaginatedListChainBulkPayment } from '../model/apiResponsePaginatedListChainBulkPayment';
import { ApiResponsePaginatedListChainPayment } from '../model/apiResponsePaginatedListChainPayment';
import { ChainBulkPayment } from '../model/chainBulkPayment';
import { ChainPayment } from '../model/chainPayment';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for confirmPayment.
 */
export namespace ConfirmPayment {
    /**
     * Parameter map for confirmPayment.
     */
    export interface PartialParamMap {
      ChainPayment: ChainPayment;
    }

    /**
     * Enumeration of all parameters for confirmPayment.
     */
    export enum Parameters {
      ChainPayment = 'ChainPayment'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of confirmPayment
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ConfirmPayment.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for deletePayment.
 */
export namespace DeletePayment {
    /**
     * Parameter map for deletePayment.
     */
    export interface PartialParamMap {
      ChainPayment: ChainPayment;
    }

    /**
     * Enumeration of all parameters for deletePayment.
     */
    export enum Parameters {
      ChainPayment = 'ChainPayment'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deletePayment
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeletePayment.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getBulkPayment.
 */
export namespace GetBulkPayment {
    /**
     * Parameter map for getBulkPayment.
     */
    export interface PartialParamMap {
      /**
       * database id of the bulk payment
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getBulkPayment.
     */
    export enum Parameters {
      /**
       * database id of the bulk payment
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getBulkPayment
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetBulkPayment.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPayment.
 */
export namespace GetPayment {
    /**
     * Parameter map for getPayment.
     */
    export interface PartialParamMap {
      /**
       * database id of the payment
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getPayment.
     */
    export enum Parameters {
      /**
       * database id of the payment
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPayment
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPayment.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listBulkPaymentsForPayingOrganization.
 */
export namespace ListBulkPaymentsForPayingOrganization {
    /**
     * Parameter map for listBulkPaymentsForPayingOrganization.
     */
    export interface PartialParamMap {
      payingOrganizationId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listBulkPaymentsForPayingOrganization.
     */
    export enum Parameters {
      payingOrganizationId = 'payingOrganizationId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listBulkPaymentsForPayingOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListBulkPaymentsForPayingOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      payingOrganizationId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listPaymentsForBankTransfer.
 */
export namespace ListPaymentsForBankTransfer {
    /**
     * Parameter map for listPaymentsForBankTransfer.
     */
    export interface PartialParamMap {
      bankTransferId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listPaymentsForBankTransfer.
     */
    export enum Parameters {
      bankTransferId = 'bankTransferId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listPaymentsForBankTransfer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListPaymentsForBankTransfer.PartialParamMap]?: [string, ValidatorFn][]} = {
      bankTransferId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listPaymentsForPayingOrganization.
 */
export namespace ListPaymentsForPayingOrganization {
    /**
     * Parameter map for listPaymentsForPayingOrganization.
     */
    export interface PartialParamMap {
      payingOrganizationId: string;
      /**
       * query by receiptNumber
       */
      query?: string;
      /**
       * PAYMENT_DATE or DELIVERY_DATE
       */
      sortBy?: any;
      /**
       * CONFIRMED or UNCONFIRMED
       */
      paymentStatus?: any;
      /**
       * CASH_VIA_COOPERATIVE or CASH_VIA_COLLECTOR or BANK_TRANSFER or UNKNOWN
       */
      wayOfPayment?: any;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
      deliveryDateStart?: string;
      deliveryDateEnd?: string;
    }

    /**
     * Enumeration of all parameters for listPaymentsForPayingOrganization.
     */
    export enum Parameters {
      payingOrganizationId = 'payingOrganizationId',
      /**
       * query by receiptNumber
       */
      query = 'query',
      /**
       * PAYMENT_DATE or DELIVERY_DATE
       */
      sortBy = 'sortBy',
      /**
       * CONFIRMED or UNCONFIRMED
       */
      paymentStatus = 'paymentStatus',
      /**
       * CASH_VIA_COOPERATIVE or CASH_VIA_COLLECTOR or BANK_TRANSFER or UNKNOWN
       */
      wayOfPayment = 'wayOfPayment',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset',
      deliveryDateStart = 'deliveryDateStart',
      deliveryDateEnd = 'deliveryDateEnd'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listPaymentsForPayingOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListPaymentsForPayingOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      payingOrganizationId: [
              ['required', Validators.required],
      ],
      query: [
      ],
      sortBy: [
      ],
      paymentStatus: [
      ],
      wayOfPayment: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
      deliveryDateStart: [
      ],
      deliveryDateEnd: [
      ],
    };
}

/**
 * Namespace for listPaymentsForRecipientUserCustomer.
 */
export namespace ListPaymentsForRecipientUserCustomer {
    /**
     * Parameter map for listPaymentsForRecipientUserCustomer.
     */
    export interface PartialParamMap {
      farmerId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listPaymentsForRecipientUserCustomer.
     */
    export enum Parameters {
      farmerId = 'farmerId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listPaymentsForRecipientUserCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListPaymentsForRecipientUserCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
      farmerId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listPaymentsForStockOrder.
 */
export namespace ListPaymentsForStockOrder {
    /**
     * Parameter map for listPaymentsForStockOrder.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      stockOrderId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listPaymentsForStockOrder.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      stockOrderId = 'stockOrderId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listPaymentsForStockOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListPaymentsForStockOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
      stockOrderId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postBulkPayment.
 */
export namespace PostBulkPayment {
    /**
     * Parameter map for postBulkPayment.
     */
    export interface PartialParamMap {
      ChainBulkPayment: ChainBulkPayment;
    }

    /**
     * Enumeration of all parameters for postBulkPayment.
     */
    export enum Parameters {
      ChainBulkPayment = 'ChainBulkPayment'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postBulkPayment
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostBulkPayment.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for postPayment.
 */
export namespace PostPayment {
    /**
     * Parameter map for postPayment.
     */
    export interface PartialParamMap {
      ChainPayment: ChainPayment;
    }

    /**
     * Enumeration of all parameters for postPayment.
     */
    export enum Parameters {
      ChainPayment = 'ChainPayment'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postPayment
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostPayment.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class PaymentsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Confirm payment
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public confirmPaymentByMap(
    map: ConfirmPayment.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public confirmPaymentByMap(
    map: ConfirmPayment.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public confirmPaymentByMap(
    map: ConfirmPayment.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public confirmPaymentByMap(
    map: ConfirmPayment.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.confirmPayment(
      map.ChainPayment,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Confirm payment
     * @param ChainPayment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmPayment(ChainPayment: ChainPayment, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public confirmPayment(ChainPayment: ChainPayment, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public confirmPayment(ChainPayment: ChainPayment, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public confirmPayment(ChainPayment: ChainPayment, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainPayment === null || ChainPayment === undefined) {
            throw new Error('Required parameter ChainPayment was null or undefined when calling confirmPayment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/payment/confirm-payment`,
            ChainPayment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ConfirmPayment')));
        }
        return handle;
    }


  /**
   *  by map.
   * Deletes payment
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deletePaymentByMap(
    map: DeletePayment.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deletePaymentByMap(
    map: DeletePayment.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deletePaymentByMap(
    map: DeletePayment.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deletePaymentByMap(
    map: DeletePayment.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deletePayment(
      map.ChainPayment,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes payment
     * @param ChainPayment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePayment(ChainPayment: ChainPayment, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deletePayment(ChainPayment: ChainPayment, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deletePayment(ChainPayment: ChainPayment, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deletePayment(ChainPayment: ChainPayment, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainPayment === null || ChainPayment === undefined) {
            throw new Error('Required parameter ChainPayment was null or undefined when calling deletePayment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/payment/delete`,
            ChainPayment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeletePayment')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches a bulk payment by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getBulkPaymentByMap(
    map: GetBulkPayment.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainBulkPayment>;
  public getBulkPaymentByMap(
    map: GetBulkPayment.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainBulkPayment>>;
  public getBulkPaymentByMap(
    map: GetBulkPayment.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainBulkPayment>>;
  public getBulkPaymentByMap(
    map: GetBulkPayment.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getBulkPayment(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches a bulk payment by its _id.
     * @param dbId database id of the bulk payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBulkPayment(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainBulkPayment>;
    public getBulkPayment(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainBulkPayment>>;
    public getBulkPayment(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainBulkPayment>>;
    public getBulkPayment(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getBulkPayment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainBulkPayment>(`${this.configuration.basePath}/chain-api/data/payment/bulk-payment/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetBulkPayment')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches a payment by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPaymentByMap(
    map: GetPayment.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainPayment>;
  public getPaymentByMap(
    map: GetPayment.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainPayment>>;
  public getPaymentByMap(
    map: GetPayment.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainPayment>>;
  public getPaymentByMap(
    map: GetPayment.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPayment(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches a payment by its _id.
     * @param dbId database id of the payment
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPayment(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainPayment>;
    public getPayment(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainPayment>>;
    public getPayment(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainPayment>>;
    public getPayment(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getPayment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainPayment>(`${this.configuration.basePath}/chain-api/data/payment/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetPayment')));
        }
        return handle;
    }


  /**
   *  by map.
   * Returns paginated list of bulk payments for payingOrganization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listBulkPaymentsForPayingOrganizationByMap(
    map: ListBulkPaymentsForPayingOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainBulkPayment>;
  public listBulkPaymentsForPayingOrganizationByMap(
    map: ListBulkPaymentsForPayingOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainBulkPayment>>;
  public listBulkPaymentsForPayingOrganizationByMap(
    map: ListBulkPaymentsForPayingOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainBulkPayment>>;
  public listBulkPaymentsForPayingOrganizationByMap(
    map: ListBulkPaymentsForPayingOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listBulkPaymentsForPayingOrganization(
      map.payingOrganizationId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns paginated list of bulk payments for payingOrganization
     * @param payingOrganizationId 
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listBulkPaymentsForPayingOrganization(payingOrganizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainBulkPayment>;
    public listBulkPaymentsForPayingOrganization(payingOrganizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainBulkPayment>>;
    public listBulkPaymentsForPayingOrganization(payingOrganizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainBulkPayment>>;
    public listBulkPaymentsForPayingOrganization(payingOrganizationId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (payingOrganizationId === null || payingOrganizationId === undefined) {
            throw new Error('Required parameter payingOrganizationId was null or undefined when calling listBulkPaymentsForPayingOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainBulkPayment>(`${this.configuration.basePath}/chain-api/data/payment/bulk-payment/list/organization/${encodeURIComponent(String(payingOrganizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListBulkPaymentsForPayingOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of payments for a given
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listPaymentsForBankTransferByMap(
    map: ListPaymentsForBankTransfer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainPayment>;
  public listPaymentsForBankTransferByMap(
    map: ListPaymentsForBankTransfer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForBankTransferByMap(
    map: ListPaymentsForBankTransfer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForBankTransferByMap(
    map: ListPaymentsForBankTransfer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listPaymentsForBankTransfer(
      map.bankTransferId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of payments for a given
     * @param bankTransferId 
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPaymentsForBankTransfer(bankTransferId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainPayment>;
    public listPaymentsForBankTransfer(bankTransferId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForBankTransfer(bankTransferId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForBankTransfer(bankTransferId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (bankTransferId === null || bankTransferId === undefined) {
            throw new Error('Required parameter bankTransferId was null or undefined when calling listPaymentsForBankTransfer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainPayment>(`${this.configuration.basePath}/chain-api/data/payment/list/bank-transfer/${encodeURIComponent(String(bankTransferId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListPaymentsForBankTransfer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of payments
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listPaymentsForPayingOrganizationByMap(
    map: ListPaymentsForPayingOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainPayment>;
  public listPaymentsForPayingOrganizationByMap(
    map: ListPaymentsForPayingOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForPayingOrganizationByMap(
    map: ListPaymentsForPayingOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForPayingOrganizationByMap(
    map: ListPaymentsForPayingOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listPaymentsForPayingOrganization(
      map.payingOrganizationId,
      map.query,
      map.sortBy,
      map.paymentStatus,
      map.wayOfPayment,
      map.sort,
      map.limit,
      map.offset,
      map.deliveryDateStart,
      map.deliveryDateEnd,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of payments
     * @param payingOrganizationId 
     * @param query query by receiptNumber
     * @param sortBy PAYMENT_DATE or DELIVERY_DATE
     * @param paymentStatus CONFIRMED or UNCONFIRMED
     * @param wayOfPayment CASH_VIA_COOPERATIVE or CASH_VIA_COLLECTOR or BANK_TRANSFER or UNKNOWN
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param deliveryDateStart 
     * @param deliveryDateEnd 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPaymentsForPayingOrganization(payingOrganizationId: string, query?: string, sortBy?: any, paymentStatus?: any, wayOfPayment?: any, sort?: any, limit?: number, offset?: number, deliveryDateStart?: string, deliveryDateEnd?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainPayment>;
    public listPaymentsForPayingOrganization(payingOrganizationId: string, query?: string, sortBy?: any, paymentStatus?: any, wayOfPayment?: any, sort?: any, limit?: number, offset?: number, deliveryDateStart?: string, deliveryDateEnd?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForPayingOrganization(payingOrganizationId: string, query?: string, sortBy?: any, paymentStatus?: any, wayOfPayment?: any, sort?: any, limit?: number, offset?: number, deliveryDateStart?: string, deliveryDateEnd?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForPayingOrganization(payingOrganizationId: string, query?: string, sortBy?: any, paymentStatus?: any, wayOfPayment?: any, sort?: any, limit?: number, offset?: number, deliveryDateStart?: string, deliveryDateEnd?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (payingOrganizationId === null || payingOrganizationId === undefined) {
            throw new Error('Required parameter payingOrganizationId was null or undefined when calling listPaymentsForPayingOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (paymentStatus !== undefined && paymentStatus !== null) {
            queryParameters = queryParameters.set('paymentStatus', <any>paymentStatus);
        }
        if (wayOfPayment !== undefined && wayOfPayment !== null) {
            queryParameters = queryParameters.set('wayOfPayment', <any>wayOfPayment);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (deliveryDateStart !== undefined && deliveryDateStart !== null) {
            queryParameters = queryParameters.set('deliveryDateStart', <any>deliveryDateStart);
        }
        if (deliveryDateEnd !== undefined && deliveryDateEnd !== null) {
            queryParameters = queryParameters.set('deliveryDateEnd', <any>deliveryDateEnd);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainPayment>(`${this.configuration.basePath}/chain-api/data/payment/list/organization/${encodeURIComponent(String(payingOrganizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListPaymentsForPayingOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of payments for a user customer
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listPaymentsForRecipientUserCustomerByMap(
    map: ListPaymentsForRecipientUserCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainPayment>;
  public listPaymentsForRecipientUserCustomerByMap(
    map: ListPaymentsForRecipientUserCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForRecipientUserCustomerByMap(
    map: ListPaymentsForRecipientUserCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForRecipientUserCustomerByMap(
    map: ListPaymentsForRecipientUserCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listPaymentsForRecipientUserCustomer(
      map.farmerId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of payments for a user customer
     * @param farmerId 
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPaymentsForRecipientUserCustomer(farmerId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainPayment>;
    public listPaymentsForRecipientUserCustomer(farmerId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForRecipientUserCustomer(farmerId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForRecipientUserCustomer(farmerId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (farmerId === null || farmerId === undefined) {
            throw new Error('Required parameter farmerId was null or undefined when calling listPaymentsForRecipientUserCustomer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainPayment>(`${this.configuration.basePath}/chain-api/data/payment/list/farmer/${encodeURIComponent(String(farmerId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListPaymentsForRecipientUserCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of payments for a given stock order
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listPaymentsForStockOrderByMap(
    map: ListPaymentsForStockOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainPayment>;
  public listPaymentsForStockOrderByMap(
    map: ListPaymentsForStockOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForStockOrderByMap(
    map: ListPaymentsForStockOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsForStockOrderByMap(
    map: ListPaymentsForStockOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listPaymentsForStockOrder(
      map.stockOrderId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of payments for a given stock order
     * @param stockOrderId _id of a given organization
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPaymentsForStockOrder(stockOrderId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainPayment>;
    public listPaymentsForStockOrder(stockOrderId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForStockOrder(stockOrderId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsForStockOrder(stockOrderId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (stockOrderId === null || stockOrderId === undefined) {
            throw new Error('Required parameter stockOrderId was null or undefined when calling listPaymentsForStockOrder.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainPayment>(`${this.configuration.basePath}/chain-api/data/payment/list/stock-order/${encodeURIComponent(String(stockOrderId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListPaymentsForStockOrder')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a bulk payment. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postBulkPaymentByMap(
    map: PostBulkPayment.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postBulkPaymentByMap(
    map: PostBulkPayment.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postBulkPaymentByMap(
    map: PostBulkPayment.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postBulkPaymentByMap(
    map: PostBulkPayment.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postBulkPayment(
      map.ChainBulkPayment,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a bulk payment. When inserting fields _id, _rev and docType should not be present.
     * @param ChainBulkPayment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postBulkPayment(ChainBulkPayment: ChainBulkPayment, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postBulkPayment(ChainBulkPayment: ChainBulkPayment, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postBulkPayment(ChainBulkPayment: ChainBulkPayment, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postBulkPayment(ChainBulkPayment: ChainBulkPayment, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainBulkPayment === null || ChainBulkPayment === undefined) {
            throw new Error('Required parameter ChainBulkPayment was null or undefined when calling postBulkPayment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/payment/bulk-payment`,
            ChainBulkPayment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostBulkPayment')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a payment. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postPaymentByMap(
    map: PostPayment.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postPaymentByMap(
    map: PostPayment.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postPaymentByMap(
    map: PostPayment.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postPaymentByMap(
    map: PostPayment.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postPayment(
      map.ChainPayment,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a payment. When inserting fields _id, _rev and docType should not be present.
     * @param ChainPayment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPayment(ChainPayment: ChainPayment, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postPayment(ChainPayment: ChainPayment, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postPayment(ChainPayment: ChainPayment, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postPayment(ChainPayment: ChainPayment, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainPayment === null || ChainPayment === undefined) {
            throw new Error('Required parameter ChainPayment was null or undefined when calling postPayment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/payment`,
            ChainPayment,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostPayment')));
        }
        return handle;
    }

}
