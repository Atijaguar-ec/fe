/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainSemiProduct } from '../model/apiResponseChainSemiProduct';
import { ApiResponsePaginatedListChainSemiProduct } from '../model/apiResponsePaginatedListChainSemiProduct';
import { ChainSemiProduct } from '../model/chainSemiProduct';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for deleteSemiProduct.
 */
export namespace DeleteSemiProduct {
    /**
     * Parameter map for deleteSemiProduct.
     */
    export interface PartialParamMap {
      ChainSemiProduct: ChainSemiProduct;
    }

    /**
     * Enumeration of all parameters for deleteSemiProduct.
     */
    export enum Parameters {
      ChainSemiProduct = 'ChainSemiProduct'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteSemiProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteSemiProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getSemiProduct.
 */
export namespace GetSemiProduct {
    /**
     * Parameter map for getSemiProduct.
     */
    export interface PartialParamMap {
      /**
       * database _id of the product
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getSemiProduct.
     */
    export enum Parameters {
      /**
       * database _id of the product
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getSemiProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetSemiProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listSemiProducts.
 */
export namespace ListSemiProducts {
    /**
     * Parameter map for listSemiProducts.
     */
    export interface PartialParamMap {
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listSemiProducts.
     */
    export enum Parameters {
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listSemiProducts
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListSemiProducts.PartialParamMap]?: [string, ValidatorFn][]} = {
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listSemiProductsForProduct.
 */
export namespace ListSemiProductsForProduct {
    /**
     * Parameter map for listSemiProductsForProduct.
     */
    export interface PartialParamMap {
      productId: string;
      isBuyable?: boolean;
      /**
       * (at producer)
       */
      isSKU?: boolean;
      /**
       * (at end customer)
       */
      isSKUEndCustomer?: boolean;
      sort?: 'ASC' | 'DESC';
      limit?: number;
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listSemiProductsForProduct.
     */
    export enum Parameters {
      productId = 'productId',
      isBuyable = 'isBuyable',
      /**
       * (at producer)
       */
      isSKU = 'isSKU',
      /**
       * (at end customer)
       */
      isSKUEndCustomer = 'isSKUEndCustomer',
      sort = 'sort',
      limit = 'limit',
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listSemiProductsForProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListSemiProductsForProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
      productId: [
              ['required', Validators.required],
      ],
      isBuyable: [
      ],
      isSKU: [
      ],
      isSKUEndCustomer: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postSemiProduct.
 */
export namespace PostSemiProduct {
    /**
     * Parameter map for postSemiProduct.
     */
    export interface PartialParamMap {
      ChainSemiProduct: ChainSemiProduct;
    }

    /**
     * Enumeration of all parameters for postSemiProduct.
     */
    export enum Parameters {
      ChainSemiProduct = 'ChainSemiProduct'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postSemiProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostSemiProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class SemiProductService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Deletes semi-product.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteSemiProductByMap(
    map: DeleteSemiProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteSemiProductByMap(
    map: DeleteSemiProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteSemiProductByMap(
    map: DeleteSemiProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteSemiProductByMap(
    map: DeleteSemiProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteSemiProduct(
      map.ChainSemiProduct,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes semi-product.
     * @param ChainSemiProduct 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSemiProduct(ChainSemiProduct: ChainSemiProduct, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteSemiProduct(ChainSemiProduct: ChainSemiProduct, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteSemiProduct(ChainSemiProduct: ChainSemiProduct, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteSemiProduct(ChainSemiProduct: ChainSemiProduct, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainSemiProduct === null || ChainSemiProduct === undefined) {
            throw new Error('Required parameter ChainSemiProduct was null or undefined when calling deleteSemiProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/semi-product/delete`,
            ChainSemiProduct,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteSemiProduct')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches semi product by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getSemiProductByMap(
    map: GetSemiProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainSemiProduct>;
  public getSemiProductByMap(
    map: GetSemiProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainSemiProduct>>;
  public getSemiProductByMap(
    map: GetSemiProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainSemiProduct>>;
  public getSemiProductByMap(
    map: GetSemiProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getSemiProduct(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches semi product by its _id.
     * @param dbId database _id of the product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSemiProduct(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainSemiProduct>;
    public getSemiProduct(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainSemiProduct>>;
    public getSemiProduct(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainSemiProduct>>;
    public getSemiProduct(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getSemiProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainSemiProduct>(`${this.configuration.basePath}/chain-api/data/semi-product/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetSemiProduct')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of semi products.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listSemiProductsByMap(
    map: ListSemiProducts.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainSemiProduct>;
  public listSemiProductsByMap(
    map: ListSemiProducts.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainSemiProduct>>;
  public listSemiProductsByMap(
    map: ListSemiProducts.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainSemiProduct>>;
  public listSemiProductsByMap(
    map: ListSemiProducts.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listSemiProducts(
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of semi products.
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSemiProducts(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainSemiProduct>;
    public listSemiProducts(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainSemiProduct>>;
    public listSemiProducts(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainSemiProduct>>;
    public listSemiProducts(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainSemiProduct>(`${this.configuration.basePath}/chain-api/data/semi-product/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListSemiProducts')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of semi-products for product.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listSemiProductsForProductByMap(
    map: ListSemiProductsForProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainSemiProduct>;
  public listSemiProductsForProductByMap(
    map: ListSemiProductsForProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainSemiProduct>>;
  public listSemiProductsForProductByMap(
    map: ListSemiProductsForProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainSemiProduct>>;
  public listSemiProductsForProductByMap(
    map: ListSemiProductsForProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listSemiProductsForProduct(
      map.productId,
      map.isBuyable,
      map.isSKU,
      map.isSKUEndCustomer,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of semi-products for product.
     * @param productId 
     * @param isBuyable 
     * @param isSKU (at producer)
     * @param isSKUEndCustomer (at end customer)
     * @param sort 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSemiProductsForProduct(productId: string, isBuyable?: boolean, isSKU?: boolean, isSKUEndCustomer?: boolean, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainSemiProduct>;
    public listSemiProductsForProduct(productId: string, isBuyable?: boolean, isSKU?: boolean, isSKUEndCustomer?: boolean, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainSemiProduct>>;
    public listSemiProductsForProduct(productId: string, isBuyable?: boolean, isSKU?: boolean, isSKUEndCustomer?: boolean, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainSemiProduct>>;
    public listSemiProductsForProduct(productId: string, isBuyable?: boolean, isSKU?: boolean, isSKUEndCustomer?: boolean, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling listSemiProductsForProduct.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (isBuyable !== undefined && isBuyable !== null) {
            queryParameters = queryParameters.set('isBuyable', <any>isBuyable);
        }
        if (isSKU !== undefined && isSKU !== null) {
            queryParameters = queryParameters.set('isSKU', <any>isSKU);
        }
        if (isSKUEndCustomer !== undefined && isSKUEndCustomer !== null) {
            queryParameters = queryParameters.set('isSKUEndCustomer', <any>isSKUEndCustomer);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainSemiProduct>(`${this.configuration.basePath}/chain-api/data/semi-product/list/product/${encodeURIComponent(String(productId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListSemiProductsForProduct')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a semi product. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postSemiProductByMap(
    map: PostSemiProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postSemiProductByMap(
    map: PostSemiProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postSemiProductByMap(
    map: PostSemiProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postSemiProductByMap(
    map: PostSemiProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postSemiProduct(
      map.ChainSemiProduct,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a semi product. When inserting fields _id, _rev and docType should not be present.
     * @param ChainSemiProduct 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postSemiProduct(ChainSemiProduct: ChainSemiProduct, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postSemiProduct(ChainSemiProduct: ChainSemiProduct, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postSemiProduct(ChainSemiProduct: ChainSemiProduct, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postSemiProduct(ChainSemiProduct: ChainSemiProduct, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainSemiProduct === null || ChainSemiProduct === undefined) {
            throw new Error('Required parameter ChainSemiProduct was null or undefined when calling postSemiProduct.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/semi-product`,
            ChainSemiProduct,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostSemiProduct')));
        }
        return handle;
    }

}
