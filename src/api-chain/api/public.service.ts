/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseB2CHistoryTimeline } from '../model/apiResponseB2CHistoryTimeline';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for getAggregatesForStockOrder.
 */
export namespace GetAggregatesForStockOrder {
    /**
     * Parameter map for getAggregatesForStockOrder.
     */
    export interface PartialParamMap {
      /**
       * stock order dbID
       */
      stockOrderId: string;
    }

    /**
     * Enumeration of all parameters for getAggregatesForStockOrder.
     */
    export enum Parameters {
      /**
       * stock order dbID
       */
      stockOrderId = 'stockOrderId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getAggregatesForStockOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetAggregatesForStockOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
      stockOrderId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getB2CDataForStockOrder.
 */
export namespace GetB2CDataForStockOrder {
    /**
     * Parameter map for getB2CDataForStockOrder.
     */
    export interface PartialParamMap {
      /**
       * stock order dbID
       */
      stockOrderId: string;
      orderId?: boolean;
      cooperative?: boolean;
      cuppingGrade?: boolean;
    }

    /**
     * Enumeration of all parameters for getB2CDataForStockOrder.
     */
    export enum Parameters {
      /**
       * stock order dbID
       */
      stockOrderId = 'stockOrderId',
      orderId = 'orderId',
      cooperative = 'cooperative',
      cuppingGrade = 'cuppingGrade'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getB2CDataForStockOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetB2CDataForStockOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
      stockOrderId: [
              ['required', Validators.required],
      ],
      orderId: [
      ],
      cooperative: [
      ],
      cuppingGrade: [
      ],
    };
}



@Injectable({
  providedIn: 'root'
})
export class PublicService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Returns aggregates for stock order
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAggregatesForStockOrderByMap(
    map: GetAggregatesForStockOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseB2CHistoryTimeline>;
  public getAggregatesForStockOrderByMap(
    map: GetAggregatesForStockOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseB2CHistoryTimeline>>;
  public getAggregatesForStockOrderByMap(
    map: GetAggregatesForStockOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseB2CHistoryTimeline>>;
  public getAggregatesForStockOrderByMap(
    map: GetAggregatesForStockOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getAggregatesForStockOrder(
      map.stockOrderId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns aggregates for stock order
     * @param stockOrderId stock order dbID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAggregatesForStockOrder(stockOrderId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseB2CHistoryTimeline>;
    public getAggregatesForStockOrder(stockOrderId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseB2CHistoryTimeline>>;
    public getAggregatesForStockOrder(stockOrderId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseB2CHistoryTimeline>>;
    public getAggregatesForStockOrder(stockOrderId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (stockOrderId === null || stockOrderId === undefined) {
            throw new Error('Required parameter stockOrderId was null or undefined when calling getAggregatesForStockOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseB2CHistoryTimeline>(`${this.configuration.basePath}/chain-api/data/public/aggregates/${encodeURIComponent(String(stockOrderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetAggregatesForStockOrder')));
        }
        return handle;
    }


  /**
   *  by map.
   * Returns B2C relevant data for stock order
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getB2CDataForStockOrderByMap(
    map: GetB2CDataForStockOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public getB2CDataForStockOrderByMap(
    map: GetB2CDataForStockOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public getB2CDataForStockOrderByMap(
    map: GetB2CDataForStockOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public getB2CDataForStockOrderByMap(
    map: GetB2CDataForStockOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getB2CDataForStockOrder(
      map.stockOrderId,
      map.orderId,
      map.cooperative,
      map.cuppingGrade,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns B2C relevant data for stock order
     * @param stockOrderId stock order dbID
     * @param orderId 
     * @param cooperative 
     * @param cuppingGrade 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getB2CDataForStockOrder(stockOrderId: string, orderId?: boolean, cooperative?: boolean, cuppingGrade?: boolean, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public getB2CDataForStockOrder(stockOrderId: string, orderId?: boolean, cooperative?: boolean, cuppingGrade?: boolean, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public getB2CDataForStockOrder(stockOrderId: string, orderId?: boolean, cooperative?: boolean, cuppingGrade?: boolean, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public getB2CDataForStockOrder(stockOrderId: string, orderId?: boolean, cooperative?: boolean, cuppingGrade?: boolean, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (stockOrderId === null || stockOrderId === undefined) {
            throw new Error('Required parameter stockOrderId was null or undefined when calling getB2CDataForStockOrder.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (orderId !== undefined && orderId !== null) {
            queryParameters = queryParameters.set('orderId', <any>orderId);
        }
        if (cooperative !== undefined && cooperative !== null) {
            queryParameters = queryParameters.set('cooperative', <any>cooperative);
        }
        if (cuppingGrade !== undefined && cuppingGrade !== null) {
            queryParameters = queryParameters.set('cuppingGrade', <any>cuppingGrade);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/public/b2c/${encodeURIComponent(String(stockOrderId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetB2CDataForStockOrder')));
        }
        return handle;
    }

}
