/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainTransaction } from '../model/apiResponseChainTransaction';
import { ApiResponsePaginatedListChainTransaction } from '../model/apiResponsePaginatedListChainTransaction';
import { ChainProcessingOrder } from '../model/chainProcessingOrder';
import { ChainStockOrder } from '../model/chainStockOrder';
import { ChainTransaction } from '../model/chainTransaction';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for approveTransactions.
 */
export namespace ApproveTransactions {
    /**
     * Parameter map for approveTransactions.
     */
    export interface PartialParamMap {
      transactionId: string;
    }

    /**
     * Enumeration of all parameters for approveTransactions.
     */
    export enum Parameters {
      transactionId = 'transactionId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of approveTransactions
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ApproveTransactions.PartialParamMap]?: [string, ValidatorFn][]} = {
      transactionId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for cancelTransactions.
 */
export namespace CancelTransactions {
    /**
     * Parameter map for cancelTransactions.
     */
    export interface PartialParamMap {
      transactionId: string;
      rejection: string;
    }

    /**
     * Enumeration of all parameters for cancelTransactions.
     */
    export enum Parameters {
      transactionId = 'transactionId',
      rejection = 'rejection'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of cancelTransactions
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CancelTransactions.PartialParamMap]?: [string, ValidatorFn][]} = {
      transactionId: [
              ['required', Validators.required],
      ],
      rejection: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for deleteTransaction.
 */
export namespace DeleteTransaction {
    /**
     * Parameter map for deleteTransaction.
     */
    export interface PartialParamMap {
      ChainTransaction: ChainTransaction;
    }

    /**
     * Enumeration of all parameters for deleteTransaction.
     */
    export enum Parameters {
      ChainTransaction = 'ChainTransaction'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteTransaction
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteTransaction.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for deleteTransactions.
 */
export namespace DeleteTransactions {
    /**
     * Parameter map for deleteTransactions.
     */
    export interface PartialParamMap {
      ChainTransaction: Array<ChainTransaction>;
    }

    /**
     * Enumeration of all parameters for deleteTransactions.
     */
    export enum Parameters {
      ChainTransaction = 'ChainTransaction'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteTransactions
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteTransactions.PartialParamMap]?: [string, ValidatorFn][]} = {
      ChainTransaction: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getTransactionById.
 */
export namespace GetTransactionById {
    /**
     * Parameter map for getTransactionById.
     */
    export interface PartialParamMap {
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getTransactionById.
     */
    export enum Parameters {
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getTransactionById
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetTransactionById.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listInputTransactionsForProductUnitId.
 */
export namespace ListInputTransactionsForProductUnitId {
    /**
     * Parameter map for listInputTransactionsForProductUnitId.
     */
    export interface PartialParamMap {
      stockOrderId: string;
      sort?: 'ASC' | 'DESC';
      limit?: number;
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listInputTransactionsForProductUnitId.
     */
    export enum Parameters {
      stockOrderId = 'stockOrderId',
      sort = 'sort',
      limit = 'limit',
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listInputTransactionsForProductUnitId
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListInputTransactionsForProductUnitId.PartialParamMap]?: [string, ValidatorFn][]} = {
      stockOrderId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listOutputTransactionsForProductUnitId.
 */
export namespace ListOutputTransactionsForProductUnitId {
    /**
     * Parameter map for listOutputTransactionsForProductUnitId.
     */
    export interface PartialParamMap {
      stockOrderId: string;
      sort?: 'ASC' | 'DESC';
      limit?: number;
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listOutputTransactionsForProductUnitId.
     */
    export enum Parameters {
      stockOrderId = 'stockOrderId',
      sort = 'sort',
      limit = 'limit',
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listOutputTransactionsForProductUnitId
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListOutputTransactionsForProductUnitId.PartialParamMap]?: [string, ValidatorFn][]} = {
      stockOrderId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listTransactionQuery.
 */
export namespace ListTransactionQuery {
    /**
     * Parameter map for listTransactionQuery.
     */
    export interface PartialParamMap {
      sourceFacilityId?: string;
      targetFacilityId?: string;
      semiProductId?: string;
      startDate?: string;
      endDate?: string;
      /**
       * query by identifier
       */
      query?: string;
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listTransactionQuery.
     */
    export enum Parameters {
      sourceFacilityId = 'sourceFacilityId',
      targetFacilityId = 'targetFacilityId',
      semiProductId = 'semiProductId',
      startDate = 'startDate',
      endDate = 'endDate',
      /**
       * query by identifier
       */
      query = 'query',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listTransactionQuery
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListTransactionQuery.PartialParamMap]?: [string, ValidatorFn][]} = {
      sourceFacilityId: [
      ],
      targetFacilityId: [
      ],
      semiProductId: [
      ],
      startDate: [
      ],
      endDate: [
      ],
      query: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listTransactionsForOrganization.
 */
export namespace ListTransactionsForOrganization {
    /**
     * Parameter map for listTransactionsForOrganization.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listTransactionsForOrganization.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listTransactionsForOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListTransactionsForOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postProcessingOrdersWithInputTransactionsAndOutputStockOrders.
 */
export namespace PostProcessingOrdersWithInputTransactionsAndOutputStockOrders {
    /**
     * Parameter map for postProcessingOrdersWithInputTransactionsAndOutputStockOrders.
     */
    export interface PartialParamMap {
      ChainProcessingOrder: Array<ChainProcessingOrder>;
    }

    /**
     * Enumeration of all parameters for postProcessingOrdersWithInputTransactionsAndOutputStockOrders.
     */
    export enum Parameters {
      ChainProcessingOrder = 'ChainProcessingOrder'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postProcessingOrdersWithInputTransactionsAndOutputStockOrders
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostProcessingOrdersWithInputTransactionsAndOutputStockOrders.PartialParamMap]?: [string, ValidatorFn][]} = {
      ChainProcessingOrder: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for postStockOrdersWithInputTransactions.
 */
export namespace PostStockOrdersWithInputTransactions {
    /**
     * Parameter map for postStockOrdersWithInputTransactions.
     */
    export interface PartialParamMap {
      ChainStockOrder: ChainStockOrder;
    }

    /**
     * Enumeration of all parameters for postStockOrdersWithInputTransactions.
     */
    export enum Parameters {
      ChainStockOrder = 'ChainStockOrder'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postStockOrdersWithInputTransactions
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostStockOrdersWithInputTransactions.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for postTransaction.
 */
export namespace PostTransaction {
    /**
     * Parameter map for postTransaction.
     */
    export interface PartialParamMap {
      ChainTransaction: ChainTransaction;
    }

    /**
     * Enumeration of all parameters for postTransaction.
     */
    export enum Parameters {
      ChainTransaction = 'ChainTransaction'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postTransaction
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostTransaction.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class TransactionService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Approve transaction
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public approveTransactionsByMap(
    map: ApproveTransactions.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public approveTransactionsByMap(
    map: ApproveTransactions.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public approveTransactionsByMap(
    map: ApproveTransactions.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public approveTransactionsByMap(
    map: ApproveTransactions.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.approveTransactions(
      map.transactionId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Approve transaction
     * @param transactionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public approveTransactions(transactionId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public approveTransactions(transactionId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public approveTransactions(transactionId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public approveTransactions(transactionId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling approveTransactions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction/approve-transactions/${encodeURIComponent(String(transactionId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ApproveTransactions')));
        }
        return handle;
    }


  /**
   *  by map.
   * Cancel transaction
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public cancelTransactionsByMap(
    map: CancelTransactions.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public cancelTransactionsByMap(
    map: CancelTransactions.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public cancelTransactionsByMap(
    map: CancelTransactions.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public cancelTransactionsByMap(
    map: CancelTransactions.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.cancelTransactions(
      map.transactionId,
      map.rejection,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Cancel transaction
     * @param transactionId 
     * @param rejection 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public cancelTransactions(transactionId: string, rejection: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public cancelTransactions(transactionId: string, rejection: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public cancelTransactions(transactionId: string, rejection: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public cancelTransactions(transactionId: string, rejection: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (transactionId === null || transactionId === undefined) {
            throw new Error('Required parameter transactionId was null or undefined when calling cancelTransactions.');
        }
        if (rejection === null || rejection === undefined) {
            throw new Error('Required parameter rejection was null or undefined when calling cancelTransactions.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (rejection !== undefined && rejection !== null) {
            queryParameters = queryParameters.set('rejection', <any>rejection);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction/cancel-transactions/${encodeURIComponent(String(transactionId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'CancelTransactions')));
        }
        return handle;
    }


  /**
   *  by map.
   * Deletes transaction
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteTransactionByMap(
    map: DeleteTransaction.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteTransactionByMap(
    map: DeleteTransaction.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteTransactionByMap(
    map: DeleteTransaction.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteTransactionByMap(
    map: DeleteTransaction.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteTransaction(
      map.ChainTransaction,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes transaction
     * @param ChainTransaction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTransaction(ChainTransaction: ChainTransaction, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteTransaction(ChainTransaction: ChainTransaction, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteTransaction(ChainTransaction: ChainTransaction, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteTransaction(ChainTransaction: ChainTransaction, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainTransaction === null || ChainTransaction === undefined) {
            throw new Error('Required parameter ChainTransaction was null or undefined when calling deleteTransaction.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction/delete`,
            ChainTransaction,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteTransaction')));
        }
        return handle;
    }


  /**
   *  by map.
   * Deletes transactions orders.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteTransactionsByMap(
    map: DeleteTransactions.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteTransactionsByMap(
    map: DeleteTransactions.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteTransactionsByMap(
    map: DeleteTransactions.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteTransactionsByMap(
    map: DeleteTransactions.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteTransactions(
      map.ChainTransaction,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes transactions orders.
     * @param ChainTransaction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteTransactions(ChainTransaction: Array<ChainTransaction>, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteTransactions(ChainTransaction: Array<ChainTransaction>, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteTransactions(ChainTransaction: Array<ChainTransaction>, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteTransactions(ChainTransaction: Array<ChainTransaction>, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainTransaction === null || ChainTransaction === undefined) {
            throw new Error('Required parameter ChainTransaction was null or undefined when calling deleteTransactions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction/delete-transactions`,
            ChainTransaction,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteTransactions')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches a transaction by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getTransactionByIdByMap(
    map: GetTransactionById.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainTransaction>;
  public getTransactionByIdByMap(
    map: GetTransactionById.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainTransaction>>;
  public getTransactionByIdByMap(
    map: GetTransactionById.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainTransaction>>;
  public getTransactionByIdByMap(
    map: GetTransactionById.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getTransactionById(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches a transaction by its _id.
     * @param dbId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTransactionById(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainTransaction>;
    public getTransactionById(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainTransaction>>;
    public getTransactionById(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainTransaction>>;
    public getTransactionById(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getTransactionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainTransaction>(`${this.configuration.basePath}/chain-api/data/transaction/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetTransactionById')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of input transactions for a stock order.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listInputTransactionsForProductUnitIdByMap(
    map: ListInputTransactionsForProductUnitId.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainTransaction>;
  public listInputTransactionsForProductUnitIdByMap(
    map: ListInputTransactionsForProductUnitId.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
  public listInputTransactionsForProductUnitIdByMap(
    map: ListInputTransactionsForProductUnitId.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
  public listInputTransactionsForProductUnitIdByMap(
    map: ListInputTransactionsForProductUnitId.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listInputTransactionsForProductUnitId(
      map.stockOrderId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of input transactions for a stock order.
     * @param stockOrderId 
     * @param sort 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listInputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainTransaction>;
    public listInputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
    public listInputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
    public listInputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (stockOrderId === null || stockOrderId === undefined) {
            throw new Error('Required parameter stockOrderId was null or undefined when calling listInputTransactionsForProductUnitId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainTransaction>(`${this.configuration.basePath}/chain-api/data/transaction/input/${encodeURIComponent(String(stockOrderId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListInputTransactionsForProductUnitId')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of output transactions for a stock order.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listOutputTransactionsForProductUnitIdByMap(
    map: ListOutputTransactionsForProductUnitId.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainTransaction>;
  public listOutputTransactionsForProductUnitIdByMap(
    map: ListOutputTransactionsForProductUnitId.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
  public listOutputTransactionsForProductUnitIdByMap(
    map: ListOutputTransactionsForProductUnitId.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
  public listOutputTransactionsForProductUnitIdByMap(
    map: ListOutputTransactionsForProductUnitId.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listOutputTransactionsForProductUnitId(
      map.stockOrderId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of output transactions for a stock order.
     * @param stockOrderId 
     * @param sort 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOutputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainTransaction>;
    public listOutputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
    public listOutputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
    public listOutputTransactionsForProductUnitId(stockOrderId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (stockOrderId === null || stockOrderId === undefined) {
            throw new Error('Required parameter stockOrderId was null or undefined when calling listOutputTransactionsForProductUnitId.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainTransaction>(`${this.configuration.basePath}/chain-api/data/transaction/output/${encodeURIComponent(String(stockOrderId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListOutputTransactionsForProductUnitId')));
        }
        return handle;
    }


  /**
   *  by map.
   * Returns a paginated list of all transactions subject to search parameters
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listTransactionQueryByMap(
    map: ListTransactionQuery.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainTransaction>;
  public listTransactionQueryByMap(
    map: ListTransactionQuery.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
  public listTransactionQueryByMap(
    map: ListTransactionQuery.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
  public listTransactionQueryByMap(
    map: ListTransactionQuery.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listTransactionQuery(
      map.sourceFacilityId,
      map.targetFacilityId,
      map.semiProductId,
      map.startDate,
      map.endDate,
      map.query,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns a paginated list of all transactions subject to search parameters
     * @param sourceFacilityId 
     * @param targetFacilityId 
     * @param semiProductId 
     * @param startDate 
     * @param endDate 
     * @param query query by identifier
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listTransactionQuery(sourceFacilityId?: string, targetFacilityId?: string, semiProductId?: string, startDate?: string, endDate?: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainTransaction>;
    public listTransactionQuery(sourceFacilityId?: string, targetFacilityId?: string, semiProductId?: string, startDate?: string, endDate?: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
    public listTransactionQuery(sourceFacilityId?: string, targetFacilityId?: string, semiProductId?: string, startDate?: string, endDate?: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
    public listTransactionQuery(sourceFacilityId?: string, targetFacilityId?: string, semiProductId?: string, startDate?: string, endDate?: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sourceFacilityId !== undefined && sourceFacilityId !== null) {
            queryParameters = queryParameters.set('sourceFacilityId', <any>sourceFacilityId);
        }
        if (targetFacilityId !== undefined && targetFacilityId !== null) {
            queryParameters = queryParameters.set('targetFacilityId', <any>targetFacilityId);
        }
        if (semiProductId !== undefined && semiProductId !== null) {
            queryParameters = queryParameters.set('semiProductId', <any>semiProductId);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainTransaction>(`${this.configuration.basePath}/chain-api/data/transaction/query`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListTransactionQuery')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of transactions for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listTransactionsForOrganizationByMap(
    map: ListTransactionsForOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainTransaction>;
  public listTransactionsForOrganizationByMap(
    map: ListTransactionsForOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
  public listTransactionsForOrganizationByMap(
    map: ListTransactionsForOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
  public listTransactionsForOrganizationByMap(
    map: ListTransactionsForOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listTransactionsForOrganization(
      map.organizationId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of transactions for a given organization
     * @param organizationId _id of a given organization
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listTransactionsForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainTransaction>;
    public listTransactionsForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainTransaction>>;
    public listTransactionsForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainTransaction>>;
    public listTransactionsForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listTransactionsForOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainTransaction>(`${this.configuration.basePath}/chain-api/data/transaction/list/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListTransactionsForOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a list of processing orders with input transactions and output orders
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postProcessingOrdersWithInputTransactionsAndOutputStockOrdersByMap(
    map: PostProcessingOrdersWithInputTransactionsAndOutputStockOrders.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postProcessingOrdersWithInputTransactionsAndOutputStockOrdersByMap(
    map: PostProcessingOrdersWithInputTransactionsAndOutputStockOrders.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postProcessingOrdersWithInputTransactionsAndOutputStockOrdersByMap(
    map: PostProcessingOrdersWithInputTransactionsAndOutputStockOrders.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postProcessingOrdersWithInputTransactionsAndOutputStockOrdersByMap(
    map: PostProcessingOrdersWithInputTransactionsAndOutputStockOrders.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postProcessingOrdersWithInputTransactionsAndOutputStockOrders(
      map.ChainProcessingOrder,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a list of processing orders with input transactions and output orders
     * @param ChainProcessingOrder 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postProcessingOrdersWithInputTransactionsAndOutputStockOrders(ChainProcessingOrder: Array<ChainProcessingOrder>, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postProcessingOrdersWithInputTransactionsAndOutputStockOrders(ChainProcessingOrder: Array<ChainProcessingOrder>, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postProcessingOrdersWithInputTransactionsAndOutputStockOrders(ChainProcessingOrder: Array<ChainProcessingOrder>, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postProcessingOrdersWithInputTransactionsAndOutputStockOrders(ChainProcessingOrder: Array<ChainProcessingOrder>, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainProcessingOrder === null || ChainProcessingOrder === undefined) {
            throw new Error('Required parameter ChainProcessingOrder was null or undefined when calling postProcessingOrdersWithInputTransactionsAndOutputStockOrders.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction/processing-orders-with-inputs-and-outputs`,
            ChainProcessingOrder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostProcessingOrdersWithInputTransactionsAndOutputStockOrders')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a list of stock orders with input transactions.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postStockOrdersWithInputTransactionsByMap(
    map: PostStockOrdersWithInputTransactions.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postStockOrdersWithInputTransactionsByMap(
    map: PostStockOrdersWithInputTransactions.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postStockOrdersWithInputTransactionsByMap(
    map: PostStockOrdersWithInputTransactions.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postStockOrdersWithInputTransactionsByMap(
    map: PostStockOrdersWithInputTransactions.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postStockOrdersWithInputTransactions(
      map.ChainStockOrder,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a list of stock orders with input transactions.
     * @param ChainStockOrder 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postStockOrdersWithInputTransactions(ChainStockOrder: ChainStockOrder, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postStockOrdersWithInputTransactions(ChainStockOrder: ChainStockOrder, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postStockOrdersWithInputTransactions(ChainStockOrder: ChainStockOrder, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postStockOrdersWithInputTransactions(ChainStockOrder: ChainStockOrder, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainStockOrder === null || ChainStockOrder === undefined) {
            throw new Error('Required parameter ChainStockOrder was null or undefined when calling postStockOrdersWithInputTransactions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction/stock-orders-with-inputs`,
            ChainStockOrder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostStockOrdersWithInputTransactions')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a transaction. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postTransactionByMap(
    map: PostTransaction.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postTransactionByMap(
    map: PostTransaction.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postTransactionByMap(
    map: PostTransaction.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postTransactionByMap(
    map: PostTransaction.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postTransaction(
      map.ChainTransaction,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a transaction. When inserting fields _id, _rev and docType should not be present.
     * @param ChainTransaction 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postTransaction(ChainTransaction: ChainTransaction, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postTransaction(ChainTransaction: ChainTransaction, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postTransaction(ChainTransaction: ChainTransaction, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postTransaction(ChainTransaction: ChainTransaction, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainTransaction === null || ChainTransaction === undefined) {
            throw new Error('Required parameter ChainTransaction was null or undefined when calling postTransaction.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/transaction`,
            ChainTransaction,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostTransaction')));
        }
        return handle;
    }

}
