/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainCompanyCustomer } from '../model/apiResponseChainCompanyCustomer';
import { ApiResponseChainCompanyCustomerArray } from '../model/apiResponseChainCompanyCustomerArray';
import { ApiResponsePaginatedListChainCompanyCustomer } from '../model/apiResponsePaginatedListChainCompanyCustomer';
import { ChainCompanyCustomer } from '../model/chainCompanyCustomer';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for companyCustomersForIds.
 */
export namespace CompanyCustomersForIds {
    /**
     * Parameter map for companyCustomersForIds.
     */
    export interface PartialParamMap {
      /**
       * list of external ids
       */
      request_body: Array<number>;
    }

    /**
     * Enumeration of all parameters for companyCustomersForIds.
     */
    export enum Parameters {
      /**
       * list of external ids
       */
      request_body = 'request_body'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of companyCustomersForIds
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CompanyCustomersForIds.PartialParamMap]?: [string, ValidatorFn][]} = {
      request_body: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for deleteCompanyCustomer.
 */
export namespace DeleteCompanyCustomer {
    /**
     * Parameter map for deleteCompanyCustomer.
     */
    export interface PartialParamMap {
      ChainCompanyCustomer: ChainCompanyCustomer;
    }

    /**
     * Enumeration of all parameters for deleteCompanyCustomer.
     */
    export enum Parameters {
      ChainCompanyCustomer = 'ChainCompanyCustomer'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteCompanyCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteCompanyCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getComapnyCustomerByAFId.
 */
export namespace GetComapnyCustomerByAFId {
    /**
     * Parameter map for getComapnyCustomerByAFId.
     */
    export interface PartialParamMap {
      /**
       * external database product id
       */
      linkId: number;
    }

    /**
     * Enumeration of all parameters for getComapnyCustomerByAFId.
     */
    export enum Parameters {
      /**
       * external database product id
       */
      linkId = 'linkId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getComapnyCustomerByAFId
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetComapnyCustomerByAFId.PartialParamMap]?: [string, ValidatorFn][]} = {
      linkId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getCompanyCustomer.
 */
export namespace GetCompanyCustomer {
    /**
     * Parameter map for getCompanyCustomer.
     */
    export interface PartialParamMap {
      /**
       * database id of the product
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getCompanyCustomer.
     */
    export enum Parameters {
      /**
       * database id of the product
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getCompanyCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetCompanyCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listCompanyCustomers.
 */
export namespace ListCompanyCustomers {
    /**
     * Parameter map for listCompanyCustomers.
     */
    export interface PartialParamMap {
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listCompanyCustomers.
     */
    export enum Parameters {
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listCompanyCustomers
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListCompanyCustomers.PartialParamMap]?: [string, ValidatorFn][]} = {
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listCompanyCustomersForOrganization.
 */
export namespace ListCompanyCustomersForOrganization {
    /**
     * Parameter map for listCompanyCustomersForOrganization.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listCompanyCustomersForOrganization.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listCompanyCustomersForOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListCompanyCustomersForOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listCompanyCustomersForProductAndOrganization.
 */
export namespace ListCompanyCustomersForProductAndOrganization {
    /**
     * Parameter map for listCompanyCustomersForProductAndOrganization.
     */
    export interface PartialParamMap {
      productId: string;
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listCompanyCustomersForProductAndOrganization.
     */
    export enum Parameters {
      productId = 'productId',
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listCompanyCustomersForProductAndOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListCompanyCustomersForProductAndOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      productId: [
              ['required', Validators.required],
      ],
      organizationId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postCompanyCustomer.
 */
export namespace PostCompanyCustomer {
    /**
     * Parameter map for postCompanyCustomer.
     */
    export interface PartialParamMap {
      ChainCompanyCustomer: ChainCompanyCustomer;
    }

    /**
     * Enumeration of all parameters for postCompanyCustomer.
     */
    export enum Parameters {
      ChainCompanyCustomer = 'ChainCompanyCustomer'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postCompanyCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostCompanyCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class CompanyCustomerService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Returns a list of company customers matching to the list of external ids. Warning: Id lists and response list do not necessary match in length. if invalid external id is provided in the request&#39;s list the response list is shorter.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public companyCustomersForIdsByMap(
    map: CompanyCustomersForIds.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainCompanyCustomerArray>;
  public companyCustomersForIdsByMap(
    map: CompanyCustomersForIds.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainCompanyCustomerArray>>;
  public companyCustomersForIdsByMap(
    map: CompanyCustomersForIds.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainCompanyCustomerArray>>;
  public companyCustomersForIdsByMap(
    map: CompanyCustomersForIds.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.companyCustomersForIds(
      map.request_body,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns a list of company customers matching to the list of external ids. Warning: Id lists and response list do not necessary match in length. if invalid external id is provided in the request&#39;s list the response list is shorter.
     * @param request_body list of external ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public companyCustomersForIds(request_body: Array<number>, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainCompanyCustomerArray>;
    public companyCustomersForIds(request_body: Array<number>, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainCompanyCustomerArray>>;
    public companyCustomersForIds(request_body: Array<number>, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainCompanyCustomerArray>>;
    public companyCustomersForIds(request_body: Array<number>, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (request_body === null || request_body === undefined) {
            throw new Error('Required parameter request_body was null or undefined when calling companyCustomersForIds.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseChainCompanyCustomerArray>(`${this.configuration.basePath}/chain-api/data/company-customer/external/list`,
            request_body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'CompanyCustomersForIds')));
        }
        return handle;
    }


  /**
   *  by map.
   * Deletes company custoemr
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteCompanyCustomerByMap(
    map: DeleteCompanyCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteCompanyCustomerByMap(
    map: DeleteCompanyCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteCompanyCustomerByMap(
    map: DeleteCompanyCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteCompanyCustomerByMap(
    map: DeleteCompanyCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteCompanyCustomer(
      map.ChainCompanyCustomer,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes company custoemr
     * @param ChainCompanyCustomer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainCompanyCustomer === null || ChainCompanyCustomer === undefined) {
            throw new Error('Required parameter ChainCompanyCustomer was null or undefined when calling deleteCompanyCustomer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/company-customer/delete`,
            ChainCompanyCustomer,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteCompanyCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Returns company customer according to external database id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getComapnyCustomerByAFIdByMap(
    map: GetComapnyCustomerByAFId.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainCompanyCustomer>;
  public getComapnyCustomerByAFIdByMap(
    map: GetComapnyCustomerByAFId.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainCompanyCustomer>>;
  public getComapnyCustomerByAFIdByMap(
    map: GetComapnyCustomerByAFId.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainCompanyCustomer>>;
  public getComapnyCustomerByAFIdByMap(
    map: GetComapnyCustomerByAFId.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getComapnyCustomerByAFId(
      map.linkId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns company customer according to external database id.
     * @param linkId external database product id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getComapnyCustomerByAFId(linkId: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainCompanyCustomer>;
    public getComapnyCustomerByAFId(linkId: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainCompanyCustomer>>;
    public getComapnyCustomerByAFId(linkId: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainCompanyCustomer>>;
    public getComapnyCustomerByAFId(linkId: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling getComapnyCustomerByAFId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainCompanyCustomer>(`${this.configuration.basePath}/chain-api/data/company-customer/external/${encodeURIComponent(String(linkId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetComapnyCustomerByAFId')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches comapny customer by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCompanyCustomerByMap(
    map: GetCompanyCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainCompanyCustomer>;
  public getCompanyCustomerByMap(
    map: GetCompanyCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainCompanyCustomer>>;
  public getCompanyCustomerByMap(
    map: GetCompanyCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainCompanyCustomer>>;
  public getCompanyCustomerByMap(
    map: GetCompanyCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getCompanyCustomer(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches comapny customer by its _id.
     * @param dbId database id of the product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompanyCustomer(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainCompanyCustomer>;
    public getCompanyCustomer(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainCompanyCustomer>>;
    public getCompanyCustomer(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainCompanyCustomer>>;
    public getCompanyCustomer(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getCompanyCustomer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainCompanyCustomer>(`${this.configuration.basePath}/chain-api/data/company-customer/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetCompanyCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of company customers.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listCompanyCustomersByMap(
    map: ListCompanyCustomers.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainCompanyCustomer>;
  public listCompanyCustomersByMap(
    map: ListCompanyCustomers.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainCompanyCustomer>>;
  public listCompanyCustomersByMap(
    map: ListCompanyCustomers.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainCompanyCustomer>>;
  public listCompanyCustomersByMap(
    map: ListCompanyCustomers.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listCompanyCustomers(
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of company customers.
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCompanyCustomers(sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainCompanyCustomer>;
    public listCompanyCustomers(sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainCompanyCustomer>>;
    public listCompanyCustomers(sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainCompanyCustomer>>;
    public listCompanyCustomers(sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainCompanyCustomer>(`${this.configuration.basePath}/chain-api/data/company-customer/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListCompanyCustomers')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of company customers for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listCompanyCustomersForOrganizationByMap(
    map: ListCompanyCustomersForOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainCompanyCustomer>;
  public listCompanyCustomersForOrganizationByMap(
    map: ListCompanyCustomersForOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainCompanyCustomer>>;
  public listCompanyCustomersForOrganizationByMap(
    map: ListCompanyCustomersForOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainCompanyCustomer>>;
  public listCompanyCustomersForOrganizationByMap(
    map: ListCompanyCustomersForOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listCompanyCustomersForOrganization(
      map.organizationId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of company customers for a given organization
     * @param organizationId _id of a given organization
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCompanyCustomersForOrganization(organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainCompanyCustomer>;
    public listCompanyCustomersForOrganization(organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainCompanyCustomer>>;
    public listCompanyCustomersForOrganization(organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainCompanyCustomer>>;
    public listCompanyCustomersForOrganization(organizationId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listCompanyCustomersForOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainCompanyCustomer>(`${this.configuration.basePath}/chain-api/data/company-customer/list/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListCompanyCustomersForOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of company customers for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listCompanyCustomersForProductAndOrganizationByMap(
    map: ListCompanyCustomersForProductAndOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainCompanyCustomer>;
  public listCompanyCustomersForProductAndOrganizationByMap(
    map: ListCompanyCustomersForProductAndOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainCompanyCustomer>>;
  public listCompanyCustomersForProductAndOrganizationByMap(
    map: ListCompanyCustomersForProductAndOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainCompanyCustomer>>;
  public listCompanyCustomersForProductAndOrganizationByMap(
    map: ListCompanyCustomersForProductAndOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listCompanyCustomersForProductAndOrganization(
      map.productId,
      map.organizationId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of company customers for a given organization
     * @param productId 
     * @param organizationId _id of a given organization
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listCompanyCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainCompanyCustomer>;
    public listCompanyCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainCompanyCustomer>>;
    public listCompanyCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainCompanyCustomer>>;
    public listCompanyCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling listCompanyCustomersForProductAndOrganization.');
        }
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listCompanyCustomersForProductAndOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainCompanyCustomer>(`${this.configuration.basePath}/chain-api/data/company-customer/list/product/${encodeURIComponent(String(productId))}/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListCompanyCustomersForProductAndOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a company customer. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postCompanyCustomerByMap(
    map: PostCompanyCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postCompanyCustomerByMap(
    map: PostCompanyCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postCompanyCustomerByMap(
    map: PostCompanyCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postCompanyCustomerByMap(
    map: PostCompanyCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postCompanyCustomer(
      map.ChainCompanyCustomer,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a company customer. When inserting fields _id, _rev and docType should not be present.
     * @param ChainCompanyCustomer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postCompanyCustomer(ChainCompanyCustomer: ChainCompanyCustomer, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainCompanyCustomer === null || ChainCompanyCustomer === undefined) {
            throw new Error('Required parameter ChainCompanyCustomer was null or undefined when calling postCompanyCustomer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/company-customer`,
            ChainCompanyCustomer,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostCompanyCustomer')));
        }
        return handle;
    }

}
