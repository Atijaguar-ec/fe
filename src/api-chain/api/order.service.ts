/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainProductOrder } from '../model/apiResponseChainProductOrder';
import { ApiResponsePaginatedListChainProductOrder } from '../model/apiResponsePaginatedListChainProductOrder';
import { ApiResponseProcessingOrderHistoryArray } from '../model/apiResponseProcessingOrderHistoryArray';
import { ApiResponseQuoteRequirementConfirmationsWithMetaData } from '../model/apiResponseQuoteRequirementConfirmationsWithMetaData';
import { ChainProductOrder } from '../model/chainProductOrder';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for deleteOrder.
 */
export namespace DeleteOrder {
    /**
     * Parameter map for deleteOrder.
     */
    export interface PartialParamMap {
      ChainProductOrder: ChainProductOrder;
    }

    /**
     * Enumeration of all parameters for deleteOrder.
     */
    export enum Parameters {
      ChainProductOrder = 'ChainProductOrder'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getAggregatesForOrder.
 */
export namespace GetAggregatesForOrder {
    /**
     * Parameter map for getAggregatesForOrder.
     */
    export interface PartialParamMap {
      orderId: string;
    }

    /**
     * Enumeration of all parameters for getAggregatesForOrder.
     */
    export enum Parameters {
      orderId = 'orderId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getAggregatesForOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetAggregatesForOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
      orderId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getOrder.
 */
export namespace GetOrder {
    /**
     * Parameter map for getOrder.
     */
    export interface PartialParamMap {
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getOrder.
     */
    export enum Parameters {
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getQuoteRequirementsVerification.
 */
export namespace GetQuoteRequirementsVerification {
    /**
     * Parameter map for getQuoteRequirementsVerification.
     */
    export interface PartialParamMap {
      orderId: string;
    }

    /**
     * Enumeration of all parameters for getQuoteRequirementsVerification.
     */
    export enum Parameters {
      orderId = 'orderId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getQuoteRequirementsVerification
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetQuoteRequirementsVerification.PartialParamMap]?: [string, ValidatorFn][]} = {
      orderId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listOpenOrdersForFacility.
 */
export namespace ListOpenOrdersForFacility {
    /**
     * Parameter map for listOpenOrdersForFacility.
     */
    export interface PartialParamMap {
      facilityId: string;
      openOnly?: boolean;
      sort?: any;
      sortBy?: string;
      limit?: number;
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listOpenOrdersForFacility.
     */
    export enum Parameters {
      facilityId = 'facilityId',
      openOnly = 'openOnly',
      sort = 'sort',
      sortBy = 'sortBy',
      limit = 'limit',
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listOpenOrdersForFacility
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListOpenOrdersForFacility.PartialParamMap]?: [string, ValidatorFn][]} = {
      facilityId: [
              ['required', Validators.required],
      ],
      openOnly: [
      ],
      sort: [
      ],
      sortBy: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listOpenOrdersForOrganization.
 */
export namespace ListOpenOrdersForOrganization {
    /**
     * Parameter map for listOpenOrdersForOrganization.
     */
    export interface PartialParamMap {
      organizationId: string;
      openOnly?: boolean;
      sort?: any;
      sortBy?: string;
      limit?: number;
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listOpenOrdersForOrganization.
     */
    export enum Parameters {
      organizationId = 'organizationId',
      openOnly = 'openOnly',
      sort = 'sort',
      sortBy = 'sortBy',
      limit = 'limit',
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listOpenOrdersForOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListOpenOrdersForOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      openOnly: [
      ],
      sort: [
      ],
      sortBy: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postOrder.
 */
export namespace PostOrder {
    /**
     * Parameter map for postOrder.
     */
    export interface PartialParamMap {
      ChainProductOrder: ChainProductOrder;
    }

    /**
     * Enumeration of all parameters for postOrder.
     */
    export enum Parameters {
      ChainProductOrder = 'ChainProductOrder'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postOrder
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostOrder.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class OrderService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Deletes order.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteOrderByMap(
    map: DeleteOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteOrderByMap(
    map: DeleteOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteOrderByMap(
    map: DeleteOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteOrderByMap(
    map: DeleteOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteOrder(
      map.ChainProductOrder,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes order.
     * @param ChainProductOrder 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrder(ChainProductOrder: ChainProductOrder, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteOrder(ChainProductOrder: ChainProductOrder, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteOrder(ChainProductOrder: ChainProductOrder, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteOrder(ChainProductOrder: ChainProductOrder, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainProductOrder === null || ChainProductOrder === undefined) {
            throw new Error('Required parameter ChainProductOrder was null or undefined when calling deleteOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/order/delete`,
            ChainProductOrder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteOrder')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAggregatesForOrderByMap(
    map: GetAggregatesForOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseProcessingOrderHistoryArray>;
  public getAggregatesForOrderByMap(
    map: GetAggregatesForOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseProcessingOrderHistoryArray>>;
  public getAggregatesForOrderByMap(
    map: GetAggregatesForOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseProcessingOrderHistoryArray>>;
  public getAggregatesForOrderByMap(
    map: GetAggregatesForOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getAggregatesForOrder(
      map.orderId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param orderId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAggregatesForOrder(orderId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseProcessingOrderHistoryArray>;
    public getAggregatesForOrder(orderId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseProcessingOrderHistoryArray>>;
    public getAggregatesForOrder(orderId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseProcessingOrderHistoryArray>>;
    public getAggregatesForOrder(orderId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getAggregatesForOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseProcessingOrderHistoryArray>(`${this.configuration.basePath}/chain-api/data/order/aggregates-for-order/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetAggregatesForOrder')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches an order by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getOrderByMap(
    map: GetOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainProductOrder>;
  public getOrderByMap(
    map: GetOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainProductOrder>>;
  public getOrderByMap(
    map: GetOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainProductOrder>>;
  public getOrderByMap(
    map: GetOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getOrder(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches an order by its _id.
     * @param dbId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrder(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainProductOrder>;
    public getOrder(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainProductOrder>>;
    public getOrder(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainProductOrder>>;
    public getOrder(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainProductOrder>(`${this.configuration.basePath}/chain-api/data/order/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetOrder')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getQuoteRequirementsVerificationByMap(
    map: GetQuoteRequirementsVerification.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseQuoteRequirementConfirmationsWithMetaData>;
  public getQuoteRequirementsVerificationByMap(
    map: GetQuoteRequirementsVerification.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseQuoteRequirementConfirmationsWithMetaData>>;
  public getQuoteRequirementsVerificationByMap(
    map: GetQuoteRequirementsVerification.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseQuoteRequirementConfirmationsWithMetaData>>;
  public getQuoteRequirementsVerificationByMap(
    map: GetQuoteRequirementsVerification.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getQuoteRequirementsVerification(
      map.orderId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param orderId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQuoteRequirementsVerification(orderId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseQuoteRequirementConfirmationsWithMetaData>;
    public getQuoteRequirementsVerification(orderId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseQuoteRequirementConfirmationsWithMetaData>>;
    public getQuoteRequirementsVerification(orderId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseQuoteRequirementConfirmationsWithMetaData>>;
    public getQuoteRequirementsVerification(orderId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (orderId === null || orderId === undefined) {
            throw new Error('Required parameter orderId was null or undefined when calling getQuoteRequirementsVerification.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseQuoteRequirementConfirmationsWithMetaData>(`${this.configuration.basePath}/chain-api/data/order/quote-requrements-verify-for-order/${encodeURIComponent(String(orderId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetQuoteRequirementsVerification')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listOpenOrdersForFacilityByMap(
    map: ListOpenOrdersForFacility.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainProductOrder>;
  public listOpenOrdersForFacilityByMap(
    map: ListOpenOrdersForFacility.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainProductOrder>>;
  public listOpenOrdersForFacilityByMap(
    map: ListOpenOrdersForFacility.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainProductOrder>>;
  public listOpenOrdersForFacilityByMap(
    map: ListOpenOrdersForFacility.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listOpenOrdersForFacility(
      map.facilityId,
      map.openOnly,
      map.sort,
      map.sortBy,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param facilityId 
     * @param openOnly 
     * @param sort 
     * @param sortBy 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOpenOrdersForFacility(facilityId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainProductOrder>;
    public listOpenOrdersForFacility(facilityId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainProductOrder>>;
    public listOpenOrdersForFacility(facilityId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainProductOrder>>;
    public listOpenOrdersForFacility(facilityId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (facilityId === null || facilityId === undefined) {
            throw new Error('Required parameter facilityId was null or undefined when calling listOpenOrdersForFacility.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (openOnly !== undefined && openOnly !== null) {
            queryParameters = queryParameters.set('openOnly', <any>openOnly);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainProductOrder>(`${this.configuration.basePath}/chain-api/data/order/facility/${encodeURIComponent(String(facilityId))}/list-open`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListOpenOrdersForFacility')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listOpenOrdersForOrganizationByMap(
    map: ListOpenOrdersForOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainProductOrder>;
  public listOpenOrdersForOrganizationByMap(
    map: ListOpenOrdersForOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainProductOrder>>;
  public listOpenOrdersForOrganizationByMap(
    map: ListOpenOrdersForOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainProductOrder>>;
  public listOpenOrdersForOrganizationByMap(
    map: ListOpenOrdersForOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listOpenOrdersForOrganization(
      map.organizationId,
      map.openOnly,
      map.sort,
      map.sortBy,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param organizationId 
     * @param openOnly 
     * @param sort 
     * @param sortBy 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOpenOrdersForOrganization(organizationId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainProductOrder>;
    public listOpenOrdersForOrganization(organizationId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainProductOrder>>;
    public listOpenOrdersForOrganization(organizationId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainProductOrder>>;
    public listOpenOrdersForOrganization(organizationId: string, openOnly?: boolean, sort?: any, sortBy?: string, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listOpenOrdersForOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (openOnly !== undefined && openOnly !== null) {
            queryParameters = queryParameters.set('openOnly', <any>openOnly);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainProductOrder>(`${this.configuration.basePath}/chain-api/data/order/organization/${encodeURIComponent(String(organizationId))}/list-open`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListOpenOrdersForOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates an order. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postOrderByMap(
    map: PostOrder.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postOrderByMap(
    map: PostOrder.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postOrderByMap(
    map: PostOrder.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postOrderByMap(
    map: PostOrder.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postOrder(
      map.ChainProductOrder,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates an order. When inserting fields _id, _rev and docType should not be present.
     * @param ChainProductOrder 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postOrder(ChainProductOrder: ChainProductOrder, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postOrder(ChainProductOrder: ChainProductOrder, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postOrder(ChainProductOrder: ChainProductOrder, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postOrder(ChainProductOrder: ChainProductOrder, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainProductOrder === null || ChainProductOrder === undefined) {
            throw new Error('Required parameter ChainProductOrder was null or undefined when calling postOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/order`,
            ChainProductOrder,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostOrder')));
        }
        return handle;
    }

}
