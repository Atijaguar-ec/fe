/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainDocumentRequirement } from '../model/apiResponseChainDocumentRequirement';
import { ApiResponseChainDocumentRequirementList } from '../model/apiResponseChainDocumentRequirementList';
import { ApiResponsePaginatedListChainDocumentRequirement } from '../model/apiResponsePaginatedListChainDocumentRequirement';
import { ApiResponsePaginatedListChainDocumentRequirementList } from '../model/apiResponsePaginatedListChainDocumentRequirementList';
import { ChainDocumentRequirement } from '../model/chainDocumentRequirement';
import { ChainDocumentRequirementList } from '../model/chainDocumentRequirementList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for deleteDocumentRequirement.
 */
export namespace DeleteDocumentRequirement {
    /**
     * Parameter map for deleteDocumentRequirement.
     */
    export interface PartialParamMap {
      ChainDocumentRequirement: ChainDocumentRequirement;
    }

    /**
     * Enumeration of all parameters for deleteDocumentRequirement.
     */
    export enum Parameters {
      ChainDocumentRequirement = 'ChainDocumentRequirement'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteDocumentRequirement
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteDocumentRequirement.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for deleteDocumentRequirementList.
 */
export namespace DeleteDocumentRequirementList {
    /**
     * Parameter map for deleteDocumentRequirementList.
     */
    export interface PartialParamMap {
      ChainDocumentRequirementList: ChainDocumentRequirementList;
    }

    /**
     * Enumeration of all parameters for deleteDocumentRequirementList.
     */
    export enum Parameters {
      ChainDocumentRequirementList = 'ChainDocumentRequirementList'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteDocumentRequirementList
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteDocumentRequirementList.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getDocumentRequirement.
 */
export namespace GetDocumentRequirement {
    /**
     * Parameter map for getDocumentRequirement.
     */
    export interface PartialParamMap {
      /**
       * database _id of the document requirement
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getDocumentRequirement.
     */
    export enum Parameters {
      /**
       * database _id of the document requirement
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getDocumentRequirement
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetDocumentRequirement.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getDocumentRequirementList.
 */
export namespace GetDocumentRequirementList {
    /**
     * Parameter map for getDocumentRequirementList.
     */
    export interface PartialParamMap {
      /**
       * database _id of the document requirement list
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getDocumentRequirementList.
     */
    export enum Parameters {
      /**
       * database _id of the document requirement list
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getDocumentRequirementList
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetDocumentRequirementList.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listDocumentRequirementListForSemiProduct.
 */
export namespace ListDocumentRequirementListForSemiProduct {
    /**
     * Parameter map for listDocumentRequirementListForSemiProduct.
     */
    export interface PartialParamMap {
      semiProductId: string;
      sort?: 'ASC' | 'DESC';
      limit?: number;
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listDocumentRequirementListForSemiProduct.
     */
    export enum Parameters {
      semiProductId = 'semiProductId',
      sort = 'sort',
      limit = 'limit',
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listDocumentRequirementListForSemiProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListDocumentRequirementListForSemiProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
      semiProductId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listDocumentRequirementLists.
 */
export namespace ListDocumentRequirementLists {
    /**
     * Parameter map for listDocumentRequirementLists.
     */
    export interface PartialParamMap {
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listDocumentRequirementLists.
     */
    export enum Parameters {
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listDocumentRequirementLists
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListDocumentRequirementLists.PartialParamMap]?: [string, ValidatorFn][]} = {
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listDocumentRequirements.
 */
export namespace ListDocumentRequirements {
    /**
     * Parameter map for listDocumentRequirements.
     */
    export interface PartialParamMap {
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listDocumentRequirements.
     */
    export enum Parameters {
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listDocumentRequirements
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListDocumentRequirements.PartialParamMap]?: [string, ValidatorFn][]} = {
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postDocumentRequirement.
 */
export namespace PostDocumentRequirement {
    /**
     * Parameter map for postDocumentRequirement.
     */
    export interface PartialParamMap {
      ChainDocumentRequirement: ChainDocumentRequirement;
    }

    /**
     * Enumeration of all parameters for postDocumentRequirement.
     */
    export enum Parameters {
      ChainDocumentRequirement = 'ChainDocumentRequirement'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postDocumentRequirement
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostDocumentRequirement.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for postDocumentRequirementList.
 */
export namespace PostDocumentRequirementList {
    /**
     * Parameter map for postDocumentRequirementList.
     */
    export interface PartialParamMap {
      ChainDocumentRequirementList: ChainDocumentRequirementList;
    }

    /**
     * Enumeration of all parameters for postDocumentRequirementList.
     */
    export enum Parameters {
      ChainDocumentRequirementList = 'ChainDocumentRequirementList'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postDocumentRequirementList
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostDocumentRequirementList.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class DocumentRequirementsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Deletes document requirement.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteDocumentRequirementByMap(
    map: DeleteDocumentRequirement.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteDocumentRequirementByMap(
    map: DeleteDocumentRequirement.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteDocumentRequirementByMap(
    map: DeleteDocumentRequirement.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteDocumentRequirementByMap(
    map: DeleteDocumentRequirement.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteDocumentRequirement(
      map.ChainDocumentRequirement,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes document requirement.
     * @param ChainDocumentRequirement 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainDocumentRequirement === null || ChainDocumentRequirement === undefined) {
            throw new Error('Required parameter ChainDocumentRequirement was null or undefined when calling deleteDocumentRequirement.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/document-requirement/delete`,
            ChainDocumentRequirement,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteDocumentRequirement')));
        }
        return handle;
    }


  /**
   *  by map.
   * Deletes semi-product.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteDocumentRequirementListByMap(
    map: DeleteDocumentRequirementList.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteDocumentRequirementListByMap(
    map: DeleteDocumentRequirementList.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteDocumentRequirementListByMap(
    map: DeleteDocumentRequirementList.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteDocumentRequirementListByMap(
    map: DeleteDocumentRequirementList.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteDocumentRequirementList(
      map.ChainDocumentRequirementList,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes semi-product.
     * @param ChainDocumentRequirementList 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainDocumentRequirementList === null || ChainDocumentRequirementList === undefined) {
            throw new Error('Required parameter ChainDocumentRequirementList was null or undefined when calling deleteDocumentRequirementList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/document-requirement-list/delete`,
            ChainDocumentRequirementList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteDocumentRequirementList')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches document requirement by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDocumentRequirementByMap(
    map: GetDocumentRequirement.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainDocumentRequirement>;
  public getDocumentRequirementByMap(
    map: GetDocumentRequirement.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainDocumentRequirement>>;
  public getDocumentRequirementByMap(
    map: GetDocumentRequirement.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainDocumentRequirement>>;
  public getDocumentRequirementByMap(
    map: GetDocumentRequirement.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getDocumentRequirement(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches document requirement by its _id.
     * @param dbId database _id of the document requirement
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentRequirement(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainDocumentRequirement>;
    public getDocumentRequirement(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainDocumentRequirement>>;
    public getDocumentRequirement(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainDocumentRequirement>>;
    public getDocumentRequirement(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getDocumentRequirement.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainDocumentRequirement>(`${this.configuration.basePath}/chain-api/data/document-requirement/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetDocumentRequirement')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches document requirement by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDocumentRequirementListByMap(
    map: GetDocumentRequirementList.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainDocumentRequirementList>;
  public getDocumentRequirementListByMap(
    map: GetDocumentRequirementList.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainDocumentRequirementList>>;
  public getDocumentRequirementListByMap(
    map: GetDocumentRequirementList.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainDocumentRequirementList>>;
  public getDocumentRequirementListByMap(
    map: GetDocumentRequirementList.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getDocumentRequirementList(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches document requirement by its _id.
     * @param dbId database _id of the document requirement list
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentRequirementList(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainDocumentRequirementList>;
    public getDocumentRequirementList(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainDocumentRequirementList>>;
    public getDocumentRequirementList(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainDocumentRequirementList>>;
    public getDocumentRequirementList(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getDocumentRequirementList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainDocumentRequirementList>(`${this.configuration.basePath}/chain-api/data/document-requirement-list/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetDocumentRequirementList')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of document requirement lists for semi-product.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listDocumentRequirementListForSemiProductByMap(
    map: ListDocumentRequirementListForSemiProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainDocumentRequirementList>;
  public listDocumentRequirementListForSemiProductByMap(
    map: ListDocumentRequirementListForSemiProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainDocumentRequirementList>>;
  public listDocumentRequirementListForSemiProductByMap(
    map: ListDocumentRequirementListForSemiProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainDocumentRequirementList>>;
  public listDocumentRequirementListForSemiProductByMap(
    map: ListDocumentRequirementListForSemiProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listDocumentRequirementListForSemiProduct(
      map.semiProductId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of document requirement lists for semi-product.
     * @param semiProductId 
     * @param sort 
     * @param limit 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDocumentRequirementListForSemiProduct(semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainDocumentRequirementList>;
    public listDocumentRequirementListForSemiProduct(semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainDocumentRequirementList>>;
    public listDocumentRequirementListForSemiProduct(semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainDocumentRequirementList>>;
    public listDocumentRequirementListForSemiProduct(semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (semiProductId === null || semiProductId === undefined) {
            throw new Error('Required parameter semiProductId was null or undefined when calling listDocumentRequirementListForSemiProduct.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainDocumentRequirementList>(`${this.configuration.basePath}/chain-api/data/document-requirement-list/list/semi-product/${encodeURIComponent(String(semiProductId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListDocumentRequirementListForSemiProduct')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of document requrement lists.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listDocumentRequirementListsByMap(
    map: ListDocumentRequirementLists.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainDocumentRequirementList>;
  public listDocumentRequirementListsByMap(
    map: ListDocumentRequirementLists.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainDocumentRequirementList>>;
  public listDocumentRequirementListsByMap(
    map: ListDocumentRequirementLists.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainDocumentRequirementList>>;
  public listDocumentRequirementListsByMap(
    map: ListDocumentRequirementLists.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listDocumentRequirementLists(
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of document requrement lists.
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDocumentRequirementLists(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainDocumentRequirementList>;
    public listDocumentRequirementLists(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainDocumentRequirementList>>;
    public listDocumentRequirementLists(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainDocumentRequirementList>>;
    public listDocumentRequirementLists(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainDocumentRequirementList>(`${this.configuration.basePath}/chain-api/data/document-requirement-list/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListDocumentRequirementLists')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of document requirements.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listDocumentRequirementsByMap(
    map: ListDocumentRequirements.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainDocumentRequirement>;
  public listDocumentRequirementsByMap(
    map: ListDocumentRequirements.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainDocumentRequirement>>;
  public listDocumentRequirementsByMap(
    map: ListDocumentRequirements.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainDocumentRequirement>>;
  public listDocumentRequirementsByMap(
    map: ListDocumentRequirements.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listDocumentRequirements(
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of document requirements.
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listDocumentRequirements(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainDocumentRequirement>;
    public listDocumentRequirements(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainDocumentRequirement>>;
    public listDocumentRequirements(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainDocumentRequirement>>;
    public listDocumentRequirements(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainDocumentRequirement>(`${this.configuration.basePath}/chain-api/data/document-requirement/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListDocumentRequirements')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a document requirement. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postDocumentRequirementByMap(
    map: PostDocumentRequirement.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postDocumentRequirementByMap(
    map: PostDocumentRequirement.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postDocumentRequirementByMap(
    map: PostDocumentRequirement.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postDocumentRequirementByMap(
    map: PostDocumentRequirement.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postDocumentRequirement(
      map.ChainDocumentRequirement,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a document requirement. When inserting fields _id, _rev and docType should not be present.
     * @param ChainDocumentRequirement 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postDocumentRequirement(ChainDocumentRequirement: ChainDocumentRequirement, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainDocumentRequirement === null || ChainDocumentRequirement === undefined) {
            throw new Error('Required parameter ChainDocumentRequirement was null or undefined when calling postDocumentRequirement.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/document-requirement`,
            ChainDocumentRequirement,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostDocumentRequirement')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a document requirement. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postDocumentRequirementListByMap(
    map: PostDocumentRequirementList.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postDocumentRequirementListByMap(
    map: PostDocumentRequirementList.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postDocumentRequirementListByMap(
    map: PostDocumentRequirementList.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postDocumentRequirementListByMap(
    map: PostDocumentRequirementList.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postDocumentRequirementList(
      map.ChainDocumentRequirementList,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a document requirement. When inserting fields _id, _rev and docType should not be present.
     * @param ChainDocumentRequirementList 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postDocumentRequirementList(ChainDocumentRequirementList: ChainDocumentRequirementList, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainDocumentRequirementList === null || ChainDocumentRequirementList === undefined) {
            throw new Error('Required parameter ChainDocumentRequirementList was null or undefined when calling postDocumentRequirementList.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/document-requirement-list`,
            ChainDocumentRequirementList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostDocumentRequirementList')));
        }
        return handle;
    }

}
