/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainFacility } from '../model/apiResponseChainFacility';
import { ApiResponsePaginatedListChainFacility } from '../model/apiResponsePaginatedListChainFacility';
import { ChainFacility } from '../model/chainFacility';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for deleteFacility.
 */
export namespace DeleteFacility {
    /**
     * Parameter map for deleteFacility.
     */
    export interface PartialParamMap {
      ChainFacility: ChainFacility;
    }

    /**
     * Enumeration of all parameters for deleteFacility.
     */
    export enum Parameters {
      ChainFacility = 'ChainFacility'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteFacility
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteFacility.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getFacilityById.
 */
export namespace GetFacilityById {
    /**
     * Parameter map for getFacilityById.
     */
    export interface PartialParamMap {
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getFacilityById.
     */
    export enum Parameters {
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getFacilityById
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetFacilityById.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listFacilities.
 */
export namespace ListFacilities {
    /**
     * Parameter map for listFacilities.
     */
    export interface PartialParamMap {
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listFacilities.
     */
    export enum Parameters {
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listFacilities
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListFacilities.PartialParamMap]?: [string, ValidatorFn][]} = {
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listFacilitiesForOrganization.
 */
export namespace ListFacilitiesForOrganization {
    /**
     * Parameter map for listFacilitiesForOrganization.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      query?: string;
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listFacilitiesForOrganization.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      query = 'query',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listFacilitiesForOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListFacilitiesForOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      query: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listFacilitiesForOrganizationAndSemiProduct.
 */
export namespace ListFacilitiesForOrganizationAndSemiProduct {
    /**
     * Parameter map for listFacilitiesForOrganizationAndSemiProduct.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * _id of desired semi-product
       */
      semiProductId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listFacilitiesForOrganizationAndSemiProduct.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * _id of desired semi-product
       */
      semiProductId = 'semiProductId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listFacilitiesForOrganizationAndSemiProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListFacilitiesForOrganizationAndSemiProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      semiProductId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listOfCollectingFacilitiesForOrganization.
 */
export namespace ListOfCollectingFacilitiesForOrganization {
    /**
     * Parameter map for listOfCollectingFacilitiesForOrganization.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listOfCollectingFacilitiesForOrganization.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listOfCollectingFacilitiesForOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListOfCollectingFacilitiesForOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listSellingFacilitiesForOrganizationAndSemiProduct.
 */
export namespace ListSellingFacilitiesForOrganizationAndSemiProduct {
    /**
     * Parameter map for listSellingFacilitiesForOrganizationAndSemiProduct.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * _id of desired semi-product
       */
      semiProductId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: 'ASC' | 'DESC';
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listSellingFacilitiesForOrganizationAndSemiProduct.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * _id of desired semi-product
       */
      semiProductId = 'semiProductId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listSellingFacilitiesForOrganizationAndSemiProduct
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListSellingFacilitiesForOrganizationAndSemiProduct.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      semiProductId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postFacility.
 */
export namespace PostFacility {
    /**
     * Parameter map for postFacility.
     */
    export interface PartialParamMap {
      ChainFacility: ChainFacility;
    }

    /**
     * Enumeration of all parameters for postFacility.
     */
    export enum Parameters {
      ChainFacility = 'ChainFacility'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postFacility
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostFacility.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class FacilityService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Deletes facility.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteFacilityByMap(
    map: DeleteFacility.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteFacilityByMap(
    map: DeleteFacility.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteFacilityByMap(
    map: DeleteFacility.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteFacilityByMap(
    map: DeleteFacility.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteFacility(
      map.ChainFacility,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes facility.
     * @param ChainFacility 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteFacility(ChainFacility: ChainFacility, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteFacility(ChainFacility: ChainFacility, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteFacility(ChainFacility: ChainFacility, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteFacility(ChainFacility: ChainFacility, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainFacility === null || ChainFacility === undefined) {
            throw new Error('Required parameter ChainFacility was null or undefined when calling deleteFacility.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/facility/delete`,
            ChainFacility,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteFacility')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches a facility by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getFacilityByIdByMap(
    map: GetFacilityById.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainFacility>;
  public getFacilityByIdByMap(
    map: GetFacilityById.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainFacility>>;
  public getFacilityByIdByMap(
    map: GetFacilityById.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainFacility>>;
  public getFacilityByIdByMap(
    map: GetFacilityById.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getFacilityById(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches a facility by its _id.
     * @param dbId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getFacilityById(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainFacility>;
    public getFacilityById(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainFacility>>;
    public getFacilityById(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainFacility>>;
    public getFacilityById(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getFacilityById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainFacility>(`${this.configuration.basePath}/chain-api/data/facility/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetFacilityById')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of facilities.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listFacilitiesByMap(
    map: ListFacilities.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainFacility>;
  public listFacilitiesByMap(
    map: ListFacilities.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
  public listFacilitiesByMap(
    map: ListFacilities.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
  public listFacilitiesByMap(
    map: ListFacilities.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listFacilities(
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of facilities.
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFacilities(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainFacility>;
    public listFacilities(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
    public listFacilities(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
    public listFacilities(sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainFacility>(`${this.configuration.basePath}/chain-api/data/facility/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListFacilities')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of facilities for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listFacilitiesForOrganizationByMap(
    map: ListFacilitiesForOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainFacility>;
  public listFacilitiesForOrganizationByMap(
    map: ListFacilitiesForOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
  public listFacilitiesForOrganizationByMap(
    map: ListFacilitiesForOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
  public listFacilitiesForOrganizationByMap(
    map: ListFacilitiesForOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listFacilitiesForOrganization(
      map.organizationId,
      map.query,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of facilities for a given organization
     * @param organizationId _id of a given organization
     * @param query 
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFacilitiesForOrganization(organizationId: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainFacility>;
    public listFacilitiesForOrganization(organizationId: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
    public listFacilitiesForOrganization(organizationId: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
    public listFacilitiesForOrganization(organizationId: string, query?: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listFacilitiesForOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainFacility>(`${this.configuration.basePath}/chain-api/data/facility/list/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListFacilitiesForOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of facilities for a given organization and semiProductId
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listFacilitiesForOrganizationAndSemiProductByMap(
    map: ListFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainFacility>;
  public listFacilitiesForOrganizationAndSemiProductByMap(
    map: ListFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
  public listFacilitiesForOrganizationAndSemiProductByMap(
    map: ListFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
  public listFacilitiesForOrganizationAndSemiProductByMap(
    map: ListFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listFacilitiesForOrganizationAndSemiProduct(
      map.organizationId,
      map.semiProductId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of facilities for a given organization and semiProductId
     * @param organizationId _id of a given organization
     * @param semiProductId _id of desired semi-product
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainFacility>;
    public listFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
    public listFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
    public listFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listFacilitiesForOrganizationAndSemiProduct.');
        }
        if (semiProductId === null || semiProductId === undefined) {
            throw new Error('Required parameter semiProductId was null or undefined when calling listFacilitiesForOrganizationAndSemiProduct.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainFacility>(`${this.configuration.basePath}/chain-api/data/facility/list/organization/${encodeURIComponent(String(organizationId))}/semi-product/${encodeURIComponent(String(semiProductId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListFacilitiesForOrganizationAndSemiProduct')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of COLLECTING facilities for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listOfCollectingFacilitiesForOrganizationByMap(
    map: ListOfCollectingFacilitiesForOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainFacility>;
  public listOfCollectingFacilitiesForOrganizationByMap(
    map: ListOfCollectingFacilitiesForOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
  public listOfCollectingFacilitiesForOrganizationByMap(
    map: ListOfCollectingFacilitiesForOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
  public listOfCollectingFacilitiesForOrganizationByMap(
    map: ListOfCollectingFacilitiesForOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listOfCollectingFacilitiesForOrganization(
      map.organizationId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of COLLECTING facilities for a given organization
     * @param organizationId _id of a given organization
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listOfCollectingFacilitiesForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainFacility>;
    public listOfCollectingFacilitiesForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
    public listOfCollectingFacilitiesForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
    public listOfCollectingFacilitiesForOrganization(organizationId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listOfCollectingFacilitiesForOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainFacility>(`${this.configuration.basePath}/chain-api/data/facility/list/collecting/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListOfCollectingFacilitiesForOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of sellig facilities for a given organization and semiProductId
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listSellingFacilitiesForOrganizationAndSemiProductByMap(
    map: ListSellingFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainFacility>;
  public listSellingFacilitiesForOrganizationAndSemiProductByMap(
    map: ListSellingFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
  public listSellingFacilitiesForOrganizationAndSemiProductByMap(
    map: ListSellingFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
  public listSellingFacilitiesForOrganizationAndSemiProductByMap(
    map: ListSellingFacilitiesForOrganizationAndSemiProduct.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listSellingFacilitiesForOrganizationAndSemiProduct(
      map.organizationId,
      map.semiProductId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of sellig facilities for a given organization and semiProductId
     * @param organizationId _id of a given organization
     * @param semiProductId _id of desired semi-product
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSellingFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainFacility>;
    public listSellingFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainFacility>>;
    public listSellingFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainFacility>>;
    public listSellingFacilitiesForOrganizationAndSemiProduct(organizationId: string, semiProductId: string, sort?: 'ASC' | 'DESC', limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listSellingFacilitiesForOrganizationAndSemiProduct.');
        }
        if (semiProductId === null || semiProductId === undefined) {
            throw new Error('Required parameter semiProductId was null or undefined when calling listSellingFacilitiesForOrganizationAndSemiProduct.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainFacility>(`${this.configuration.basePath}/chain-api/data/facility/list/organization/${encodeURIComponent(String(organizationId))}/semi-product/${encodeURIComponent(String(semiProductId))}/selling`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListSellingFacilitiesForOrganizationAndSemiProduct')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a facility. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postFacilityByMap(
    map: PostFacility.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postFacilityByMap(
    map: PostFacility.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postFacilityByMap(
    map: PostFacility.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postFacilityByMap(
    map: PostFacility.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postFacility(
      map.ChainFacility,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a facility. When inserting fields _id, _rev and docType should not be present.
     * @param ChainFacility 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postFacility(ChainFacility: ChainFacility, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postFacility(ChainFacility: ChainFacility, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postFacility(ChainFacility: ChainFacility, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postFacility(ChainFacility: ChainFacility, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainFacility === null || ChainFacility === undefined) {
            throw new Error('Required parameter ChainFacility was null or undefined when calling postFacility.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/facility`,
            ChainFacility,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostFacility')));
        }
        return handle;
    }

}
