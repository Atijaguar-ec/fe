/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiResponseAny } from '../model/apiResponseAny';
import { ApiResponseChainUserCustomer } from '../model/apiResponseChainUserCustomer';
import { ApiResponseChainUserCustomerArray } from '../model/apiResponseChainUserCustomerArray';
import { ApiResponsePaginatedListChainPayment } from '../model/apiResponsePaginatedListChainPayment';
import { ApiResponsePaginatedListChainStockOrder } from '../model/apiResponsePaginatedListChainStockOrder';
import { ApiResponsePaginatedListChainUserCustomer } from '../model/apiResponsePaginatedListChainUserCustomer';
import { ChainUserCustomer } from '../model/chainUserCustomer';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for deleteUserCustomer.
 */
export namespace DeleteUserCustomer {
    /**
     * Parameter map for deleteUserCustomer.
     */
    export interface PartialParamMap {
      ChainUserCustomer: ChainUserCustomer;
    }

    /**
     * Enumeration of all parameters for deleteUserCustomer.
     */
    export enum Parameters {
      ChainUserCustomer = 'ChainUserCustomer'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of deleteUserCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof DeleteUserCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getUserCustomer.
 */
export namespace GetUserCustomer {
    /**
     * Parameter map for getUserCustomer.
     */
    export interface PartialParamMap {
      /**
       * database id of the product
       */
      dbId: string;
    }

    /**
     * Enumeration of all parameters for getUserCustomer.
     */
    export enum Parameters {
      /**
       * database id of the product
       */
      dbId = 'dbId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getUserCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetUserCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
      dbId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getUserCustomerByAFId.
 */
export namespace GetUserCustomerByAFId {
    /**
     * Parameter map for getUserCustomerByAFId.
     */
    export interface PartialParamMap {
      /**
       * external database product id
       */
      linkId: number;
    }

    /**
     * Enumeration of all parameters for getUserCustomerByAFId.
     */
    export enum Parameters {
      /**
       * external database product id
       */
      linkId = 'linkId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getUserCustomerByAFId
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetUserCustomerByAFId.PartialParamMap]?: [string, ValidatorFn][]} = {
      linkId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for listPaymentsorUserCustomer.
 */
export namespace ListPaymentsorUserCustomer {
    /**
     * Parameter map for listPaymentsorUserCustomer.
     */
    export interface PartialParamMap {
      userCustomerId: string;
      sort?: any;
      limit?: number;
      offset?: number;
      startDate?: string;
      endDate?: string;
    }

    /**
     * Enumeration of all parameters for listPaymentsorUserCustomer.
     */
    export enum Parameters {
      userCustomerId = 'userCustomerId',
      sort = 'sort',
      limit = 'limit',
      offset = 'offset',
      startDate = 'startDate',
      endDate = 'endDate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listPaymentsorUserCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListPaymentsorUserCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
      userCustomerId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
      startDate: [
      ],
      endDate: [
      ],
    };
}

/**
 * Namespace for listStockOrdersForUserCustomer.
 */
export namespace ListStockOrdersForUserCustomer {
    /**
     * Parameter map for listStockOrdersForUserCustomer.
     */
    export interface PartialParamMap {
      userCustomerId: string;
      sort?: any;
      limit?: number;
      offset?: number;
      startDate?: string;
      endDate?: string;
    }

    /**
     * Enumeration of all parameters for listStockOrdersForUserCustomer.
     */
    export enum Parameters {
      userCustomerId = 'userCustomerId',
      sort = 'sort',
      limit = 'limit',
      offset = 'offset',
      startDate = 'startDate',
      endDate = 'endDate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listStockOrdersForUserCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListStockOrdersForUserCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
      userCustomerId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
      startDate: [
      ],
      endDate: [
      ],
    };
}

/**
 * Namespace for listUserCustomers.
 */
export namespace ListUserCustomers {
    /**
     * Parameter map for listUserCustomers.
     */
    export interface PartialParamMap {
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listUserCustomers.
     */
    export enum Parameters {
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUserCustomers
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUserCustomers.PartialParamMap]?: [string, ValidatorFn][]} = {
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listUserCustomersByRole.
 */
export namespace ListUserCustomersByRole {
    /**
     * Parameter map for listUserCustomersByRole.
     */
    export interface PartialParamMap {
      /**
       * desire role (FARMER or COLLECTOR)
       */
      role: string;
      /**
       * query by name
       */
      query?: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listUserCustomersByRole.
     */
    export enum Parameters {
      /**
       * desire role (FARMER or COLLECTOR)
       */
      role = 'role',
      /**
       * query by name
       */
      query = 'query',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUserCustomersByRole
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUserCustomersByRole.PartialParamMap]?: [string, ValidatorFn][]} = {
      role: [
              ['required', Validators.required],
      ],
      query: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listUserCustomersForOrganization.
 */
export namespace ListUserCustomersForOrganization {
    /**
     * Parameter map for listUserCustomersForOrganization.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * query by name
       */
      query?: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listUserCustomersForOrganization.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * query by name
       */
      query = 'query',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUserCustomersForOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUserCustomersForOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      query: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listUserCustomersForOrganizationAndRole.
 */
export namespace ListUserCustomersForOrganizationAndRole {
    /**
     * Parameter map for listUserCustomersForOrganizationAndRole.
     */
    export interface PartialParamMap {
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * desired user customer role (FARMER or COLLECTOR)
       */
      role: string;
      /**
       * query by name
       */
      query?: string;
      queryBy?: any;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listUserCustomersForOrganizationAndRole.
     */
    export enum Parameters {
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * desired user customer role (FARMER or COLLECTOR)
       */
      role = 'role',
      /**
       * query by name
       */
      query = 'query',
      queryBy = 'queryBy',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUserCustomersForOrganizationAndRole
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUserCustomersForOrganizationAndRole.PartialParamMap]?: [string, ValidatorFn][]} = {
      organizationId: [
              ['required', Validators.required],
      ],
      role: [
              ['required', Validators.required],
      ],
      query: [
      ],
      queryBy: [
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for listUserCustomersForProductAndOrganization.
 */
export namespace ListUserCustomersForProductAndOrganization {
    /**
     * Parameter map for listUserCustomersForProductAndOrganization.
     */
    export interface PartialParamMap {
      productId: string;
      /**
       * _id of a given organization
       */
      organizationId: string;
      /**
       * sort order ASC or DESC
       */
      sort?: any;
      /**
       * query limit
       */
      limit?: number;
      /**
       * query offset
       */
      offset?: number;
    }

    /**
     * Enumeration of all parameters for listUserCustomersForProductAndOrganization.
     */
    export enum Parameters {
      productId = 'productId',
      /**
       * _id of a given organization
       */
      organizationId = 'organizationId',
      /**
       * sort order ASC or DESC
       */
      sort = 'sort',
      /**
       * query limit
       */
      limit = 'limit',
      /**
       * query offset
       */
      offset = 'offset'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUserCustomersForProductAndOrganization
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUserCustomersForProductAndOrganization.PartialParamMap]?: [string, ValidatorFn][]} = {
      productId: [
              ['required', Validators.required],
      ],
      organizationId: [
              ['required', Validators.required],
      ],
      sort: [
      ],
      limit: [
      ],
      offset: [
      ],
    };
}

/**
 * Namespace for postUserCustomer.
 */
export namespace PostUserCustomer {
    /**
     * Parameter map for postUserCustomer.
     */
    export interface PartialParamMap {
      ChainUserCustomer: ChainUserCustomer;
    }

    /**
     * Enumeration of all parameters for postUserCustomer.
     */
    export enum Parameters {
      ChainUserCustomer = 'ChainUserCustomer'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of postUserCustomer
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof PostUserCustomer.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for userCustomersForIds.
 */
export namespace UserCustomersForIds {
    /**
     * Parameter map for userCustomersForIds.
     */
    export interface PartialParamMap {
      /**
       * list of external ids
       */
      request_body: Array<number>;
    }

    /**
     * Enumeration of all parameters for userCustomersForIds.
     */
    export enum Parameters {
      /**
       * list of external ids
       */
      request_body = 'request_body'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of userCustomersForIds
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UserCustomersForIds.PartialParamMap]?: [string, ValidatorFn][]} = {
      request_body: [
              ['required', Validators.required],
      ],
    };
}



@Injectable({
  providedIn: 'root'
})
export class UserCustomerService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * Deletes user custoemr
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteUserCustomerByMap(
    map: DeleteUserCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public deleteUserCustomerByMap(
    map: DeleteUserCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public deleteUserCustomerByMap(
    map: DeleteUserCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public deleteUserCustomerByMap(
    map: DeleteUserCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.deleteUserCustomer(
      map.ChainUserCustomer,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Deletes user custoemr
     * @param ChainUserCustomer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUserCustomer(ChainUserCustomer: ChainUserCustomer, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public deleteUserCustomer(ChainUserCustomer: ChainUserCustomer, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public deleteUserCustomer(ChainUserCustomer: ChainUserCustomer, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public deleteUserCustomer(ChainUserCustomer: ChainUserCustomer, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainUserCustomer === null || ChainUserCustomer === undefined) {
            throw new Error('Required parameter ChainUserCustomer was null or undefined when calling deleteUserCustomer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/user-customer/delete`,
            ChainUserCustomer,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'DeleteUserCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Fetches user customer by its _id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUserCustomerByMap(
    map: GetUserCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainUserCustomer>;
  public getUserCustomerByMap(
    map: GetUserCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainUserCustomer>>;
  public getUserCustomerByMap(
    map: GetUserCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainUserCustomer>>;
  public getUserCustomerByMap(
    map: GetUserCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getUserCustomer(
      map.dbId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Fetches user customer by its _id.
     * @param dbId database id of the product
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserCustomer(dbId: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainUserCustomer>;
    public getUserCustomer(dbId: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainUserCustomer>>;
    public getUserCustomer(dbId: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainUserCustomer>>;
    public getUserCustomer(dbId: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (dbId === null || dbId === undefined) {
            throw new Error('Required parameter dbId was null or undefined when calling getUserCustomer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/${encodeURIComponent(String(dbId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetUserCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Returns user customer according to external database id.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUserCustomerByAFIdByMap(
    map: GetUserCustomerByAFId.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainUserCustomer>;
  public getUserCustomerByAFIdByMap(
    map: GetUserCustomerByAFId.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainUserCustomer>>;
  public getUserCustomerByAFIdByMap(
    map: GetUserCustomerByAFId.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainUserCustomer>>;
  public getUserCustomerByAFIdByMap(
    map: GetUserCustomerByAFId.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getUserCustomerByAFId(
      map.linkId,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns user customer according to external database id.
     * @param linkId external database product id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserCustomerByAFId(linkId: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainUserCustomer>;
    public getUserCustomerByAFId(linkId: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainUserCustomer>>;
    public getUserCustomerByAFId(linkId: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainUserCustomer>>;
    public getUserCustomerByAFId(linkId: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (linkId === null || linkId === undefined) {
            throw new Error('Required parameter linkId was null or undefined when calling getUserCustomerByAFId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/external/${encodeURIComponent(String(linkId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'GetUserCustomerByAFId')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of payments for a given user customer
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listPaymentsorUserCustomerByMap(
    map: ListPaymentsorUserCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainPayment>;
  public listPaymentsorUserCustomerByMap(
    map: ListPaymentsorUserCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsorUserCustomerByMap(
    map: ListPaymentsorUserCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
  public listPaymentsorUserCustomerByMap(
    map: ListPaymentsorUserCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listPaymentsorUserCustomer(
      map.userCustomerId,
      map.sort,
      map.limit,
      map.offset,
      map.startDate,
      map.endDate,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of payments for a given user customer
     * @param userCustomerId 
     * @param sort 
     * @param limit 
     * @param offset 
     * @param startDate 
     * @param endDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPaymentsorUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainPayment>;
    public listPaymentsorUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsorUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainPayment>>;
    public listPaymentsorUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (userCustomerId === null || userCustomerId === undefined) {
            throw new Error('Required parameter userCustomerId was null or undefined when calling listPaymentsorUserCustomer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainPayment>(`${this.configuration.basePath}/chain-api/data/user-customer/list/payments/${encodeURIComponent(String(userCustomerId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListPaymentsorUserCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of purchase orders (stock ordrs) for a given user customer
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listStockOrdersForUserCustomerByMap(
    map: ListStockOrdersForUserCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainStockOrder>;
  public listStockOrdersForUserCustomerByMap(
    map: ListStockOrdersForUserCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainStockOrder>>;
  public listStockOrdersForUserCustomerByMap(
    map: ListStockOrdersForUserCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainStockOrder>>;
  public listStockOrdersForUserCustomerByMap(
    map: ListStockOrdersForUserCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listStockOrdersForUserCustomer(
      map.userCustomerId,
      map.sort,
      map.limit,
      map.offset,
      map.startDate,
      map.endDate,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of purchase orders (stock ordrs) for a given user customer
     * @param userCustomerId 
     * @param sort 
     * @param limit 
     * @param offset 
     * @param startDate 
     * @param endDate 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listStockOrdersForUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainStockOrder>;
    public listStockOrdersForUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainStockOrder>>;
    public listStockOrdersForUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainStockOrder>>;
    public listStockOrdersForUserCustomer(userCustomerId: string, sort?: any, limit?: number, offset?: number, startDate?: string, endDate?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (userCustomerId === null || userCustomerId === undefined) {
            throw new Error('Required parameter userCustomerId was null or undefined when calling listStockOrdersForUserCustomer.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (startDate !== undefined && startDate !== null) {
            queryParameters = queryParameters.set('startDate', <any>startDate);
        }
        if (endDate !== undefined && endDate !== null) {
            queryParameters = queryParameters.set('endDate', <any>endDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainStockOrder>(`${this.configuration.basePath}/chain-api/data/user-customer/list/stock-orders/${encodeURIComponent(String(userCustomerId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListStockOrdersForUserCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of user customer.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUserCustomersByMap(
    map: ListUserCustomers.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainUserCustomer>;
  public listUserCustomersByMap(
    map: ListUserCustomers.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersByMap(
    map: ListUserCustomers.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersByMap(
    map: ListUserCustomers.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUserCustomers(
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of user customer.
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUserCustomers(sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainUserCustomer>;
    public listUserCustomers(sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomers(sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomers(sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListUserCustomers')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of user customers for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUserCustomersByRoleByMap(
    map: ListUserCustomersByRole.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainUserCustomer>;
  public listUserCustomersByRoleByMap(
    map: ListUserCustomersByRole.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersByRoleByMap(
    map: ListUserCustomersByRole.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersByRoleByMap(
    map: ListUserCustomersByRole.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUserCustomersByRole(
      map.role,
      map.query,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of user customers for a given organization
     * @param role desire role (FARMER or COLLECTOR)
     * @param query query by name
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUserCustomersByRole(role: string, query?: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainUserCustomer>;
    public listUserCustomersByRole(role: string, query?: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersByRole(role: string, query?: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersByRole(role: string, query?: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling listUserCustomersByRole.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/list/role/${encodeURIComponent(String(role))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListUserCustomersByRole')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of user customers for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUserCustomersForOrganizationByMap(
    map: ListUserCustomersForOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainUserCustomer>;
  public listUserCustomersForOrganizationByMap(
    map: ListUserCustomersForOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersForOrganizationByMap(
    map: ListUserCustomersForOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersForOrganizationByMap(
    map: ListUserCustomersForOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUserCustomersForOrganization(
      map.organizationId,
      map.query,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of user customers for a given organization
     * @param organizationId _id of a given organization
     * @param query query by name
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUserCustomersForOrganization(organizationId: string, query?: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainUserCustomer>;
    public listUserCustomersForOrganization(organizationId: string, query?: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersForOrganization(organizationId: string, query?: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersForOrganization(organizationId: string, query?: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listUserCustomersForOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/list/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListUserCustomersForOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of user customers for a given organization and role
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUserCustomersForOrganizationAndRoleByMap(
    map: ListUserCustomersForOrganizationAndRole.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainUserCustomer>;
  public listUserCustomersForOrganizationAndRoleByMap(
    map: ListUserCustomersForOrganizationAndRole.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersForOrganizationAndRoleByMap(
    map: ListUserCustomersForOrganizationAndRole.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersForOrganizationAndRoleByMap(
    map: ListUserCustomersForOrganizationAndRole.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUserCustomersForOrganizationAndRole(
      map.organizationId,
      map.role,
      map.query,
      map.queryBy,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of user customers for a given organization and role
     * @param organizationId _id of a given organization
     * @param role desired user customer role (FARMER or COLLECTOR)
     * @param query query by name
     * @param queryBy 
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUserCustomersForOrganizationAndRole(organizationId: string, role: string, query?: string, queryBy?: any, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainUserCustomer>;
    public listUserCustomersForOrganizationAndRole(organizationId: string, role: string, query?: string, queryBy?: any, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersForOrganizationAndRole(organizationId: string, role: string, query?: string, queryBy?: any, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersForOrganizationAndRole(organizationId: string, role: string, query?: string, queryBy?: any, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listUserCustomersForOrganizationAndRole.');
        }
        if (role === null || role === undefined) {
            throw new Error('Required parameter role was null or undefined when calling listUserCustomersForOrganizationAndRole.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (queryBy !== undefined && queryBy !== null) {
            queryParameters = queryParameters.set('queryBy', <any>queryBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/list/organization/${encodeURIComponent(String(organizationId))}/role/${encodeURIComponent(String(role))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListUserCustomersForOrganizationAndRole')));
        }
        return handle;
    }


  /**
   *  by map.
   * Paginated list of user customers for a given organization
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUserCustomersForProductAndOrganizationByMap(
    map: ListUserCustomersForProductAndOrganization.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponsePaginatedListChainUserCustomer>;
  public listUserCustomersForProductAndOrganizationByMap(
    map: ListUserCustomersForProductAndOrganization.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersForProductAndOrganizationByMap(
    map: ListUserCustomersForProductAndOrganization.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
  public listUserCustomersForProductAndOrganizationByMap(
    map: ListUserCustomersForProductAndOrganization.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUserCustomersForProductAndOrganization(
      map.productId,
      map.organizationId,
      map.sort,
      map.limit,
      map.offset,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Paginated list of user customers for a given organization
     * @param productId 
     * @param organizationId _id of a given organization
     * @param sort sort order ASC or DESC
     * @param limit query limit
     * @param offset query offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUserCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponsePaginatedListChainUserCustomer>;
    public listUserCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponsePaginatedListChainUserCustomer>>;
    public listUserCustomersForProductAndOrganization(productId: string, organizationId: string, sort?: any, limit?: number, offset?: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling listUserCustomersForProductAndOrganization.');
        }
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling listUserCustomersForProductAndOrganization.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponsePaginatedListChainUserCustomer>(`${this.configuration.basePath}/chain-api/data/user-customer/list/product/${encodeURIComponent(String(productId))}/organization/${encodeURIComponent(String(organizationId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'ListUserCustomersForProductAndOrganization')));
        }
        return handle;
    }


  /**
   *  by map.
   * Inserts or updates a user customer. When inserting fields _id, _rev and docType should not be present.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postUserCustomerByMap(
    map: PostUserCustomer.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseAny>;
  public postUserCustomerByMap(
    map: PostUserCustomer.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseAny>>;
  public postUserCustomerByMap(
    map: PostUserCustomer.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseAny>>;
  public postUserCustomerByMap(
    map: PostUserCustomer.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.postUserCustomer(
      map.ChainUserCustomer,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Inserts or updates a user customer. When inserting fields _id, _rev and docType should not be present.
     * @param ChainUserCustomer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postUserCustomer(ChainUserCustomer: ChainUserCustomer, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseAny>;
    public postUserCustomer(ChainUserCustomer: ChainUserCustomer, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseAny>>;
    public postUserCustomer(ChainUserCustomer: ChainUserCustomer, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseAny>>;
    public postUserCustomer(ChainUserCustomer: ChainUserCustomer, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ChainUserCustomer === null || ChainUserCustomer === undefined) {
            throw new Error('Required parameter ChainUserCustomer was null or undefined when calling postUserCustomer.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseAny>(`${this.configuration.basePath}/chain-api/data/user-customer`,
            ChainUserCustomer,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'PostUserCustomer')));
        }
        return handle;
    }


  /**
   *  by map.
   * Returns a list of user customers matching to the list of external ids. Warning: Id lists and response list do not necessary match in length. if invalid external id is provided in the request&#39;s list the response list is shorter.
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public userCustomersForIdsByMap(
    map: UserCustomersForIds.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseChainUserCustomerArray>;
  public userCustomersForIdsByMap(
    map: UserCustomersForIds.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseChainUserCustomerArray>>;
  public userCustomersForIdsByMap(
    map: UserCustomersForIds.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseChainUserCustomerArray>>;
  public userCustomersForIdsByMap(
    map: UserCustomersForIds.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.userCustomersForIds(
      map.request_body,
      observe,
      reportProgress
    );
  }


    /**
     * 
     * Returns a list of user customers matching to the list of external ids. Warning: Id lists and response list do not necessary match in length. if invalid external id is provided in the request&#39;s list the response list is shorter.
     * @param request_body list of external ids
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public userCustomersForIds(request_body: Array<number>, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseChainUserCustomerArray>;
    public userCustomersForIds(request_body: Array<number>, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseChainUserCustomerArray>>;
    public userCustomersForIds(request_body: Array<number>, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseChainUserCustomerArray>>;
    public userCustomersForIds(request_body: Array<number>, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (request_body === null || request_body === undefined) {
            throw new Error('Required parameter request_body was null or undefined when calling userCustomersForIds.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseChainUserCustomerArray>(`${this.configuration.basePath}/chain-api/data/user-customer/external/list`,
            request_body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'UserCustomersForIds')));
        }
        return handle;
    }

}
