/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * coffee-be
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */


import { ChainFacility } from './chainFacility';
import { ChainMeasureUnitType } from './chainMeasureUnitType';
import { ChainProcessingAction } from './chainProcessingAction';
import { ChainStockOrder } from './chainStockOrder';
import { ChainTransaction } from './chainTransaction';


/**
 * Processing order executed according to processing transaction.
 */

export interface ChainProcessingOrder { 
    docType?: string;
    _id?: string;
    _rev?: string;
    dbKey?: string;
    mode__?: ChainProcessingOrder.ModeEnum;
    /**
     * Timestamp of creation
     */
    created?: string;
    /**
     * Timestamp of last change
     */
    lastChange?: string;
    /**
     * Id of user that created the document.
     */
    userCreatedId?: string;
    /**
     * Id of user that changed the document.
     */
    userChangedId?: string;
    /**
     * Facility id. Not clear, how to put this into facility.
     */
    facilityId?: string;
    /**
     * Processing action id.
     */
    processingActionId: string;
    /**
     * Processing order initiator (user), userId from af-coffee-ap
     */
    initiatorUserId: string;
    /**
     * Target stock order Ids. Calculated when saving. Should not be counted as a reference when programing chaincode since the primary reference is from targert order back.
     */
    targetStockOrderIds?: Array<string>;
    /**
     * Desired quantity when it acts like an order (processing action type is TRANSFER.
     */
    desiredQuantity?: number;
    desiredQuantityUnit?: ChainMeasureUnitType;
    facility?: ChainFacility;
    /**
     * Target stock orders. Read only.
     */
    targetStockOrders?: Array<ChainStockOrder>;
    /**
     * Input transactions. Read only.
     */
    inputTransactions?: Array<ChainTransaction>;
    processingAction?: ChainProcessingAction;
    /**
     * Input stock orders. Read only
     */
    inputOrders?: Array<ChainStockOrder>;
    /**
     * Processing date
     */
    processingDate?: string;
}

/**
 * Namespace for property- and property-value-enumerations of ChainProcessingOrder.
 */
export namespace ChainProcessingOrder {
    /**
     * All properties of ChainProcessingOrder.
     */
    export enum Properties {
        docType = 'docType',
        _id = '_id',
        _rev = '_rev',
        dbKey = 'dbKey',
        mode__ = 'mode__',
        /**
         * Timestamp of creation
         */
        created = 'created',
        /**
         * Timestamp of last change
         */
        lastChange = 'lastChange',
        /**
         * Id of user that created the document.
         */
        userCreatedId = 'userCreatedId',
        /**
         * Id of user that changed the document.
         */
        userChangedId = 'userChangedId',
        /**
         * Facility id. Not clear, how to put this into facility.
         */
        facilityId = 'facilityId',
        /**
         * Processing action id.
         */
        processingActionId = 'processingActionId',
        /**
         * Processing order initiator (user), userId from af-coffee-ap
         */
        initiatorUserId = 'initiatorUserId',
        /**
         * Target stock order Ids. Calculated when saving. Should not be counted as a reference when programing chaincode since the primary reference is from targert order back.
         */
        targetStockOrderIds = 'targetStockOrderIds',
        /**
         * Desired quantity when it acts like an order (processing action type is TRANSFER.
         */
        desiredQuantity = 'desiredQuantity',
        desiredQuantityUnit = 'desiredQuantityUnit',
        facility = 'facility',
        /**
         * Target stock orders. Read only.
         */
        targetStockOrders = 'targetStockOrders',
        /**
         * Input transactions. Read only.
         */
        inputTransactions = 'inputTransactions',
        processingAction = 'processingAction',
        /**
         * Input stock orders. Read only
         */
        inputOrders = 'inputOrders',
        /**
         * Processing date
         */
        processingDate = 'processingDate'
    }

    /**
     * All possible values of mode__.
     */
    export enum ModeEnum {
        Insert = 'insert',
        InsertAsIs = 'insert_as_is',
        Update = 'update'
    }


    export function formMetadata() {
        return  {
            metadata: formMetadata,
            classname: 'ChainProcessingOrder',
            vars: [
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'docType',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: '_id',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: '_rev',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'dbKey',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: true,
                    datatypeWithEnum: 'ChainProcessingOrder.ModeEnum',
                    required: false,
                    name: 'mode__',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'created',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'lastChange',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'userCreatedId',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'userChangedId',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'facilityId',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: true,
                    name: 'processingActionId',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: true,
                    name: 'initiatorUserId',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'targetStockOrderIds',
                    classname: 'ChainProcessingOrder',
                    dataType: 'Array&lt;string&gt;',
                    isPrimitiveType: true,
                    isListContainer: true,
                    complexType: ''
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'desiredQuantity',
                    classname: 'ChainProcessingOrder',
                    dataType: 'number',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
                {
                    metadata: ChainMeasureUnitType.formMetadata,
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'desiredQuantityUnit',
                    classname: 'ChainProcessingOrder',
                    dataType: 'ChainMeasureUnitType',
                    isPrimitiveType: false,
                    isListContainer: false,
                    complexType: 'ChainMeasureUnitType'
                },
                {
                    metadata: ChainFacility.formMetadata,
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'facility',
                    classname: 'ChainProcessingOrder',
                    dataType: 'ChainFacility',
                    isPrimitiveType: false,
                    isListContainer: false,
                    complexType: 'ChainFacility'
                },
                {
                    metadata: ChainStockOrder.formMetadata,
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'targetStockOrders',
                    classname: 'ChainProcessingOrder',
                    dataType: 'Array&lt;ChainStockOrder&gt;',
                    isPrimitiveType: false,
                    isListContainer: true,
                    complexType: 'ChainStockOrder'
                },
                {
                    metadata: ChainTransaction.formMetadata,
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'inputTransactions',
                    classname: 'ChainProcessingOrder',
                    dataType: 'Array&lt;ChainTransaction&gt;',
                    isPrimitiveType: false,
                    isListContainer: true,
                    complexType: 'ChainTransaction'
                },
                {
                    metadata: ChainProcessingAction.formMetadata,
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'processingAction',
                    classname: 'ChainProcessingOrder',
                    dataType: 'ChainProcessingAction',
                    isPrimitiveType: false,
                    isListContainer: false,
                    complexType: 'ChainProcessingAction'
                },
                {
                    metadata: ChainStockOrder.formMetadata,
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'inputOrders',
                    classname: 'ChainProcessingOrder',
                    dataType: 'Array&lt;ChainStockOrder&gt;',
                    isPrimitiveType: false,
                    isListContainer: true,
                    complexType: 'ChainStockOrder'
                },
                {
                    isReadOnly: false,
                    isEnum: false,
                    required: false,
                    name: 'processingDate',
                    classname: 'ChainProcessingOrder',
                    dataType: 'string',
                    isPrimitiveType: true,
                    isListContainer: false,
                    complexType: ''
                },
            ],
            validators: {
                docType: [
                ],
                _id: [
                ],
                _rev: [
                ],
                dbKey: [
                ],
                mode__: [
                ],
                created: [
                ],
                lastChange: [
                ],
                userCreatedId: [
                ],
                userChangedId: [
                ],
                facilityId: [
                ],
                processingActionId: [
                        ['required'],
                ],
                initiatorUserId: [
                        ['required'],
                ],
                targetStockOrderIds: [
                ],
                desiredQuantity: [
                ],
                desiredQuantityUnit: [
                ],
                facility: [
                ],
                targetStockOrders: [
                ],
                inputTransactions: [
                ],
                processingAction: [
                ],
                inputOrders: [
                ],
                processingDate: [
                ],
            }
        }
    }

  // export const ChainProcessingOrderValidationScheme = {
  //     validators: [],
  //     fields: {
  //               docType: {
  //                   validators: []
  //               },
  //               _id: {
  //                   validators: []
  //               },
  //               _rev: {
  //                   validators: []
  //               },
  //               dbKey: {
  //                   validators: []
  //               },
  //               mode__: {
  //                   validators: []
  //               },
  //               created: {
  //                   validators: []
  //               },
  //               lastChange: {
  //                   validators: []
  //               },
  //               userCreatedId: {
  //                   validators: []
  //               },
  //               userChangedId: {
  //                   validators: []
  //               },
  //               facilityId: {
  //                   validators: []
  //               },
  //               processingActionId: {
  //                   validators: []
  //               },
  //               initiatorUserId: {
  //                   validators: []
  //               },
  //               targetStockOrderIds: {
  //                   validators: []
  //               },
  //               desiredQuantity: {
  //                   validators: []
  //               },
  //               desiredQuantityUnit: {
  //                   validators: []
  //               },
  //               facility: {
  //                   validators: []
  //               },
  //               targetStockOrders: {
  //                   validators: []
  //               },
  //               inputTransactions: {
  //                   validators: []
  //               },
  //               processingAction: {
  //                   validators: []
  //               },
  //               inputOrders: {
  //                   validators: []
  //               },
  //               processingDate: {
  //                   validators: []
  //               },
  //     }
  // } as SimpleValidationScheme<ChainProcessingOrder>;


}


