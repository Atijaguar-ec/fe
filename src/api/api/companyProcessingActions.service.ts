/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * INATrace Services API
 * INATrace Services API OpenAPI documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiCompanyProcessingAction } from '../model/apiCompanyProcessingAction';
import { ApiDefaultResponse } from '../model/apiDefaultResponse';
import { ApiPaginatedList } from '../model/apiPaginatedList';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for getAllProcessingActionConfigurations.
 */
export namespace GetAllProcessingActionConfigurations {
    /**
     * Parameter map for getAllProcessingActionConfigurations.
     */
    export interface PartialParamMap {
      /**
       * Company ID
       */
      companyId: number;
      /**
       * Language for translations
       */
      language?: 'EN' | 'DE' | 'RW' | 'ES';
    }

    /**
     * Enumeration of all parameters for getAllProcessingActionConfigurations.
     */
    export enum Parameters {
      /**
       * Company ID
       */
      companyId = 'companyId',
      /**
       * Language for translations
       */
      language = 'language'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getAllProcessingActionConfigurations
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetAllProcessingActionConfigurations.PartialParamMap]?: [string, ValidatorFn][]} = {
      companyId: [
              ['required', Validators.required],
      ],
      language: [
      ],
    };
}

/**
 * Namespace for getEnabledProcessingActions.
 */
export namespace GetEnabledProcessingActions {
    /**
     * Parameter map for getEnabledProcessingActions.
     */
    export interface PartialParamMap {
      /**
       * Company ID
       */
      companyId: number;
      /**
       * Language for translations
       */
      language?: 'EN' | 'DE' | 'RW' | 'ES';
    }

    /**
     * Enumeration of all parameters for getEnabledProcessingActions.
     */
    export enum Parameters {
      /**
       * Company ID
       */
      companyId = 'companyId',
      /**
       * Language for translations
       */
      language = 'language'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getEnabledProcessingActions
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetEnabledProcessingActions.PartialParamMap]?: [string, ValidatorFn][]} = {
      companyId: [
              ['required', Validators.required],
      ],
      language: [
      ],
    };
}

/**
 * Namespace for initializeCompanyProcessingActions.
 */
export namespace InitializeCompanyProcessingActions {
    /**
     * Parameter map for initializeCompanyProcessingActions.
     */
    export interface PartialParamMap {
      /**
       * Company ID
       */
      companyId: number;
    }

    /**
     * Enumeration of all parameters for initializeCompanyProcessingActions.
     */
    export enum Parameters {
      /**
       * Company ID
       */
      companyId = 'companyId'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of initializeCompanyProcessingActions
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof InitializeCompanyProcessingActions.PartialParamMap]?: [string, ValidatorFn][]} = {
      companyId: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for updateCompanyProcessingAction.
 */
export namespace UpdateCompanyProcessingAction {
    /**
     * Parameter map for updateCompanyProcessingAction.
     */
    export interface PartialParamMap {
      /**
       * Company ID
       */
      companyId: number;
      /**
       * Processing Action ID
       */
      processingActionId: number;
      ApiCompanyProcessingAction: ApiCompanyProcessingAction;
      /**
       * Language for translations
       */
      language?: 'EN' | 'DE' | 'RW' | 'ES';
    }

    /**
     * Enumeration of all parameters for updateCompanyProcessingAction.
     */
    export enum Parameters {
      /**
       * Company ID
       */
      companyId = 'companyId',
      /**
       * Processing Action ID
       */
      processingActionId = 'processingActionId',
      ApiCompanyProcessingAction = 'ApiCompanyProcessingAction',
      /**
       * Language for translations
       */
      language = 'language'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of updateCompanyProcessingAction
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UpdateCompanyProcessingAction.PartialParamMap]?: [string, ValidatorFn][]} = {
      companyId: [
              ['required', Validators.required],
      ],
      processingActionId: [
              ['required', Validators.required],
      ],
      language: [
      ],
    };
}



@Injectable({
  providedIn: 'root'
})
export class CompanyProcessingActionsService {

    protected basePath = 'http://5.161.183.137:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   * Get all processing action configurations for company by map.
   * Returns all processing action configurations (enabled and disabled) for management UI
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getAllProcessingActionConfigurationsByMap(
    map: GetAllProcessingActionConfigurations.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedList>;
  public getAllProcessingActionConfigurationsByMap(
    map: GetAllProcessingActionConfigurations.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedList>>;
  public getAllProcessingActionConfigurationsByMap(
    map: GetAllProcessingActionConfigurations.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedList>>;
  public getAllProcessingActionConfigurationsByMap(
    map: GetAllProcessingActionConfigurations.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getAllProcessingActionConfigurations(
      map.companyId,
      map.language,
      observe,
      reportProgress
    );
  }


    /**
     * Get all processing action configurations for company
     * Returns all processing action configurations (enabled and disabled) for management UI
     * @param companyId Company ID
     * @param language Language for translations
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProcessingActionConfigurations(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedList>;
    public getAllProcessingActionConfigurations(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedList>>;
    public getAllProcessingActionConfigurations(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedList>>;
    public getAllProcessingActionConfigurations(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (companyId === null || companyId === undefined) {
            throw new Error('Required parameter companyId was null or undefined when calling getAllProcessingActionConfigurations.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedList>(`${this.configuration.basePath}/api/api/company/${encodeURIComponent(String(companyId))}/processing-actions/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getAllProcessingActionConfigurations')));
        }
        return handle;
    }


  /**
   * Get enabled processing actions for company by map.
   * Returns list of processing actions enabled for the company, ordered by effective order
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getEnabledProcessingActionsByMap(
    map: GetEnabledProcessingActions.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedList>;
  public getEnabledProcessingActionsByMap(
    map: GetEnabledProcessingActions.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedList>>;
  public getEnabledProcessingActionsByMap(
    map: GetEnabledProcessingActions.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedList>>;
  public getEnabledProcessingActionsByMap(
    map: GetEnabledProcessingActions.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getEnabledProcessingActions(
      map.companyId,
      map.language,
      observe,
      reportProgress
    );
  }


    /**
     * Get enabled processing actions for company
     * Returns list of processing actions enabled for the company, ordered by effective order
     * @param companyId Company ID
     * @param language Language for translations
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEnabledProcessingActions(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedList>;
    public getEnabledProcessingActions(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedList>>;
    public getEnabledProcessingActions(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedList>>;
    public getEnabledProcessingActions(companyId: number, language?: 'EN' | 'DE' | 'RW' | 'ES', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (companyId === null || companyId === undefined) {
            throw new Error('Required parameter companyId was null or undefined when calling getEnabledProcessingActions.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedList>(`${this.configuration.basePath}/api/api/company/${encodeURIComponent(String(companyId))}/processing-actions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getEnabledProcessingActions')));
        }
        return handle;
    }


  /**
   * Initialize processing actions for company by map.
   * Creates default configurations for all processing actions for a new company
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public initializeCompanyProcessingActionsByMap(
    map: InitializeCompanyProcessingActions.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public initializeCompanyProcessingActionsByMap(
    map: InitializeCompanyProcessingActions.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public initializeCompanyProcessingActionsByMap(
    map: InitializeCompanyProcessingActions.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public initializeCompanyProcessingActionsByMap(
    map: InitializeCompanyProcessingActions.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.initializeCompanyProcessingActions(
      map.companyId,
      observe,
      reportProgress
    );
  }


    /**
     * Initialize processing actions for company
     * Creates default configurations for all processing actions for a new company
     * @param companyId Company ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public initializeCompanyProcessingActions(companyId: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public initializeCompanyProcessingActions(companyId: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public initializeCompanyProcessingActions(companyId: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public initializeCompanyProcessingActions(companyId: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (companyId === null || companyId === undefined) {
            throw new Error('Required parameter companyId was null or undefined when calling initializeCompanyProcessingActions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/api/company/${encodeURIComponent(String(companyId))}/processing-actions/initialize`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'initializeCompanyProcessingActions')));
        }
        return handle;
    }


  /**
   * Update company processing action configuration by map.
   * Updates enabled status, order override, and alias label for a processing action
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateCompanyProcessingActionByMap(
    map: UpdateCompanyProcessingAction.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiCompanyProcessingAction>;
  public updateCompanyProcessingActionByMap(
    map: UpdateCompanyProcessingAction.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiCompanyProcessingAction>>;
  public updateCompanyProcessingActionByMap(
    map: UpdateCompanyProcessingAction.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiCompanyProcessingAction>>;
  public updateCompanyProcessingActionByMap(
    map: UpdateCompanyProcessingAction.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.updateCompanyProcessingAction(
      map.companyId,
      map.processingActionId,
      map.ApiCompanyProcessingAction,
      map.language,
      observe,
      reportProgress
    );
  }


    /**
     * Update company processing action configuration
     * Updates enabled status, order override, and alias label for a processing action
     * @param companyId Company ID
     * @param processingActionId Processing Action ID
     * @param ApiCompanyProcessingAction 
     * @param language Language for translations
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCompanyProcessingAction(companyId: number, processingActionId: number, ApiCompanyProcessingAction: ApiCompanyProcessingAction, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiCompanyProcessingAction>;
    public updateCompanyProcessingAction(companyId: number, processingActionId: number, ApiCompanyProcessingAction: ApiCompanyProcessingAction, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiCompanyProcessingAction>>;
    public updateCompanyProcessingAction(companyId: number, processingActionId: number, ApiCompanyProcessingAction: ApiCompanyProcessingAction, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiCompanyProcessingAction>>;
    public updateCompanyProcessingAction(companyId: number, processingActionId: number, ApiCompanyProcessingAction: ApiCompanyProcessingAction, language?: 'EN' | 'DE' | 'RW' | 'ES', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (companyId === null || companyId === undefined) {
            throw new Error('Required parameter companyId was null or undefined when calling updateCompanyProcessingAction.');
        }
        if (processingActionId === null || processingActionId === undefined) {
            throw new Error('Required parameter processingActionId was null or undefined when calling updateCompanyProcessingAction.');
        }
        if (ApiCompanyProcessingAction === null || ApiCompanyProcessingAction === undefined) {
            throw new Error('Required parameter ApiCompanyProcessingAction was null or undefined when calling updateCompanyProcessingAction.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<ApiCompanyProcessingAction>(`${this.configuration.basePath}/api/api/company/${encodeURIComponent(String(companyId))}/processing-actions/${encodeURIComponent(String(processingActionId))}`,
            ApiCompanyProcessingAction,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'updateCompanyProcessingAction')));
        }
        return handle;
    }

}
