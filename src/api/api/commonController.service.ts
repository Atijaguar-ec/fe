/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * INATrace Services API
 * Abelium INATrace Services API swagger documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiDefaultResponse } from '../model/apiDefaultResponse';
import { ApiGlobalSettingsValue } from '../model/apiGlobalSettingsValue';
import { ApiPaginatedResponseApiCountry } from '../model/apiPaginatedResponseApiCountry';
import { ApiResponseApiDocument } from '../model/apiResponseApiDocument';
import { ApiResponseApiGlobalSettingsValue } from '../model/apiResponseApiGlobalSettingsValue';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for getCountriesUsingGET.
 */
export namespace GetCountriesUsingGET {
    /**
     * Parameter map for getCountriesUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
      /**
       * Generic query string for (a part of) name, email etc.
       */
      queryString?: string;
    }

    /**
     * Enumeration of all parameters for getCountriesUsingGET.
     */
    export enum Parameters {
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort',
      /**
       * Generic query string for (a part of) name, email etc.
       */
      queryString = 'queryString'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getCountriesUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetCountriesUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      requestType: [
      ],
      limit: [
      ],
      offset: [
      ],
      sortBy: [
      ],
      sort: [
      ],
      queryString: [
      ],
    };
}

/**
 * Namespace for getDocumentUsingGET.
 */
export namespace GetDocumentUsingGET {
    /**
     * Parameter map for getDocumentUsingGET.
     */
    export interface PartialParamMap {
      /**
       * storageKey
       */
      storageKey: string;
    }

    /**
     * Enumeration of all parameters for getDocumentUsingGET.
     */
    export enum Parameters {
      /**
       * storageKey
       */
      storageKey = 'storageKey'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getDocumentUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetDocumentUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      storageKey: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getGlobalSettingsUsingGET.
 */
export namespace GetGlobalSettingsUsingGET {
    /**
     * Parameter map for getGlobalSettingsUsingGET.
     */
    export interface PartialParamMap {
      /**
       * name
       */
      name: string;
    }

    /**
     * Enumeration of all parameters for getGlobalSettingsUsingGET.
     */
    export enum Parameters {
      /**
       * name
       */
      name = 'name'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getGlobalSettingsUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetGlobalSettingsUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      name: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getImageUsingGET.
 */
export namespace GetImageUsingGET {
    /**
     * Parameter map for getImageUsingGET.
     */
    export interface PartialParamMap {
      /**
       * storageKey
       */
      storageKey: string;
    }

    /**
     * Enumeration of all parameters for getImageUsingGET.
     */
    export enum Parameters {
      /**
       * storageKey
       */
      storageKey = 'storageKey'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getImageUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetImageUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      storageKey: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getResizedImageUsingGET.
 */
export namespace GetResizedImageUsingGET {
    /**
     * Parameter map for getResizedImageUsingGET.
     */
    export interface PartialParamMap {
      /**
       * storageKey
       */
      storageKey: string;
      /**
       * size
       */
      size: string;
    }

    /**
     * Enumeration of all parameters for getResizedImageUsingGET.
     */
    export enum Parameters {
      /**
       * storageKey
       */
      storageKey = 'storageKey',
      /**
       * size
       */
      size = 'size'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getResizedImageUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetResizedImageUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      storageKey: [
              ['required', Validators.required],
      ],
      size: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for updateGlobalSettingsUsingPOST.
 */
export namespace UpdateGlobalSettingsUsingPOST {
    /**
     * Parameter map for updateGlobalSettingsUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * name
       */
      name: string;
      /**
       * request
       */
      ApiGlobalSettingsValue: ApiGlobalSettingsValue;
    }

    /**
     * Enumeration of all parameters for updateGlobalSettingsUsingPOST.
     */
    export enum Parameters {
      /**
       * name
       */
      name = 'name',
      /**
       * request
       */
      ApiGlobalSettingsValue = 'ApiGlobalSettingsValue'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of updateGlobalSettingsUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UpdateGlobalSettingsUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
      name: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for uploadDocumentUsingPOST.
 */
export namespace UploadDocumentUsingPOST {
    /**
     * Parameter map for uploadDocumentUsingPOST.
     */
    export interface PartialParamMap {
      body: Blob;
      /**
       * type
       */
      type?: 'GENERAL' | 'IMAGE';
    }

    /**
     * Enumeration of all parameters for uploadDocumentUsingPOST.
     */
    export enum Parameters {
      body = 'body',
      /**
       * type
       */
      type = 'type'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of uploadDocumentUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UploadDocumentUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
      body: [
              ['required', Validators.required],
      ],
      type: [
      ],
    };
}

/**
 * Namespace for uploadImageUsingPOST.
 */
export namespace UploadImageUsingPOST {
    /**
     * Parameter map for uploadImageUsingPOST.
     */
    export interface PartialParamMap {
      body: Blob;
      /**
       * resize
       */
      resize?: boolean;
    }

    /**
     * Enumeration of all parameters for uploadImageUsingPOST.
     */
    export enum Parameters {
      body = 'body',
      /**
       * resize
       */
      resize = 'resize'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of uploadImageUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UploadImageUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
      body: [
              ['required', Validators.required],
      ],
      resize: [
      ],
    };
}



@Injectable({
  providedIn: 'root'
})
export class CommonControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   * List countries by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCountriesUsingGETByMap(
    map: GetCountriesUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiCountry>;
  public getCountriesUsingGETByMap(
    map: GetCountriesUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiCountry>>;
  public getCountriesUsingGETByMap(
    map: GetCountriesUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiCountry>>;
  public getCountriesUsingGETByMap(
    map: GetCountriesUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getCountriesUsingGET(
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      map.queryString,
      observe,
      reportProgress
    );
  }


    /**
     * List countries
     * 
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param queryString Generic query string for (a part of) name, email etc.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCountriesUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', queryString?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiCountry>;
    public getCountriesUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', queryString?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiCountry>>;
    public getCountriesUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', queryString?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiCountry>>;
    public getCountriesUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', queryString?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (queryString !== undefined && queryString !== null) {
            queryParameters = queryParameters.set('queryString', <any>queryString);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiCountry>(`${this.configuration.basePath}/api/common/countries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getCountriesUsingGET')));
        }
        return handle;
    }


  /**
   * Returns file contents for given storage key by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDocumentUsingGETByMap(
    map: GetDocumentUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<Blob>;
  public getDocumentUsingGETByMap(
    map: GetDocumentUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getDocumentUsingGETByMap(
    map: GetDocumentUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getDocumentUsingGETByMap(
    map: GetDocumentUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getDocumentUsingGET(
      map.storageKey,
      observe,
      reportProgress
    );
  }


    /**
     * Returns file contents for given storage key
     * 
     * @param storageKey storageKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentUsingGET(storageKey: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<Blob>;
    public getDocumentUsingGET(storageKey: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<Blob>>;
    public getDocumentUsingGET(storageKey: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<Blob>>;
    public getDocumentUsingGET(storageKey: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (storageKey === null || storageKey === undefined) {
            throw new Error('Required parameter storageKey was null or undefined when calling getDocumentUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get(`${this.configuration.basePath}/api/common/document/${encodeURIComponent(String(storageKey))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getDocumentUsingGET')));
        }
        return handle;
    }


  /**
   * Returns &#39;global settings&#39; value by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getGlobalSettingsUsingGETByMap(
    map: GetGlobalSettingsUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiGlobalSettingsValue>;
  public getGlobalSettingsUsingGETByMap(
    map: GetGlobalSettingsUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiGlobalSettingsValue>>;
  public getGlobalSettingsUsingGETByMap(
    map: GetGlobalSettingsUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiGlobalSettingsValue>>;
  public getGlobalSettingsUsingGETByMap(
    map: GetGlobalSettingsUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getGlobalSettingsUsingGET(
      map.name,
      observe,
      reportProgress
    );
  }


    /**
     * Returns &#39;global settings&#39; value
     * 
     * @param name name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGlobalSettingsUsingGET(name: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiGlobalSettingsValue>;
    public getGlobalSettingsUsingGET(name: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiGlobalSettingsValue>>;
    public getGlobalSettingsUsingGET(name: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiGlobalSettingsValue>>;
    public getGlobalSettingsUsingGET(name: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getGlobalSettingsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiGlobalSettingsValue>(`${this.configuration.basePath}/api/common/globalSettings/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getGlobalSettingsUsingGET')));
        }
        return handle;
    }


  /**
   * Returns image contents for given storage key by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getImageUsingGETByMap(
    map: GetImageUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<Blob>;
  public getImageUsingGETByMap(
    map: GetImageUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getImageUsingGETByMap(
    map: GetImageUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getImageUsingGETByMap(
    map: GetImageUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getImageUsingGET(
      map.storageKey,
      observe,
      reportProgress
    );
  }


    /**
     * Returns image contents for given storage key
     * 
     * @param storageKey storageKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getImageUsingGET(storageKey: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<Blob>;
    public getImageUsingGET(storageKey: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<Blob>>;
    public getImageUsingGET(storageKey: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<Blob>>;
    public getImageUsingGET(storageKey: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (storageKey === null || storageKey === undefined) {
            throw new Error('Required parameter storageKey was null or undefined when calling getImageUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get(`${this.configuration.basePath}/api/common/image/${encodeURIComponent(String(storageKey))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getImageUsingGET')));
        }
        return handle;
    }


  /**
   * Returns image contents for given storage key by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getResizedImageUsingGETByMap(
    map: GetResizedImageUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<Blob>;
  public getResizedImageUsingGETByMap(
    map: GetResizedImageUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getResizedImageUsingGETByMap(
    map: GetResizedImageUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getResizedImageUsingGETByMap(
    map: GetResizedImageUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getResizedImageUsingGET(
      map.storageKey,
      map.size,
      observe,
      reportProgress
    );
  }


    /**
     * Returns image contents for given storage key
     * 
     * @param storageKey storageKey
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getResizedImageUsingGET(storageKey: string, size: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<Blob>;
    public getResizedImageUsingGET(storageKey: string, size: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<Blob>>;
    public getResizedImageUsingGET(storageKey: string, size: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<Blob>>;
    public getResizedImageUsingGET(storageKey: string, size: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (storageKey === null || storageKey === undefined) {
            throw new Error('Required parameter storageKey was null or undefined when calling getResizedImageUsingGET.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getResizedImageUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get(`${this.configuration.basePath}/api/common/image/${encodeURIComponent(String(storageKey))}/${encodeURIComponent(String(size))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getResizedImageUsingGET')));
        }
        return handle;
    }


  /**
   * Updates or creates &#39;global settings&#39; by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateGlobalSettingsUsingPOSTByMap(
    map: UpdateGlobalSettingsUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public updateGlobalSettingsUsingPOSTByMap(
    map: UpdateGlobalSettingsUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public updateGlobalSettingsUsingPOSTByMap(
    map: UpdateGlobalSettingsUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public updateGlobalSettingsUsingPOSTByMap(
    map: UpdateGlobalSettingsUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.updateGlobalSettingsUsingPOST(
      map.name,
      map.ApiGlobalSettingsValue,
      observe,
      reportProgress
    );
  }


    /**
     * Updates or creates &#39;global settings&#39;
     * 
     * @param name name
     * @param ApiGlobalSettingsValue request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGlobalSettingsUsingPOST(name: string, ApiGlobalSettingsValue: ApiGlobalSettingsValue, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public updateGlobalSettingsUsingPOST(name: string, ApiGlobalSettingsValue: ApiGlobalSettingsValue, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public updateGlobalSettingsUsingPOST(name: string, ApiGlobalSettingsValue: ApiGlobalSettingsValue, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public updateGlobalSettingsUsingPOST(name: string, ApiGlobalSettingsValue: ApiGlobalSettingsValue, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateGlobalSettingsUsingPOST.');
        }
        if (ApiGlobalSettingsValue === null || ApiGlobalSettingsValue === undefined) {
            throw new Error('Required parameter ApiGlobalSettingsValue was null or undefined when calling updateGlobalSettingsUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/common/globalSettings/${encodeURIComponent(String(name))}`,
            ApiGlobalSettingsValue,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'updateGlobalSettingsUsingPOST')));
        }
        return handle;
    }


  /**
   * Uploads a document by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public uploadDocumentUsingPOSTByMap(
    map: UploadDocumentUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiDocument>;
  public uploadDocumentUsingPOSTByMap(
    map: UploadDocumentUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiDocument>>;
  public uploadDocumentUsingPOSTByMap(
    map: UploadDocumentUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiDocument>>;
  public uploadDocumentUsingPOSTByMap(
    map: UploadDocumentUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.uploadDocumentUsingPOST(
      map.body,
      map.type,
      observe,
      reportProgress
    );
  }


    /**
     * Uploads a document
     * 
     * @param body 
     * @param type type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadDocumentUsingPOST(body: Blob, type?: 'GENERAL' | 'IMAGE', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiDocument>;
    public uploadDocumentUsingPOST(body: Blob, type?: 'GENERAL' | 'IMAGE', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiDocument>>;
    public uploadDocumentUsingPOST(body: Blob, type?: 'GENERAL' | 'IMAGE', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiDocument>>;
    public uploadDocumentUsingPOST(body: Blob, type?: 'GENERAL' | 'IMAGE', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling uploadDocumentUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/octet-stream'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseApiDocument>(`${this.configuration.basePath}/api/common/document`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'uploadDocumentUsingPOST')));
        }
        return handle;
    }


  /**
   * Uploads an image by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public uploadImageUsingPOSTByMap(
    map: UploadImageUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiDocument>;
  public uploadImageUsingPOSTByMap(
    map: UploadImageUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiDocument>>;
  public uploadImageUsingPOSTByMap(
    map: UploadImageUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiDocument>>;
  public uploadImageUsingPOSTByMap(
    map: UploadImageUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.uploadImageUsingPOST(
      map.body,
      map.resize,
      observe,
      reportProgress
    );
  }


    /**
     * Uploads an image
     * 
     * @param body 
     * @param resize resize
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public uploadImageUsingPOST(body: Blob, resize?: boolean, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiDocument>;
    public uploadImageUsingPOST(body: Blob, resize?: boolean, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiDocument>>;
    public uploadImageUsingPOST(body: Blob, resize?: boolean, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiDocument>>;
    public uploadImageUsingPOST(body: Blob, resize?: boolean, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling uploadImageUsingPOST.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (resize !== undefined && resize !== null) {
            queryParameters = queryParameters.set('resize', <any>resize);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/octet-stream'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiResponseApiDocument>(`${this.configuration.basePath}/api/common/image`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'uploadImageUsingPOST')));
        }
        return handle;
    }

}
