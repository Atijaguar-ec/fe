/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * INATrace Services API
 * INATrace Services API OpenAPI documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for redirectLegacy.
 */
export namespace RedirectLegacy {
    /**
     * Parameter map for redirectLegacy.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacy1.
 */
export namespace RedirectLegacy1 {
    /**
     * Parameter map for redirectLegacy1.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy1.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy1
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy1.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacy2.
 */
export namespace RedirectLegacy2 {
    /**
     * Parameter map for redirectLegacy2.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy2.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy2
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy2.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacy3.
 */
export namespace RedirectLegacy3 {
    /**
     * Parameter map for redirectLegacy3.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy3.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy3
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy3.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacy4.
 */
export namespace RedirectLegacy4 {
    /**
     * Parameter map for redirectLegacy4.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy4.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy4
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy4.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacy5.
 */
export namespace RedirectLegacy5 {
    /**
     * Parameter map for redirectLegacy5.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy5.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy5
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy5.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacy6.
 */
export namespace RedirectLegacy6 {
    /**
     * Parameter map for redirectLegacy6.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacy6.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacy6
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacy6.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase.
 */
export namespace RedirectLegacyBase {
    /**
     * Parameter map for redirectLegacyBase.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase1.
 */
export namespace RedirectLegacyBase1 {
    /**
     * Parameter map for redirectLegacyBase1.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase1.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase1
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase1.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase10.
 */
export namespace RedirectLegacyBase10 {
    /**
     * Parameter map for redirectLegacyBase10.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase10.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase10
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase10.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase11.
 */
export namespace RedirectLegacyBase11 {
    /**
     * Parameter map for redirectLegacyBase11.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase11.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase11
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase11.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase12.
 */
export namespace RedirectLegacyBase12 {
    /**
     * Parameter map for redirectLegacyBase12.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase12.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase12
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase12.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase13.
 */
export namespace RedirectLegacyBase13 {
    /**
     * Parameter map for redirectLegacyBase13.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase13.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase13
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase13.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase2.
 */
export namespace RedirectLegacyBase2 {
    /**
     * Parameter map for redirectLegacyBase2.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase2.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase2
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase2.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase3.
 */
export namespace RedirectLegacyBase3 {
    /**
     * Parameter map for redirectLegacyBase3.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase3.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase3
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase3.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase4.
 */
export namespace RedirectLegacyBase4 {
    /**
     * Parameter map for redirectLegacyBase4.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase4.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase4
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase4.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase5.
 */
export namespace RedirectLegacyBase5 {
    /**
     * Parameter map for redirectLegacyBase5.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase5.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase5
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase5.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase6.
 */
export namespace RedirectLegacyBase6 {
    /**
     * Parameter map for redirectLegacyBase6.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase6.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase6
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase6.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase7.
 */
export namespace RedirectLegacyBase7 {
    /**
     * Parameter map for redirectLegacyBase7.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase7.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase7
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase7.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase8.
 */
export namespace RedirectLegacyBase8 {
    /**
     * Parameter map for redirectLegacyBase8.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase8.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase8
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase8.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for redirectLegacyBase9.
 */
export namespace RedirectLegacyBase9 {
    /**
     * Parameter map for redirectLegacyBase9.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for redirectLegacyBase9.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of redirectLegacyBase9
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RedirectLegacyBase9.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class LegacyDocumentRedirectControllerService {

    protected basePath = 'http://5.161.183.137:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyByMap(
    map: RedirectLegacy.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyByMap(
    map: RedirectLegacy.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyByMap(
    map: RedirectLegacy.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyByMap(
    map: RedirectLegacy.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<any>(`${this.configuration.basePath}/api/api/document/**`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacy1ByMap(
    map: RedirectLegacy1.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacy1ByMap(
    map: RedirectLegacy1.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacy1ByMap(
    map: RedirectLegacy1.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacy1ByMap(
    map: RedirectLegacy1.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy1(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy1(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy1(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy1(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy1(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.head<any>(`${this.configuration.basePath}/api/api/document/**`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy_1')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacy2ByMap(
    map: RedirectLegacy2.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacy2ByMap(
    map: RedirectLegacy2.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacy2ByMap(
    map: RedirectLegacy2.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacy2ByMap(
    map: RedirectLegacy2.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy2(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy2(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy2(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy2(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy2(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<any>(`${this.configuration.basePath}/api/api/document/**`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy_2')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacy3ByMap(
    map: RedirectLegacy3.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacy3ByMap(
    map: RedirectLegacy3.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacy3ByMap(
    map: RedirectLegacy3.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacy3ByMap(
    map: RedirectLegacy3.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy3(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy3(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy3(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy3(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy3(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<any>(`${this.configuration.basePath}/api/api/document/**`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy_3')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacy4ByMap(
    map: RedirectLegacy4.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacy4ByMap(
    map: RedirectLegacy4.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacy4ByMap(
    map: RedirectLegacy4.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacy4ByMap(
    map: RedirectLegacy4.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy4(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy4(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy4(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy4(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy4(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.patch<any>(`${this.configuration.basePath}/api/api/document/**`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy_4')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacy5ByMap(
    map: RedirectLegacy5.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacy5ByMap(
    map: RedirectLegacy5.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacy5ByMap(
    map: RedirectLegacy5.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacy5ByMap(
    map: RedirectLegacy5.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy5(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy5(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy5(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy5(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy5(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.delete<any>(`${this.configuration.basePath}/api/api/document/**`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy_5')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacy6ByMap(
    map: RedirectLegacy6.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacy6ByMap(
    map: RedirectLegacy6.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacy6ByMap(
    map: RedirectLegacy6.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacy6ByMap(
    map: RedirectLegacy6.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacy6(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacy6(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacy6(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacy6(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacy6(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.options<any>(`${this.configuration.basePath}/api/api/document/**`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacy_6')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBaseByMap(
    map: RedirectLegacyBase.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBaseByMap(
    map: RedirectLegacyBase.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBaseByMap(
    map: RedirectLegacyBase.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBaseByMap(
    map: RedirectLegacyBase.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<any>(`${this.configuration.basePath}/api/api/document`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase1ByMap(
    map: RedirectLegacyBase1.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase1ByMap(
    map: RedirectLegacyBase1.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase1ByMap(
    map: RedirectLegacyBase1.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase1ByMap(
    map: RedirectLegacyBase1.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase1(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase1(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase1(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase1(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase1(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.head<any>(`${this.configuration.basePath}/api/api/document`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_1')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase10ByMap(
    map: RedirectLegacyBase10.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase10ByMap(
    map: RedirectLegacyBase10.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase10ByMap(
    map: RedirectLegacyBase10.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase10ByMap(
    map: RedirectLegacyBase10.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase10(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase10(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase10(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase10(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase10(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<any>(`${this.configuration.basePath}/api/api/document/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_10')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase11ByMap(
    map: RedirectLegacyBase11.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase11ByMap(
    map: RedirectLegacyBase11.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase11ByMap(
    map: RedirectLegacyBase11.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase11ByMap(
    map: RedirectLegacyBase11.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase11(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase11(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase11(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase11(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase11(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.patch<any>(`${this.configuration.basePath}/api/api/document/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_11')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase12ByMap(
    map: RedirectLegacyBase12.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase12ByMap(
    map: RedirectLegacyBase12.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase12ByMap(
    map: RedirectLegacyBase12.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase12ByMap(
    map: RedirectLegacyBase12.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase12(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase12(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase12(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase12(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase12(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.delete<any>(`${this.configuration.basePath}/api/api/document/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_12')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase13ByMap(
    map: RedirectLegacyBase13.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase13ByMap(
    map: RedirectLegacyBase13.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase13ByMap(
    map: RedirectLegacyBase13.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase13ByMap(
    map: RedirectLegacyBase13.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase13(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase13(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase13(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase13(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase13(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.options<any>(`${this.configuration.basePath}/api/api/document/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_13')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase2ByMap(
    map: RedirectLegacyBase2.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase2ByMap(
    map: RedirectLegacyBase2.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase2ByMap(
    map: RedirectLegacyBase2.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase2ByMap(
    map: RedirectLegacyBase2.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase2(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase2(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase2(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase2(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase2(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<any>(`${this.configuration.basePath}/api/api/document`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_2')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase3ByMap(
    map: RedirectLegacyBase3.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase3ByMap(
    map: RedirectLegacyBase3.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase3ByMap(
    map: RedirectLegacyBase3.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase3ByMap(
    map: RedirectLegacyBase3.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase3(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase3(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase3(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase3(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase3(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<any>(`${this.configuration.basePath}/api/api/document`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_3')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase4ByMap(
    map: RedirectLegacyBase4.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase4ByMap(
    map: RedirectLegacyBase4.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase4ByMap(
    map: RedirectLegacyBase4.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase4ByMap(
    map: RedirectLegacyBase4.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase4(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase4(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase4(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase4(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase4(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.patch<any>(`${this.configuration.basePath}/api/api/document`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_4')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase5ByMap(
    map: RedirectLegacyBase5.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase5ByMap(
    map: RedirectLegacyBase5.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase5ByMap(
    map: RedirectLegacyBase5.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase5ByMap(
    map: RedirectLegacyBase5.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase5(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase5(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase5(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase5(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase5(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.delete<any>(`${this.configuration.basePath}/api/api/document`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_5')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase6ByMap(
    map: RedirectLegacyBase6.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase6ByMap(
    map: RedirectLegacyBase6.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase6ByMap(
    map: RedirectLegacyBase6.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase6ByMap(
    map: RedirectLegacyBase6.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase6(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase6(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase6(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase6(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase6(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.options<any>(`${this.configuration.basePath}/api/api/document`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_6')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase7ByMap(
    map: RedirectLegacyBase7.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase7ByMap(
    map: RedirectLegacyBase7.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase7ByMap(
    map: RedirectLegacyBase7.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase7ByMap(
    map: RedirectLegacyBase7.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase7(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase7(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase7(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase7(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase7(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<any>(`${this.configuration.basePath}/api/api/document/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_7')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase8ByMap(
    map: RedirectLegacyBase8.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase8ByMap(
    map: RedirectLegacyBase8.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase8ByMap(
    map: RedirectLegacyBase8.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase8ByMap(
    map: RedirectLegacyBase8.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase8(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase8(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase8(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase8(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase8(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.head<any>(`${this.configuration.basePath}/api/api/document/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_8')));
        }
        return handle;
    }


  /**
   *  by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public redirectLegacyBase9ByMap(
    map: RedirectLegacyBase9.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<any>;
  public redirectLegacyBase9ByMap(
    map: RedirectLegacyBase9.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<any>>;
  public redirectLegacyBase9ByMap(
    map: RedirectLegacyBase9.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<any>>;
  public redirectLegacyBase9ByMap(
    map: RedirectLegacyBase9.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.redirectLegacyBase9(
      observe,
      reportProgress
    );
  }


    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public redirectLegacyBase9(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<any>;
    public redirectLegacyBase9(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<any>>;
    public redirectLegacyBase9(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<any>>;
    public redirectLegacyBase9(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<any>(`${this.configuration.basePath}/api/api/document/`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'redirectLegacyBase_9')));
        }
        return handle;
    }

}
