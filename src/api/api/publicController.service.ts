/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * INATrace Services API
 * Abelium INATrace Services API swagger documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiDefaultResponse } from '../model/apiDefaultResponse';
import { ApiLogRequest } from '../model/apiLogRequest';
import { ApiPaginatedResponseApiProductLabelFeedback } from '../model/apiPaginatedResponseApiProductLabelFeedback';
import { ApiProductLabelFeedback } from '../model/apiProductLabelFeedback';
import { ApiResponseApiCompanyPublic } from '../model/apiResponseApiCompanyPublic';
import { ApiResponseApiGlobalSettingsValue } from '../model/apiResponseApiGlobalSettingsValue';
import { ApiResponseApiKnowledgeBlog } from '../model/apiResponseApiKnowledgeBlog';
import { ApiResponseApiProductLabelBatch } from '../model/apiResponseApiProductLabelBatch';
import { ApiResponseApiProductLabelValuesExtended } from '../model/apiResponseApiProductLabelValuesExtended';
import { ApiResponseApiQRTagPublic } from '../model/apiResponseApiQRTagPublic';
import { ApiResponseBoolean } from '../model/apiResponseBoolean';
import { ApiResponseListApiLocation } from '../model/apiResponseListApiLocation';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for addProductLabelFeedbackUsingPOST.
 */
export namespace AddProductLabelFeedbackUsingPOST {
    /**
     * Parameter map for addProductLabelFeedbackUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * Label id
       */
      labelUid: string;
      /**
       * request
       */
      ApiProductLabelFeedback: ApiProductLabelFeedback;
    }

    /**
     * Enumeration of all parameters for addProductLabelFeedbackUsingPOST.
     */
    export enum Parameters {
      /**
       * Label id
       */
      labelUid = 'labelUid',
      /**
       * request
       */
      ApiProductLabelFeedback = 'ApiProductLabelFeedback'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of addProductLabelFeedbackUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof AddProductLabelFeedbackUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
      labelUid: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for checkPublicProductLabelBatchAuthenticityUsingGET.
 */
export namespace CheckPublicProductLabelBatchAuthenticityUsingGET {
    /**
     * Parameter map for checkPublicProductLabelBatchAuthenticityUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Label uid
       */
      uid: string;
      /**
       * Entity id
       */
      id?: number;
      /**
       * Batch number
       */
      number?: string;
      /**
       * Production date
       */
      productionDate?: string;
      /**
       * Expiry date
       */
      expiryDate?: string;
    }

    /**
     * Enumeration of all parameters for checkPublicProductLabelBatchAuthenticityUsingGET.
     */
    export enum Parameters {
      /**
       * Label uid
       */
      uid = 'uid',
      /**
       * Entity id
       */
      id = 'id',
      /**
       * Batch number
       */
      number = 'number',
      /**
       * Production date
       */
      productionDate = 'productionDate',
      /**
       * Expiry date
       */
      expiryDate = 'expiryDate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of checkPublicProductLabelBatchAuthenticityUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CheckPublicProductLabelBatchAuthenticityUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      uid: [
              ['required', Validators.required],
      ],
      id: [
      ],
      number: [
      ],
      productionDate: [
      ],
      expiryDate: [
      ],
    };
}

/**
 * Namespace for checkPublicProductLabelBatchOriginUsingGET.
 */
export namespace CheckPublicProductLabelBatchOriginUsingGET {
    /**
     * Parameter map for checkPublicProductLabelBatchOriginUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Label uid
       */
      uid: string;
      /**
       * Entity id
       */
      id?: number;
      /**
       * Batch number
       */
      number?: string;
    }

    /**
     * Enumeration of all parameters for checkPublicProductLabelBatchOriginUsingGET.
     */
    export enum Parameters {
      /**
       * Label uid
       */
      uid = 'uid',
      /**
       * Entity id
       */
      id = 'id',
      /**
       * Batch number
       */
      number = 'number'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of checkPublicProductLabelBatchOriginUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CheckPublicProductLabelBatchOriginUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      uid: [
              ['required', Validators.required],
      ],
      id: [
      ],
      number: [
      ],
    };
}

/**
 * Namespace for getPublicCompanyUsingGET.
 */
export namespace GetPublicCompanyUsingGET {
    /**
     * Parameter map for getPublicCompanyUsingGET.
     */
    export interface PartialParamMap {
      /**
       * id
       */
      id: number;
      /**
       * language
       */
      language?: string;
    }

    /**
     * Enumeration of all parameters for getPublicCompanyUsingGET.
     */
    export enum Parameters {
      /**
       * id
       */
      id = 'id',
      /**
       * language
       */
      language = 'language'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicCompanyUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicCompanyUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
      language: [
      ],
    };
}

/**
 * Namespace for getPublicDocumentUsingGET.
 */
export namespace GetPublicDocumentUsingGET {
    /**
     * Parameter map for getPublicDocumentUsingGET.
     */
    export interface PartialParamMap {
      /**
       * storageKey
       */
      storageKey: string;
    }

    /**
     * Enumeration of all parameters for getPublicDocumentUsingGET.
     */
    export enum Parameters {
      /**
       * storageKey
       */
      storageKey = 'storageKey'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicDocumentUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicDocumentUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      storageKey: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPublicGlobalSettingsUsingGET.
 */
export namespace GetPublicGlobalSettingsUsingGET {
    /**
     * Parameter map for getPublicGlobalSettingsUsingGET.
     */
    export interface PartialParamMap {
      /**
       * name
       */
      name: string;
    }

    /**
     * Enumeration of all parameters for getPublicGlobalSettingsUsingGET.
     */
    export enum Parameters {
      /**
       * name
       */
      name = 'name'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicGlobalSettingsUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicGlobalSettingsUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      name: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPublicImageUsingGET.
 */
export namespace GetPublicImageUsingGET {
    /**
     * Parameter map for getPublicImageUsingGET.
     */
    export interface PartialParamMap {
      /**
       * storageKey
       */
      storageKey: string;
    }

    /**
     * Enumeration of all parameters for getPublicImageUsingGET.
     */
    export enum Parameters {
      /**
       * storageKey
       */
      storageKey = 'storageKey'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicImageUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicImageUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      storageKey: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPublicProductKnowledgeBlogUsingGET.
 */
export namespace GetPublicProductKnowledgeBlogUsingGET {
    /**
     * Parameter map for getPublicProductKnowledgeBlogUsingGET.
     */
    export interface PartialParamMap {
      /**
       * id
       */
      id: number;
    }

    /**
     * Enumeration of all parameters for getPublicProductKnowledgeBlogUsingGET.
     */
    export enum Parameters {
      /**
       * id
       */
      id = 'id'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicProductKnowledgeBlogUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicProductKnowledgeBlogUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPublicProductLabelBatchUsingGET.
 */
export namespace GetPublicProductLabelBatchUsingGET {
    /**
     * Parameter map for getPublicProductLabelBatchUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Label uid
       */
      uid: string;
      /**
       * Batch number
       */
      number: string;
    }

    /**
     * Enumeration of all parameters for getPublicProductLabelBatchUsingGET.
     */
    export enum Parameters {
      /**
       * Label uid
       */
      uid = 'uid',
      /**
       * Batch number
       */
      number = 'number'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicProductLabelBatchUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicProductLabelBatchUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      uid: [
              ['required', Validators.required],
      ],
      number: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPublicProductLabelValuesUsingGET.
 */
export namespace GetPublicProductLabelValuesUsingGET {
    /**
     * Parameter map for getPublicProductLabelValuesUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Label uid
       */
      uid: string;
    }

    /**
     * Enumeration of all parameters for getPublicProductLabelValuesUsingGET.
     */
    export enum Parameters {
      /**
       * Label uid
       */
      uid = 'uid'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicProductLabelValuesUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicProductLabelValuesUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      uid: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getPublicResizedImageUsingGET.
 */
export namespace GetPublicResizedImageUsingGET {
    /**
     * Parameter map for getPublicResizedImageUsingGET.
     */
    export interface PartialParamMap {
      /**
       * storageKey
       */
      storageKey: string;
      /**
       * size
       */
      size: string;
    }

    /**
     * Enumeration of all parameters for getPublicResizedImageUsingGET.
     */
    export enum Parameters {
      /**
       * storageKey
       */
      storageKey = 'storageKey',
      /**
       * size
       */
      size = 'size'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getPublicResizedImageUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetPublicResizedImageUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      storageKey: [
              ['required', Validators.required],
      ],
      size: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getQRTagPublicDataUsingGET.
 */
export namespace GetQRTagPublicDataUsingGET {
    /**
     * Parameter map for getQRTagPublicDataUsingGET.
     */
    export interface PartialParamMap {
      /**
       * QR code tag
       */
      qrTag: string;
      /**
       * Return aggregated history
       */
      withHistory?: boolean;
      /**
       * language
       */
      language?: 'EN' | 'DE' | 'RW' | 'ES';
    }

    /**
     * Enumeration of all parameters for getQRTagPublicDataUsingGET.
     */
    export enum Parameters {
      /**
       * QR code tag
       */
      qrTag = 'qrTag',
      /**
       * Return aggregated history
       */
      withHistory = 'withHistory',
      /**
       * language
       */
      language = 'language'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getQRTagPublicDataUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetQRTagPublicDataUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      qrTag: [
              ['required', Validators.required],
      ],
      withHistory: [
      ],
      language: [
      ],
    };
}

/**
 * Namespace for listProductLabelFeedbacksUsingGET.
 */
export namespace ListProductLabelFeedbacksUsingGET {
    /**
     * Parameter map for listProductLabelFeedbacksUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Label id
       */
      labelUid: string;
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
      /**
       * feedback type
       */
      type?: 'PRAISE' | 'PROPOSAL' | 'COMPLAINT';
    }

    /**
     * Enumeration of all parameters for listProductLabelFeedbacksUsingGET.
     */
    export enum Parameters {
      /**
       * Label id
       */
      labelUid = 'labelUid',
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort',
      /**
       * feedback type
       */
      type = 'type'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listProductLabelFeedbacksUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListProductLabelFeedbacksUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      labelUid: [
              ['required', Validators.required],
      ],
      requestType: [
      ],
      limit: [
      ],
      offset: [
      ],
      sortBy: [
      ],
      sort: [
      ],
      type: [
      ],
    };
}

/**
 * Namespace for logPublicRequestUsingPOST.
 */
export namespace LogPublicRequestUsingPOST {
    /**
     * Parameter map for logPublicRequestUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiLogRequest: ApiLogRequest;
    }

    /**
     * Enumeration of all parameters for logPublicRequestUsingPOST.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiLogRequest = 'ApiLogRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of logPublicRequestUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof LogPublicRequestUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class PublicControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   * Add a feedback to a label with a label uid by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public addProductLabelFeedbackUsingPOSTByMap(
    map: AddProductLabelFeedbackUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public addProductLabelFeedbackUsingPOSTByMap(
    map: AddProductLabelFeedbackUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public addProductLabelFeedbackUsingPOSTByMap(
    map: AddProductLabelFeedbackUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public addProductLabelFeedbackUsingPOSTByMap(
    map: AddProductLabelFeedbackUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.addProductLabelFeedbackUsingPOST(
      map.labelUid,
      map.ApiProductLabelFeedback,
      observe,
      reportProgress
    );
  }


    /**
     * Add a feedback to a label with a label uid
     * 
     * @param labelUid Label id
     * @param ApiProductLabelFeedback request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addProductLabelFeedbackUsingPOST(labelUid: string, ApiProductLabelFeedback: ApiProductLabelFeedback, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public addProductLabelFeedbackUsingPOST(labelUid: string, ApiProductLabelFeedback: ApiProductLabelFeedback, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public addProductLabelFeedbackUsingPOST(labelUid: string, ApiProductLabelFeedback: ApiProductLabelFeedback, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public addProductLabelFeedbackUsingPOST(labelUid: string, ApiProductLabelFeedback: ApiProductLabelFeedback, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (labelUid === null || labelUid === undefined) {
            throw new Error('Required parameter labelUid was null or undefined when calling addProductLabelFeedbackUsingPOST.');
        }
        if (ApiProductLabelFeedback === null || ApiProductLabelFeedback === undefined) {
            throw new Error('Required parameter ApiProductLabelFeedback was null or undefined when calling addProductLabelFeedbackUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/public/product/label/feedback/${encodeURIComponent(String(labelUid))}`,
            ApiProductLabelFeedback,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'addProductLabelFeedbackUsingPOST')));
        }
        return handle;
    }


  /**
   * Check batch by number and given date(s) by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkPublicProductLabelBatchAuthenticityUsingGETByMap(
    map: CheckPublicProductLabelBatchAuthenticityUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseBoolean>;
  public checkPublicProductLabelBatchAuthenticityUsingGETByMap(
    map: CheckPublicProductLabelBatchAuthenticityUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseBoolean>>;
  public checkPublicProductLabelBatchAuthenticityUsingGETByMap(
    map: CheckPublicProductLabelBatchAuthenticityUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseBoolean>>;
  public checkPublicProductLabelBatchAuthenticityUsingGETByMap(
    map: CheckPublicProductLabelBatchAuthenticityUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.checkPublicProductLabelBatchAuthenticityUsingGET(
      map.uid,
      map.id,
      map.number,
      map.productionDate,
      map.expiryDate,
      observe,
      reportProgress
    );
  }


    /**
     * Check batch by number and given date(s)
     * 
     * @param uid Label uid
     * @param id Entity id
     * @param number Batch number
     * @param productionDate Production date
     * @param expiryDate Expiry date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkPublicProductLabelBatchAuthenticityUsingGET(uid: string, id?: number, number?: string, productionDate?: string, expiryDate?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseBoolean>;
    public checkPublicProductLabelBatchAuthenticityUsingGET(uid: string, id?: number, number?: string, productionDate?: string, expiryDate?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseBoolean>>;
    public checkPublicProductLabelBatchAuthenticityUsingGET(uid: string, id?: number, number?: string, productionDate?: string, expiryDate?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseBoolean>>;
    public checkPublicProductLabelBatchAuthenticityUsingGET(uid: string, id?: number, number?: string, productionDate?: string, expiryDate?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling checkPublicProductLabelBatchAuthenticityUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('number', <any>number);
        }
        if (productionDate !== undefined && productionDate !== null) {
            queryParameters = queryParameters.set('productionDate', <any>productionDate);
        }
        if (expiryDate !== undefined && expiryDate !== null) {
            queryParameters = queryParameters.set('expiryDate', <any>expiryDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseBoolean>(`${this.configuration.basePath}/api/public/product/label/${encodeURIComponent(String(uid))}/verify_batch_authenticity`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'checkPublicProductLabelBatchAuthenticityUsingGET')));
        }
        return handle;
    }


  /**
   * Get batch by label and number by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public checkPublicProductLabelBatchOriginUsingGETByMap(
    map: CheckPublicProductLabelBatchOriginUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseListApiLocation>;
  public checkPublicProductLabelBatchOriginUsingGETByMap(
    map: CheckPublicProductLabelBatchOriginUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseListApiLocation>>;
  public checkPublicProductLabelBatchOriginUsingGETByMap(
    map: CheckPublicProductLabelBatchOriginUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseListApiLocation>>;
  public checkPublicProductLabelBatchOriginUsingGETByMap(
    map: CheckPublicProductLabelBatchOriginUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.checkPublicProductLabelBatchOriginUsingGET(
      map.uid,
      map.id,
      map.number,
      observe,
      reportProgress
    );
  }


    /**
     * Get batch by label and number
     * 
     * @param uid Label uid
     * @param id Entity id
     * @param number Batch number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkPublicProductLabelBatchOriginUsingGET(uid: string, id?: number, number?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseListApiLocation>;
    public checkPublicProductLabelBatchOriginUsingGET(uid: string, id?: number, number?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseListApiLocation>>;
    public checkPublicProductLabelBatchOriginUsingGET(uid: string, id?: number, number?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseListApiLocation>>;
    public checkPublicProductLabelBatchOriginUsingGET(uid: string, id?: number, number?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling checkPublicProductLabelBatchOriginUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (number !== undefined && number !== null) {
            queryParameters = queryParameters.set('number', <any>number);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseListApiLocation>(`${this.configuration.basePath}/api/public/product/label/${encodeURIComponent(String(uid))}/verify_batch_origin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'checkPublicProductLabelBatchOriginUsingGET')));
        }
        return handle;
    }


  /**
   * Get public data about company by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicCompanyUsingGETByMap(
    map: GetPublicCompanyUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiCompanyPublic>;
  public getPublicCompanyUsingGETByMap(
    map: GetPublicCompanyUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiCompanyPublic>>;
  public getPublicCompanyUsingGETByMap(
    map: GetPublicCompanyUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiCompanyPublic>>;
  public getPublicCompanyUsingGETByMap(
    map: GetPublicCompanyUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicCompanyUsingGET(
      map.id,
      map.language,
      observe,
      reportProgress
    );
  }


    /**
     * Get public data about company
     * 
     * @param id id
     * @param language language
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicCompanyUsingGET(id: number, language?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiCompanyPublic>;
    public getPublicCompanyUsingGET(id: number, language?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiCompanyPublic>>;
    public getPublicCompanyUsingGET(id: number, language?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiCompanyPublic>>;
    public getPublicCompanyUsingGET(id: number, language?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPublicCompanyUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (language !== undefined && language !== null) {
            queryParameters = queryParameters.set('language', <any>language);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiCompanyPublic>(`${this.configuration.basePath}/api/public/company/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicCompanyUsingGET')));
        }
        return handle;
    }


  /**
   * Returns file contents for given storage key by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicDocumentUsingGETByMap(
    map: GetPublicDocumentUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<Blob>;
  public getPublicDocumentUsingGETByMap(
    map: GetPublicDocumentUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getPublicDocumentUsingGETByMap(
    map: GetPublicDocumentUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getPublicDocumentUsingGETByMap(
    map: GetPublicDocumentUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicDocumentUsingGET(
      map.storageKey,
      observe,
      reportProgress
    );
  }


    /**
     * Returns file contents for given storage key
     * 
     * @param storageKey storageKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicDocumentUsingGET(storageKey: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<Blob>;
    public getPublicDocumentUsingGET(storageKey: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<Blob>>;
    public getPublicDocumentUsingGET(storageKey: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<Blob>>;
    public getPublicDocumentUsingGET(storageKey: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (storageKey === null || storageKey === undefined) {
            throw new Error('Required parameter storageKey was null or undefined when calling getPublicDocumentUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get(`${this.configuration.basePath}/api/public/document/${encodeURIComponent(String(storageKey))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicDocumentUsingGET')));
        }
        return handle;
    }


  /**
   * Returns &#39;global settings&#39; value by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicGlobalSettingsUsingGETByMap(
    map: GetPublicGlobalSettingsUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiGlobalSettingsValue>;
  public getPublicGlobalSettingsUsingGETByMap(
    map: GetPublicGlobalSettingsUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiGlobalSettingsValue>>;
  public getPublicGlobalSettingsUsingGETByMap(
    map: GetPublicGlobalSettingsUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiGlobalSettingsValue>>;
  public getPublicGlobalSettingsUsingGETByMap(
    map: GetPublicGlobalSettingsUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicGlobalSettingsUsingGET(
      map.name,
      observe,
      reportProgress
    );
  }


    /**
     * Returns &#39;global settings&#39; value
     * 
     * @param name name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicGlobalSettingsUsingGET(name: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiGlobalSettingsValue>;
    public getPublicGlobalSettingsUsingGET(name: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiGlobalSettingsValue>>;
    public getPublicGlobalSettingsUsingGET(name: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiGlobalSettingsValue>>;
    public getPublicGlobalSettingsUsingGET(name: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling getPublicGlobalSettingsUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiGlobalSettingsValue>(`${this.configuration.basePath}/api/public/globalSettings/${encodeURIComponent(String(name))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicGlobalSettingsUsingGET')));
        }
        return handle;
    }


  /**
   * Returns image contents for given storage key by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicImageUsingGETByMap(
    map: GetPublicImageUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<Blob>;
  public getPublicImageUsingGETByMap(
    map: GetPublicImageUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getPublicImageUsingGETByMap(
    map: GetPublicImageUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getPublicImageUsingGETByMap(
    map: GetPublicImageUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicImageUsingGET(
      map.storageKey,
      observe,
      reportProgress
    );
  }


    /**
     * Returns image contents for given storage key
     * 
     * @param storageKey storageKey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicImageUsingGET(storageKey: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<Blob>;
    public getPublicImageUsingGET(storageKey: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<Blob>>;
    public getPublicImageUsingGET(storageKey: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<Blob>>;
    public getPublicImageUsingGET(storageKey: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (storageKey === null || storageKey === undefined) {
            throw new Error('Required parameter storageKey was null or undefined when calling getPublicImageUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get(`${this.configuration.basePath}/api/public/image/${encodeURIComponent(String(storageKey))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicImageUsingGET')));
        }
        return handle;
    }


  /**
   * Get knowledge blog by id by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicProductKnowledgeBlogUsingGETByMap(
    map: GetPublicProductKnowledgeBlogUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiKnowledgeBlog>;
  public getPublicProductKnowledgeBlogUsingGETByMap(
    map: GetPublicProductKnowledgeBlogUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiKnowledgeBlog>>;
  public getPublicProductKnowledgeBlogUsingGETByMap(
    map: GetPublicProductKnowledgeBlogUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiKnowledgeBlog>>;
  public getPublicProductKnowledgeBlogUsingGETByMap(
    map: GetPublicProductKnowledgeBlogUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicProductKnowledgeBlogUsingGET(
      map.id,
      observe,
      reportProgress
    );
  }


    /**
     * Get knowledge blog by id
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicProductKnowledgeBlogUsingGET(id: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiKnowledgeBlog>;
    public getPublicProductKnowledgeBlogUsingGET(id: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiKnowledgeBlog>>;
    public getPublicProductKnowledgeBlogUsingGET(id: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiKnowledgeBlog>>;
    public getPublicProductKnowledgeBlogUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPublicProductKnowledgeBlogUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiKnowledgeBlog>(`${this.configuration.basePath}/api/public/product/knowledgeBlog/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicProductKnowledgeBlogUsingGET')));
        }
        return handle;
    }


  /**
   * Get batch by label and number by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicProductLabelBatchUsingGETByMap(
    map: GetPublicProductLabelBatchUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiProductLabelBatch>;
  public getPublicProductLabelBatchUsingGETByMap(
    map: GetPublicProductLabelBatchUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiProductLabelBatch>>;
  public getPublicProductLabelBatchUsingGETByMap(
    map: GetPublicProductLabelBatchUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiProductLabelBatch>>;
  public getPublicProductLabelBatchUsingGETByMap(
    map: GetPublicProductLabelBatchUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicProductLabelBatchUsingGET(
      map.uid,
      map.number,
      observe,
      reportProgress
    );
  }


    /**
     * Get batch by label and number
     * 
     * @param uid Label uid
     * @param number Batch number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicProductLabelBatchUsingGET(uid: string, number: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiProductLabelBatch>;
    public getPublicProductLabelBatchUsingGET(uid: string, number: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiProductLabelBatch>>;
    public getPublicProductLabelBatchUsingGET(uid: string, number: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiProductLabelBatch>>;
    public getPublicProductLabelBatchUsingGET(uid: string, number: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getPublicProductLabelBatchUsingGET.');
        }
        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling getPublicProductLabelBatchUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiProductLabelBatch>(`${this.configuration.basePath}/api/public/product/label_batch/${encodeURIComponent(String(uid))}/${encodeURIComponent(String(number))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicProductLabelBatchUsingGET')));
        }
        return handle;
    }


  /**
   * Get label with field values by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicProductLabelValuesUsingGETByMap(
    map: GetPublicProductLabelValuesUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiProductLabelValuesExtended>;
  public getPublicProductLabelValuesUsingGETByMap(
    map: GetPublicProductLabelValuesUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiProductLabelValuesExtended>>;
  public getPublicProductLabelValuesUsingGETByMap(
    map: GetPublicProductLabelValuesUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiProductLabelValuesExtended>>;
  public getPublicProductLabelValuesUsingGETByMap(
    map: GetPublicProductLabelValuesUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicProductLabelValuesUsingGET(
      map.uid,
      observe,
      reportProgress
    );
  }


    /**
     * Get label with field values
     * 
     * @param uid Label uid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicProductLabelValuesUsingGET(uid: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiProductLabelValuesExtended>;
    public getPublicProductLabelValuesUsingGET(uid: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiProductLabelValuesExtended>>;
    public getPublicProductLabelValuesUsingGET(uid: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiProductLabelValuesExtended>>;
    public getPublicProductLabelValuesUsingGET(uid: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getPublicProductLabelValuesUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiProductLabelValuesExtended>(`${this.configuration.basePath}/api/public/product/label/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicProductLabelValuesUsingGET')));
        }
        return handle;
    }


  /**
   * Returns image contents for given storage key by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPublicResizedImageUsingGETByMap(
    map: GetPublicResizedImageUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<Blob>;
  public getPublicResizedImageUsingGETByMap(
    map: GetPublicResizedImageUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<Blob>>;
  public getPublicResizedImageUsingGETByMap(
    map: GetPublicResizedImageUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<Blob>>;
  public getPublicResizedImageUsingGETByMap(
    map: GetPublicResizedImageUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getPublicResizedImageUsingGET(
      map.storageKey,
      map.size,
      observe,
      reportProgress
    );
  }


    /**
     * Returns image contents for given storage key
     * 
     * @param storageKey storageKey
     * @param size size
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPublicResizedImageUsingGET(storageKey: string, size: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<Blob>;
    public getPublicResizedImageUsingGET(storageKey: string, size: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<Blob>>;
    public getPublicResizedImageUsingGET(storageKey: string, size: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<Blob>>;
    public getPublicResizedImageUsingGET(storageKey: string, size: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (storageKey === null || storageKey === undefined) {
            throw new Error('Required parameter storageKey was null or undefined when calling getPublicResizedImageUsingGET.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling getPublicResizedImageUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get(`${this.configuration.basePath}/api/public/image/${encodeURIComponent(String(storageKey))}/${encodeURIComponent(String(size))}`,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getPublicResizedImageUsingGET')));
        }
        return handle;
    }


  /**
   * Get public data for the Stock order with the given QR code tag by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getQRTagPublicDataUsingGETByMap(
    map: GetQRTagPublicDataUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiQRTagPublic>;
  public getQRTagPublicDataUsingGETByMap(
    map: GetQRTagPublicDataUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiQRTagPublic>>;
  public getQRTagPublicDataUsingGETByMap(
    map: GetQRTagPublicDataUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiQRTagPublic>>;
  public getQRTagPublicDataUsingGETByMap(
    map: GetQRTagPublicDataUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getQRTagPublicDataUsingGET(
      map.qrTag,
      map.withHistory,
      map.language,
      observe,
      reportProgress
    );
  }


    /**
     * Get public data for the Stock order with the given QR code tag
     * 
     * @param qrTag QR code tag
     * @param withHistory Return aggregated history
     * @param language language
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getQRTagPublicDataUsingGET(qrTag: string, withHistory?: boolean, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiQRTagPublic>;
    public getQRTagPublicDataUsingGET(qrTag: string, withHistory?: boolean, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiQRTagPublic>>;
    public getQRTagPublicDataUsingGET(qrTag: string, withHistory?: boolean, language?: 'EN' | 'DE' | 'RW' | 'ES', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiQRTagPublic>>;
    public getQRTagPublicDataUsingGET(qrTag: string, withHistory?: boolean, language?: 'EN' | 'DE' | 'RW' | 'ES', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (qrTag === null || qrTag === undefined) {
            throw new Error('Required parameter qrTag was null or undefined when calling getQRTagPublicDataUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (withHistory !== undefined && withHistory !== null) {
            queryParameters = queryParameters.set('withHistory', <any>withHistory);
        }

        let headers = this.defaultHeaders;
        if (language !== undefined && language !== null) {
            headers = headers.set('language', String(language));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiQRTagPublic>(`${this.configuration.basePath}/api/public/stock-order/${encodeURIComponent(String(qrTag))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getQRTagPublicDataUsingGET')));
        }
        return handle;
    }


  /**
   * List feedback for a label uid by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listProductLabelFeedbacksUsingGETByMap(
    map: ListProductLabelFeedbacksUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiProductLabelFeedback>;
  public listProductLabelFeedbacksUsingGETByMap(
    map: ListProductLabelFeedbacksUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiProductLabelFeedback>>;
  public listProductLabelFeedbacksUsingGETByMap(
    map: ListProductLabelFeedbacksUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiProductLabelFeedback>>;
  public listProductLabelFeedbacksUsingGETByMap(
    map: ListProductLabelFeedbacksUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listProductLabelFeedbacksUsingGET(
      map.labelUid,
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      map.type,
      observe,
      reportProgress
    );
  }


    /**
     * List feedback for a label uid
     * 
     * @param labelUid Label id
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param type feedback type
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listProductLabelFeedbacksUsingGET(labelUid: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', type?: 'PRAISE' | 'PROPOSAL' | 'COMPLAINT', observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiProductLabelFeedback>;
    public listProductLabelFeedbacksUsingGET(labelUid: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', type?: 'PRAISE' | 'PROPOSAL' | 'COMPLAINT', observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiProductLabelFeedback>>;
    public listProductLabelFeedbacksUsingGET(labelUid: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', type?: 'PRAISE' | 'PROPOSAL' | 'COMPLAINT', observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiProductLabelFeedback>>;
    public listProductLabelFeedbacksUsingGET(labelUid: string, requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', type?: 'PRAISE' | 'PROPOSAL' | 'COMPLAINT', observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (labelUid === null || labelUid === undefined) {
            throw new Error('Required parameter labelUid was null or undefined when calling listProductLabelFeedbacksUsingGET.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (type !== undefined && type !== null) {
            queryParameters = queryParameters.set('type', <any>type);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiProductLabelFeedback>(`${this.configuration.basePath}/api/public/product/label/feedback/list/${encodeURIComponent(String(labelUid))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'listProductLabelFeedbacksUsingGET')));
        }
        return handle;
    }


  /**
   * Write data to request log for analytics by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logPublicRequestUsingPOSTByMap(
    map: LogPublicRequestUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public logPublicRequestUsingPOSTByMap(
    map: LogPublicRequestUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public logPublicRequestUsingPOSTByMap(
    map: LogPublicRequestUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public logPublicRequestUsingPOSTByMap(
    map: LogPublicRequestUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.logPublicRequestUsingPOST(
      map.ApiLogRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Write data to request log for analytics
     * 
     * @param ApiLogRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logPublicRequestUsingPOST(ApiLogRequest: ApiLogRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public logPublicRequestUsingPOST(ApiLogRequest: ApiLogRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public logPublicRequestUsingPOST(ApiLogRequest: ApiLogRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public logPublicRequestUsingPOST(ApiLogRequest: ApiLogRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiLogRequest === null || ApiLogRequest === undefined) {
            throw new Error('Required parameter ApiLogRequest was null or undefined when calling logPublicRequestUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/public/logRequest`,
            ApiLogRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'logPublicRequestUsingPOST')));
        }
        return handle;
    }

}
