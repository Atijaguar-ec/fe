/*
 * Copyright(c) 2009 - 2019 Abelium d.o.o.
 * Kajuhova 90, 1000 Ljubljana, Slovenia
 * All rights reserved
 * Copyright(c) 1995 - 2018 T-Systems Multimedia Solutions GmbH
 * Riesaer Str. 5, 01129 Dresden
 * All rights reserved.
 *
 * INATrace Services API
 * Abelium INATrace Services API swagger documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the openapi-typescript-angular-generator.
 * https://github.com/alenabelium/openapi-typescript-angular-generator
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { ValidatorFn, Validators } from '@angular/forms';

import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';
import { catchError }                                        from 'rxjs/operators';

import { ApiAdminUserUpdate } from '../model/apiAdminUserUpdate';
import { ApiCreateUserRequest } from '../model/apiCreateUserRequest';
import { ApiDefaultResponse } from '../model/apiDefaultResponse';
import { ApiEmail } from '../model/apiEmail';
import { ApiLoginRequest } from '../model/apiLoginRequest';
import { ApiPaginatedResponseApiUserBase } from '../model/apiPaginatedResponseApiUserBase';
import { ApiResetPasswordRequest } from '../model/apiResetPasswordRequest';
import { ApiResponseApiUser } from '../model/apiResponseApiUser';
import { ApiResponseApiUserGet } from '../model/apiResponseApiUserGet';
import { ApiToken } from '../model/apiToken';
import { ApiUserRole } from '../model/apiUserRole';
import { ApiUserUpdate } from '../model/apiUserUpdate';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/**
 * Namespace for activateUserUsingPOST.
 */
export namespace ActivateUserUsingPOST {
    /**
     * Parameter map for activateUserUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * action
       */
      action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_ADMIN' | 'UNSET_USER_ADMIN' | 'SET_USER_ROLE';
      /**
       * request
       */
      ApiUserRole: ApiUserRole;
    }

    /**
     * Enumeration of all parameters for activateUserUsingPOST.
     */
    export enum Parameters {
      /**
       * action
       */
      action = 'action',
      /**
       * request
       */
      ApiUserRole = 'ApiUserRole'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of activateUserUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ActivateUserUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
      action: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for adminListUsersUsingGET.
 */
export namespace AdminListUsersUsingGET {
    /**
     * Parameter map for adminListUsersUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
      /**
       * Status
       */
      status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED';
      /**
       * User role
       */
      role?: 'USER' | 'SYSTEM_ADMIN';
      /**
       * Email
       */
      email?: string;
      /**
       * Surname
       */
      surname?: string;
      /**
       * Name, surname or email
       */
      query?: string;
    }

    /**
     * Enumeration of all parameters for adminListUsersUsingGET.
     */
    export enum Parameters {
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort',
      /**
       * Status
       */
      status = 'status',
      /**
       * User role
       */
      role = 'role',
      /**
       * Email
       */
      email = 'email',
      /**
       * Surname
       */
      surname = 'surname',
      /**
       * Name, surname or email
       */
      query = 'query'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of adminListUsersUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof AdminListUsersUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      requestType: [
      ],
      limit: [
      ],
      offset: [
      ],
      sortBy: [
      ],
      sort: [
      ],
      status: [
      ],
      role: [
      ],
      email: [
      ],
      surname: [
      ],
      query: [
      ],
    };
}

/**
 * Namespace for adminUpdateProfileUsingPUT.
 */
export namespace AdminUpdateProfileUsingPUT {
    /**
     * Parameter map for adminUpdateProfileUsingPUT.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiAdminUserUpdate: ApiAdminUserUpdate;
    }

    /**
     * Enumeration of all parameters for adminUpdateProfileUsingPUT.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiAdminUserUpdate = 'ApiAdminUserUpdate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of adminUpdateProfileUsingPUT
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof AdminUpdateProfileUsingPUT.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for confirmEmailUsingPOST.
 */
export namespace ConfirmEmailUsingPOST {
    /**
     * Parameter map for confirmEmailUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiToken: ApiToken;
    }

    /**
     * Enumeration of all parameters for confirmEmailUsingPOST.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiToken = 'ApiToken'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of confirmEmailUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ConfirmEmailUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for createUserUsingPOST.
 */
export namespace CreateUserUsingPOST {
    /**
     * Parameter map for createUserUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiCreateUserRequest: ApiCreateUserRequest;
    }

    /**
     * Enumeration of all parameters for createUserUsingPOST.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiCreateUserRequest = 'ApiCreateUserRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of createUserUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof CreateUserUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for getProfileForAdminUsingGET.
 */
export namespace GetProfileForAdminUsingGET {
    /**
     * Parameter map for getProfileForAdminUsingGET.
     */
    export interface PartialParamMap {
      /**
       * id
       */
      id: number;
    }

    /**
     * Enumeration of all parameters for getProfileForAdminUsingGET.
     */
    export enum Parameters {
      /**
       * id
       */
      id = 'id'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getProfileForAdminUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetProfileForAdminUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      id: [
              ['required', Validators.required],
      ],
    };
}

/**
 * Namespace for getProfileForUserUsingGET.
 */
export namespace GetProfileForUserUsingGET {
    /**
     * Parameter map for getProfileForUserUsingGET.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for getProfileForUserUsingGET.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of getProfileForUserUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof GetProfileForUserUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for listUsersUsingGET.
 */
export namespace ListUsersUsingGET {
    /**
     * Parameter map for listUsersUsingGET.
     */
    export interface PartialParamMap {
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType?: 'COUNT' | 'FETCH';
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit?: number;
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset?: number;
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy?: string;
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort?: 'ASC' | 'DESC';
      /**
       * Status
       */
      status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED';
      /**
       * User role
       */
      role?: 'USER' | 'SYSTEM_ADMIN';
      /**
       * Email
       */
      email?: string;
      /**
       * Surname
       */
      surname?: string;
      /**
       * Name, surname or email
       */
      query?: string;
    }

    /**
     * Enumeration of all parameters for listUsersUsingGET.
     */
    export enum Parameters {
      /**
       * Only count, only fetch, or return both values (if null)
       */
      requestType = 'requestType',
      /**
       * Number of records to return. Min: 1, default: 100
       */
      limit = 'limit',
      /**
       * Number of records to skip before returning. Default: 0, min: 0
       */
      offset = 'offset',
      /**
       * Column name to be sorted by, varies for each endpoint, default is id
       */
      sortBy = 'sortBy',
      /**
       * Direction of sorting (ASC or DESC). Default DESC.
       */
      sort = 'sort',
      /**
       * Status
       */
      status = 'status',
      /**
       * User role
       */
      role = 'role',
      /**
       * Email
       */
      email = 'email',
      /**
       * Surname
       */
      surname = 'surname',
      /**
       * Name, surname or email
       */
      query = 'query'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of listUsersUsingGET
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ListUsersUsingGET.PartialParamMap]?: [string, ValidatorFn][]} = {
      requestType: [
      ],
      limit: [
      ],
      offset: [
      ],
      sortBy: [
      ],
      sort: [
      ],
      status: [
      ],
      role: [
      ],
      email: [
      ],
      surname: [
      ],
      query: [
      ],
    };
}

/**
 * Namespace for loginUsingPOST.
 */
export namespace LoginUsingPOST {
    /**
     * Parameter map for loginUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiLoginRequest: ApiLoginRequest;
    }

    /**
     * Enumeration of all parameters for loginUsingPOST.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiLoginRequest = 'ApiLoginRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of loginUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof LoginUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for logoutUsingPOST.
 */
export namespace LogoutUsingPOST {
    /**
     * Parameter map for logoutUsingPOST.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for logoutUsingPOST.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of logoutUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof LogoutUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for refreshAuthenticationUsingPOST.
 */
export namespace RefreshAuthenticationUsingPOST {
    /**
     * Parameter map for refreshAuthenticationUsingPOST.
     */
    export interface PartialParamMap {
    }

    /**
     * Enumeration of all parameters for refreshAuthenticationUsingPOST.
     */
    export enum Parameters {
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of refreshAuthenticationUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RefreshAuthenticationUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for requestResetPasswordUsingPOST.
 */
export namespace RequestResetPasswordUsingPOST {
    /**
     * Parameter map for requestResetPasswordUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiEmail: ApiEmail;
    }

    /**
     * Enumeration of all parameters for requestResetPasswordUsingPOST.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiEmail = 'ApiEmail'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of requestResetPasswordUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof RequestResetPasswordUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for resetPasswordUsingPOST.
 */
export namespace ResetPasswordUsingPOST {
    /**
     * Parameter map for resetPasswordUsingPOST.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiResetPasswordRequest: ApiResetPasswordRequest;
    }

    /**
     * Enumeration of all parameters for resetPasswordUsingPOST.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiResetPasswordRequest = 'ApiResetPasswordRequest'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of resetPasswordUsingPOST
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof ResetPasswordUsingPOST.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}

/**
 * Namespace for updateProfileUsingPUT.
 */
export namespace UpdateProfileUsingPUT {
    /**
     * Parameter map for updateProfileUsingPUT.
     */
    export interface PartialParamMap {
      /**
       * request
       */
      ApiUserUpdate: ApiUserUpdate;
    }

    /**
     * Enumeration of all parameters for updateProfileUsingPUT.
     */
    export enum Parameters {
      /**
       * request
       */
      ApiUserUpdate = 'ApiUserUpdate'
    }

    /**
     * A map of tuples with error name and `ValidatorFn` for each parameter of updateProfileUsingPUT
     * that does not have an own model.
     */
    export const ParamValidators: {[K in keyof UpdateProfileUsingPUT.PartialParamMap]?: [string, ValidatorFn][]} = {
    };
}



@Injectable({
  providedIn: 'root'
})
export class UserControllerService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath != null ? configuration.basePath : (basePath != null ? basePath : this.basePath);
        } else {
            this.configuration.basePath = basePath != null ? basePath : this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



  /**
   * Execute user (status, role) action. Must be an administrator by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public activateUserUsingPOSTByMap(
    map: ActivateUserUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public activateUserUsingPOSTByMap(
    map: ActivateUserUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public activateUserUsingPOSTByMap(
    map: ActivateUserUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public activateUserUsingPOSTByMap(
    map: ActivateUserUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.activateUserUsingPOST(
      map.action,
      map.ApiUserRole,
      observe,
      reportProgress
    );
  }


    /**
     * Execute user (status, role) action. Must be an administrator
     * 
     * @param action action
     * @param ApiUserRole request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activateUserUsingPOST(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_ADMIN' | 'UNSET_USER_ADMIN' | 'SET_USER_ROLE', ApiUserRole: ApiUserRole, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public activateUserUsingPOST(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_ADMIN' | 'UNSET_USER_ADMIN' | 'SET_USER_ROLE', ApiUserRole: ApiUserRole, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public activateUserUsingPOST(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_ADMIN' | 'UNSET_USER_ADMIN' | 'SET_USER_ROLE', ApiUserRole: ApiUserRole, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public activateUserUsingPOST(action: 'VIEW_USER_PROFILE' | 'CREATE_COMPANY' | 'UPDATE_USER_PROFILE' | 'ACTIVATE_USER' | 'CONFIRM_USER_EMAIL' | 'DEACTIVATE_USER' | 'SET_USER_ADMIN' | 'UNSET_USER_ADMIN' | 'SET_USER_ROLE', ApiUserRole: ApiUserRole, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling activateUserUsingPOST.');
        }
        if (ApiUserRole === null || ApiUserRole === undefined) {
            throw new Error('Required parameter ApiUserRole was null or undefined when calling activateUserUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/admin/execute/${encodeURIComponent(String(action))}`,
            ApiUserRole,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'activateUserUsingPOST')));
        }
        return handle;
    }


  /**
   * Lists all users. Must be an administrator. Sorting: email, surname or default by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public adminListUsersUsingGETByMap(
    map: AdminListUsersUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiUserBase>;
  public adminListUsersUsingGETByMap(
    map: AdminListUsersUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
  public adminListUsersUsingGETByMap(
    map: AdminListUsersUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
  public adminListUsersUsingGETByMap(
    map: AdminListUsersUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.adminListUsersUsingGET(
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      map.status,
      map.role,
      map.email,
      map.surname,
      map.query,
      observe,
      reportProgress
    );
  }


    /**
     * Lists all users. Must be an administrator. Sorting: email, surname or default
     * 
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param status Status
     * @param role User role
     * @param email Email
     * @param surname Surname
     * @param query Name, surname or email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminListUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiUserBase>;
    public adminListUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
    public adminListUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
    public adminListUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (surname !== undefined && surname !== null) {
            queryParameters = queryParameters.set('surname', <any>surname);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiUserBase>(`${this.configuration.basePath}/api/user/admin/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'adminListUsersUsingGET')));
        }
        return handle;
    }


  /**
   * Update profile of a user. Must be admin by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public adminUpdateProfileUsingPUTByMap(
    map: AdminUpdateProfileUsingPUT.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public adminUpdateProfileUsingPUTByMap(
    map: AdminUpdateProfileUsingPUT.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public adminUpdateProfileUsingPUTByMap(
    map: AdminUpdateProfileUsingPUT.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public adminUpdateProfileUsingPUTByMap(
    map: AdminUpdateProfileUsingPUT.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.adminUpdateProfileUsingPUT(
      map.ApiAdminUserUpdate,
      observe,
      reportProgress
    );
  }


    /**
     * Update profile of a user. Must be admin
     * 
     * @param ApiAdminUserUpdate request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public adminUpdateProfileUsingPUT(ApiAdminUserUpdate: ApiAdminUserUpdate, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public adminUpdateProfileUsingPUT(ApiAdminUserUpdate: ApiAdminUserUpdate, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public adminUpdateProfileUsingPUT(ApiAdminUserUpdate: ApiAdminUserUpdate, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public adminUpdateProfileUsingPUT(ApiAdminUserUpdate: ApiAdminUserUpdate, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiAdminUserUpdate === null || ApiAdminUserUpdate === undefined) {
            throw new Error('Required parameter ApiAdminUserUpdate was null or undefined when calling adminUpdateProfileUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/admin/profile`,
            ApiAdminUserUpdate,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'adminUpdateProfileUsingPUT')));
        }
        return handle;
    }


  /**
   * Confirms email with a token and logs-in the user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public confirmEmailUsingPOSTByMap(
    map: ConfirmEmailUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public confirmEmailUsingPOSTByMap(
    map: ConfirmEmailUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public confirmEmailUsingPOSTByMap(
    map: ConfirmEmailUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public confirmEmailUsingPOSTByMap(
    map: ConfirmEmailUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.confirmEmailUsingPOST(
      map.ApiToken,
      observe,
      reportProgress
    );
  }


    /**
     * Confirms email with a token and logs-in the user
     * 
     * @param ApiToken request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public confirmEmailUsingPOST(ApiToken: ApiToken, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public confirmEmailUsingPOST(ApiToken: ApiToken, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public confirmEmailUsingPOST(ApiToken: ApiToken, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public confirmEmailUsingPOST(ApiToken: ApiToken, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiToken === null || ApiToken === undefined) {
            throw new Error('Required parameter ApiToken was null or undefined when calling confirmEmailUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/confirm_email`,
            ApiToken,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'confirmEmailUsingPOST')));
        }
        return handle;
    }


  /**
   * Create a new user (not activated) by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createUserUsingPOSTByMap(
    map: CreateUserUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public createUserUsingPOSTByMap(
    map: CreateUserUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public createUserUsingPOSTByMap(
    map: CreateUserUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public createUserUsingPOSTByMap(
    map: CreateUserUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.createUserUsingPOST(
      map.ApiCreateUserRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Create a new user (not activated)
     * 
     * @param ApiCreateUserRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUserUsingPOST(ApiCreateUserRequest: ApiCreateUserRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public createUserUsingPOST(ApiCreateUserRequest: ApiCreateUserRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public createUserUsingPOST(ApiCreateUserRequest: ApiCreateUserRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public createUserUsingPOST(ApiCreateUserRequest: ApiCreateUserRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiCreateUserRequest === null || ApiCreateUserRequest === undefined) {
            throw new Error('Required parameter ApiCreateUserRequest was null or undefined when calling createUserUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/register`,
            ApiCreateUserRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'createUserUsingPOST')));
        }
        return handle;
    }


  /**
   * Get profile of a user. Must be an administrator by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getProfileForAdminUsingGETByMap(
    map: GetProfileForAdminUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiUser>;
  public getProfileForAdminUsingGETByMap(
    map: GetProfileForAdminUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiUser>>;
  public getProfileForAdminUsingGETByMap(
    map: GetProfileForAdminUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiUser>>;
  public getProfileForAdminUsingGETByMap(
    map: GetProfileForAdminUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getProfileForAdminUsingGET(
      map.id,
      observe,
      reportProgress
    );
  }


    /**
     * Get profile of a user. Must be an administrator
     * 
     * @param id id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfileForAdminUsingGET(id: number, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiUser>;
    public getProfileForAdminUsingGET(id: number, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiUser>>;
    public getProfileForAdminUsingGET(id: number, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiUser>>;
    public getProfileForAdminUsingGET(id: number, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProfileForAdminUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiUser>(`${this.configuration.basePath}/api/user/admin/profile/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getProfileForAdminUsingGET')));
        }
        return handle;
    }


  /**
   * Get profile of the currently loged-in user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getProfileForUserUsingGETByMap(
    map: GetProfileForUserUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiResponseApiUserGet>;
  public getProfileForUserUsingGETByMap(
    map: GetProfileForUserUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiResponseApiUserGet>>;
  public getProfileForUserUsingGETByMap(
    map: GetProfileForUserUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiResponseApiUserGet>>;
  public getProfileForUserUsingGETByMap(
    map: GetProfileForUserUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.getProfileForUserUsingGET(
      observe,
      reportProgress
    );
  }


    /**
     * Get profile of the currently loged-in user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProfileForUserUsingGET(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiResponseApiUserGet>;
    public getProfileForUserUsingGET(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiResponseApiUserGet>>;
    public getProfileForUserUsingGET(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiResponseApiUserGet>>;
    public getProfileForUserUsingGET(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiResponseApiUserGet>(`${this.configuration.basePath}/api/user/profile`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'getProfileForUserUsingGET')));
        }
        return handle;
    }


  /**
   * Lists all users in the logged-in user&#39;s companies by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listUsersUsingGETByMap(
    map: ListUsersUsingGET.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiPaginatedResponseApiUserBase>;
  public listUsersUsingGETByMap(
    map: ListUsersUsingGET.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
  public listUsersUsingGETByMap(
    map: ListUsersUsingGET.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
  public listUsersUsingGETByMap(
    map: ListUsersUsingGET.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.listUsersUsingGET(
      map.requestType,
      map.limit,
      map.offset,
      map.sortBy,
      map.sort,
      map.status,
      map.role,
      map.email,
      map.surname,
      map.query,
      observe,
      reportProgress
    );
  }


    /**
     * Lists all users in the logged-in user&#39;s companies
     * 
     * @param requestType Only count, only fetch, or return both values (if null)
     * @param limit Number of records to return. Min: 1, default: 100
     * @param offset Number of records to skip before returning. Default: 0, min: 0
     * @param sortBy Column name to be sorted by, varies for each endpoint, default is id
     * @param sort Direction of sorting (ASC or DESC). Default DESC.
     * @param status Status
     * @param role User role
     * @param email Email
     * @param surname Surname
     * @param query Name, surname or email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiPaginatedResponseApiUserBase>;
    public listUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiPaginatedResponseApiUserBase>>;
    public listUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiPaginatedResponseApiUserBase>>;
    public listUsersUsingGET(requestType?: 'COUNT' | 'FETCH', limit?: number, offset?: number, sortBy?: string, sort?: 'ASC' | 'DESC', status?: 'UNCONFIRMED' | 'CONFIRMED_EMAIL' | 'ACTIVE' | 'DEACTIVATED', role?: 'USER' | 'SYSTEM_ADMIN', email?: string, surname?: string, query?: string, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (requestType !== undefined && requestType !== null) {
            queryParameters = queryParameters.set('requestType', <any>requestType);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }
        if (sortBy !== undefined && sortBy !== null) {
            queryParameters = queryParameters.set('sortBy', <any>sortBy);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters = queryParameters.set('sort', <any>sort);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (email !== undefined && email !== null) {
            queryParameters = queryParameters.set('email', <any>email);
        }
        if (surname !== undefined && surname !== null) {
            queryParameters = queryParameters.set('surname', <any>surname);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.get<ApiPaginatedResponseApiUserBase>(`${this.configuration.basePath}/api/user/list`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'listUsersUsingGET')));
        }
        return handle;
    }


  /**
   * Logs in a user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public loginUsingPOSTByMap(
    map: LoginUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public loginUsingPOSTByMap(
    map: LoginUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public loginUsingPOSTByMap(
    map: LoginUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public loginUsingPOSTByMap(
    map: LoginUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.loginUsingPOST(
      map.ApiLoginRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Logs in a user
     * 
     * @param ApiLoginRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loginUsingPOST(ApiLoginRequest: ApiLoginRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public loginUsingPOST(ApiLoginRequest: ApiLoginRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public loginUsingPOST(ApiLoginRequest: ApiLoginRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public loginUsingPOST(ApiLoginRequest: ApiLoginRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiLoginRequest === null || ApiLoginRequest === undefined) {
            throw new Error('Required parameter ApiLoginRequest was null or undefined when calling loginUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/login`,
            ApiLoginRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'loginUsingPOST')));
        }
        return handle;
    }


  /**
   * Logs out a user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public logoutUsingPOSTByMap(
    map: LogoutUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public logoutUsingPOSTByMap(
    map: LogoutUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public logoutUsingPOSTByMap(
    map: LogoutUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public logoutUsingPOSTByMap(
    map: LogoutUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.logoutUsingPOST(
      observe,
      reportProgress
    );
  }


    /**
     * Logs out a user
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logoutUsingPOST(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public logoutUsingPOST(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public logoutUsingPOST(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public logoutUsingPOST(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/logout`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'logoutUsingPOST')));
        }
        return handle;
    }


  /**
   * Refresh access token by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public refreshAuthenticationUsingPOSTByMap(
    map: RefreshAuthenticationUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public refreshAuthenticationUsingPOSTByMap(
    map: RefreshAuthenticationUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public refreshAuthenticationUsingPOSTByMap(
    map: RefreshAuthenticationUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public refreshAuthenticationUsingPOSTByMap(
    map: RefreshAuthenticationUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.refreshAuthenticationUsingPOST(
      observe,
      reportProgress
    );
  }


    /**
     * Refresh access token
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public refreshAuthenticationUsingPOST(observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public refreshAuthenticationUsingPOST(observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public refreshAuthenticationUsingPOST(observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public refreshAuthenticationUsingPOST(observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/refresh_authentication`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'refreshAuthenticationUsingPOST')));
        }
        return handle;
    }


  /**
   * Request reset password (sends mail with reset link) by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public requestResetPasswordUsingPOSTByMap(
    map: RequestResetPasswordUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public requestResetPasswordUsingPOSTByMap(
    map: RequestResetPasswordUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public requestResetPasswordUsingPOSTByMap(
    map: RequestResetPasswordUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public requestResetPasswordUsingPOSTByMap(
    map: RequestResetPasswordUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.requestResetPasswordUsingPOST(
      map.ApiEmail,
      observe,
      reportProgress
    );
  }


    /**
     * Request reset password (sends mail with reset link)
     * 
     * @param ApiEmail request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestResetPasswordUsingPOST(ApiEmail: ApiEmail, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public requestResetPasswordUsingPOST(ApiEmail: ApiEmail, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public requestResetPasswordUsingPOST(ApiEmail: ApiEmail, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public requestResetPasswordUsingPOST(ApiEmail: ApiEmail, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiEmail === null || ApiEmail === undefined) {
            throw new Error('Required parameter ApiEmail was null or undefined when calling requestResetPasswordUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/request_reset_password`,
            ApiEmail,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'requestResetPasswordUsingPOST')));
        }
        return handle;
    }


  /**
   * Reset password using token and new password by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public resetPasswordUsingPOSTByMap(
    map: ResetPasswordUsingPOST.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public resetPasswordUsingPOSTByMap(
    map: ResetPasswordUsingPOST.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public resetPasswordUsingPOSTByMap(
    map: ResetPasswordUsingPOST.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public resetPasswordUsingPOSTByMap(
    map: ResetPasswordUsingPOST.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.resetPasswordUsingPOST(
      map.ApiResetPasswordRequest,
      observe,
      reportProgress
    );
  }


    /**
     * Reset password using token and new password
     * 
     * @param ApiResetPasswordRequest request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public resetPasswordUsingPOST(ApiResetPasswordRequest: ApiResetPasswordRequest, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public resetPasswordUsingPOST(ApiResetPasswordRequest: ApiResetPasswordRequest, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public resetPasswordUsingPOST(ApiResetPasswordRequest: ApiResetPasswordRequest, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public resetPasswordUsingPOST(ApiResetPasswordRequest: ApiResetPasswordRequest, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiResetPasswordRequest === null || ApiResetPasswordRequest === undefined) {
            throw new Error('Required parameter ApiResetPasswordRequest was null or undefined when calling resetPasswordUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.post<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/reset_password`,
            ApiResetPasswordRequest,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'resetPasswordUsingPOST')));
        }
        return handle;
    }


  /**
   * Update profile of the currently logged in user by map.
   * 
   * @param map parameters map to set partial amount of parameters easily
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateProfileUsingPUTByMap(
    map: UpdateProfileUsingPUT.PartialParamMap,
    observe?: 'body',
    reportProgress?: boolean): Observable<ApiDefaultResponse>;
  public updateProfileUsingPUTByMap(
    map: UpdateProfileUsingPUT.PartialParamMap,
    observe?: 'response',
    reportProgress?: boolean): Observable<HttpResponse<ApiDefaultResponse>>;
  public updateProfileUsingPUTByMap(
    map: UpdateProfileUsingPUT.PartialParamMap,
    observe?: 'events',
    reportProgress?: boolean): Observable<HttpEvent<ApiDefaultResponse>>;
  public updateProfileUsingPUTByMap(
    map: UpdateProfileUsingPUT.PartialParamMap,
    observe: any = 'body',
    reportProgress: boolean = false): Observable<any> {
    return this.updateProfileUsingPUT(
      map.ApiUserUpdate,
      observe,
      reportProgress
    );
  }


    /**
     * Update profile of the currently logged in user
     * 
     * @param ApiUserUpdate request
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProfileUsingPUT(ApiUserUpdate: ApiUserUpdate, observe?: 'body', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<ApiDefaultResponse>;
    public updateProfileUsingPUT(ApiUserUpdate: ApiUserUpdate, observe?: 'response', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpResponse<ApiDefaultResponse>>;
    public updateProfileUsingPUT(ApiUserUpdate: ApiUserUpdate, observe?: 'events', reportProgress?: boolean, additionalHeaders?: Array<Array<string>>): Observable<HttpEvent<ApiDefaultResponse>>;
    public updateProfileUsingPUT(ApiUserUpdate: ApiUserUpdate, observe: any = 'body', reportProgress: boolean = false, additionalHeaders?: Array<Array<string>>): Observable<any> {
        if (ApiUserUpdate === null || ApiUserUpdate === undefined) {
            throw new Error('Required parameter ApiUserUpdate was null or undefined when calling updateProfileUsingPUT.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

            if (additionalHeaders) {
                for(let pair of additionalHeaders) {
                    headers = headers.set(pair[0], pair[1]);
                }
            }

        const handle = this.httpClient.put<ApiDefaultResponse>(`${this.configuration.basePath}/api/user/profile`,
            ApiUserUpdate,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
        if(typeof this.configuration.errorHandler === 'function') {
          return handle.pipe(catchError(err => this.configuration.errorHandler(err, 'updateProfileUsingPUT')));
        }
        return handle;
    }

}
