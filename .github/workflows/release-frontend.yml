name: Release Frontend Image

on:
  push:
    tags:
      - 'v*.*.*'

env:
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: set_image_name_lc
        run: |
          echo "image_name_lc=$(echo '${{ github.repository }}-frontend' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js (for codegen)
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          cache: 'npm'

      - name: Install dependencies (codegen)
        run: npm ci

      - name: Generate API client
        run: npm run generate-api

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.set_image_name_lc.outputs.image_name_lc }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign image with Cosign (keyless)
        env:
          IMAGE: ${{ env.REGISTRY }}/${{ steps.set_image_name_lc.outputs.image_name_lc }}
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          echo "Signing ${IMAGE}@${DIGEST} with Cosign (keyless)"
          cosign sign --yes ${IMAGE}@${DIGEST}

      - name: Generate SBOM (Syft)
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ steps.set_image_name_lc.outputs.image_name_lc }}@${{ steps.build.outputs.digest }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.ref_name }}
          path: sbom.spdx.json
          if-no-files-found: error
          retention-days: 14

      - name: Create GitHub Release and attach SBOM
        uses: softprops/action-gh-release@v1
        with:
          files: sbom.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "Image: ${{ env.REGISTRY }}/${{ steps.set_image_name_lc.outputs.image_name_lc }}" >> $GITHUB_STEP_SUMMARY
          echo "Digest: ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
