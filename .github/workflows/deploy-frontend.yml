name: üöÄ Frontend CI/CD Pipeline

on:
  push:
    branches: [ develop, staging, main ]
    paths:
      - 'fe/**'
      - 'deploy/frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches: [ develop, staging, main ]
    paths:
      - 'fe/**'
      - 'deploy/frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - test
        - prod
      company:
        description: 'Target company (for test/prod)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unocace
        - fortaleza
        - dufer

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/inatrace-frontend
  NODE_VERSION: '14'

jobs:
  quality:
    name: üîç Code Quality & Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./fe
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: fe/package-lock.json

      - name: üì• Install dependencies
        run: npm ci

      - name: üîç Lint code
        run: npm run lint
        continue-on-error: true

      - name: üß™ Run unit tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage

      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./fe/coverage
          fail_ci_if_error: false

  build:
    name: üèóÔ∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate metadata
        id: meta
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            VERSION=$(grep -m1 '"version":' fe/package.json | sed -E 's/.*"([0-9.]+)".*/\1/')
            TAG="v${VERSION}"
          elif [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
            TAG="test-${GITHUB_SHA::7}"
          else
            TAG="dev-${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "üè∑Ô∏è Generated tag: $TAG"

      - name: üîê Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./fe
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_OPTIMIZATION=true

      - name: üîí Sign image with Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: dev
      url: http://inatrace.atijaguar.com
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.DEV_PORT || 22 }}
          script: |
            mkdir -p /srv/inatrace/frontend/dev

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.DEV_PORT || 22 }}
          source: "deploy/frontend/dev/docker-compose.yml"
          target: "/srv/inatrace/frontend/dev"

      - name: üöÄ Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          port: ${{ secrets.DEV_PORT || 22 }}
          script: |
            set -e
            echo "üöÄ Starting deployment to Development..."

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            cd /srv/inatrace/frontend/dev

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs.image-tag }}"

            # Ensure required networks exist
            docker network inspect inatrace-frontend-network >/dev/null 2>&1 || docker network create inatrace-frontend-network
            docker network inspect inatrace-backend-network >/dev/null 2>&1 || docker network create inatrace-backend-network

            docker compose pull
            docker compose up -d --remove-orphans

            sleep 10
            if curl -f http://localhost:8081/health; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Health check failed"
              exit 1
            fi

  deploy-test:
    name: üß™ Deploy to Test Environments
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    strategy:
      matrix:
        company: [unocace, fortaleza, dufer]
    environment:
      name: test-${{ matrix.company }}
      url: https://inatrace-test.${{ matrix.company == 'unocace' && 'unocace.com' || matrix.company == 'fortaleza' && 'fortalezadelvalle.org' || 'empacadoradufer.com' }}
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists (${{ matrix.company }})
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets[format('TEST_{0}_HOST', upper(matrix.company))] }}
          username: ${{ secrets[format('TEST_{0}_USER', upper(matrix.company))] }}
          key: ${{ secrets[format('TEST_{0}_SSH_KEY', upper(matrix.company))] }}
          port: ${{ secrets[format('TEST_{0}_PORT', upper(matrix.company))] || 22 }}
          script: |
            mkdir -p /srv/inatrace/frontend/test/${{ matrix.company }}

      - name: üì§ Upload docker-compose.yml (${{ matrix.company }})
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('TEST_{0}_HOST', upper(matrix.company))] }}
          username: ${{ secrets[format('TEST_{0}_USER', upper(matrix.company))] }}
          key: ${{ secrets[format('TEST_{0}_SSH_KEY', upper(matrix.company))] }}
          port: ${{ secrets[format('TEST_{0}_PORT', upper(matrix.company))] || 22 }}
          source: "deploy/frontend/test/${{ matrix.company }}/docker-compose.yml"
          target: "/srv/inatrace/frontend/test/${{ matrix.company }}"

      - name: üß™ Deploy to ${{ matrix.company }} Test
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets[format('TEST_{0}_HOST', upper(matrix.company))] }}
          username: ${{ secrets[format('TEST_{0}_USER', upper(matrix.company))] }}
          key: ${{ secrets[format('TEST_{0}_SSH_KEY', upper(matrix.company))] }}
          port: ${{ secrets[format('TEST_{0}_PORT', upper(matrix.company))] || 22 }}
          script: |
            set -e
            echo "üß™ Starting deployment to ${{ matrix.company }} Test..."

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            cd /srv/inatrace/frontend/test/${{ matrix.company }}

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs.image-tag }}"
            export COMPANY="${{ matrix.company }}"

            # Ensure required networks exist
            docker network inspect inatrace-frontend-${{ matrix.company }}-network >/dev/null 2>&1 || docker network create inatrace-frontend-${{ matrix.company }}-network
            docker network inspect inatrace-backend-${{ matrix.company }}-network >/dev/null 2>&1 || docker network create inatrace-backend-${{ matrix.company }}-network

            docker compose pull
            docker compose up -d --remove-orphans

            sleep 15
            HEALTH_URL="https://inatrace-test.${{ matrix.company == 'unocace' && 'unocace.com' || matrix.company == 'fortaleza' && 'fortalezadelvalle.org' || 'empacadoradufer.com' }}/health"
            if curl -f "$HEALTH_URL"; then
              echo "‚úÖ Deployment to ${{ matrix.company }} successful!"
            else
              echo "‚ùå Health check failed for ${{ matrix.company }}"
              exit 1
            fi

  deploy-prod:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        company: [unocace, fortaleza, dufer]
    environment:
      name: prod-${{ matrix.company }}
      url: https://inatrace.${{ matrix.company == 'unocace' && 'unocace.com' || matrix.company == 'fortaleza' && 'fortalezadelvalle.org' || 'empacadoradufer.com' }}
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists (${{ matrix.company }})
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets[format('PROD_{0}_HOST', upper(matrix.company))] }}
          username: ${{ secrets[format('PROD_{0}_USER', upper(matrix.company))] }}
          key: ${{ secrets[format('PROD_{0}_SSH_KEY', upper(matrix.company))] }}
          port: ${{ secrets[format('PROD_{0}_PORT', upper(matrix.company))] || 22 }}
          script: |
            mkdir -p /srv/inatrace/frontend/prod/${{ matrix.company }}

      - name: üì§ Upload docker-compose.yml (${{ matrix.company }})
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets[format('PROD_{0}_HOST', upper(matrix.company))] }}
          username: ${{ secrets[format('PROD_{0}_USER', upper(matrix.company))] }}
          key: ${{ secrets[format('PROD_{0}_SSH_KEY', upper(matrix.company))] }}
          port: ${{ secrets[format('PROD_{0}_PORT', upper(matrix.company))] || 22 }}
          source: "deploy/frontend/prod/${{ matrix.company }}/docker-compose.yml"
          target: "/srv/inatrace/frontend/prod/${{ matrix.company }}"

      - name: üè≠ Deploy to ${{ matrix.company }} Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets[format('PROD_{0}_HOST', upper(matrix.company))] }}
          username: ${{ secrets[format('PROD_{0}_USER', upper(matrix.company))] }}
          key: ${{ secrets[format('PROD_{0}_SSH_KEY', upper(matrix.company))] }}
          port: ${{ secrets[format('PROD_{0}_PORT', upper(matrix.company))] || 22 }}
          script: |
            set -e
            echo "üè≠ Starting deployment to ${{ matrix.company }} Production..."

            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

            cd /srv/inatrace/frontend/prod/${{ matrix.company }}

            if docker compose ps -q inatrace-frontend; then
              echo "üì¶ Creating backup..."
              docker tag $(docker compose images -q inatrace-frontend) ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
            fi

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs.image-tag }}"
            export COMPANY="${{ matrix.company }}"

            # Ensure required networks exist
            docker network inspect inatrace-frontend-${{ matrix.company }}-network >/dev/null 2>&1 || docker network create inatrace-frontend-${{ matrix.company }}-network
            docker network inspect inatrace-backend-${{ matrix.company }}-network >/dev/null 2>&1 || docker network create inatrace-backend-${{ matrix.company }}-network

            docker compose pull
            docker compose up -d --remove-orphans

            echo "üîç Performing health checks..."
            HEALTH_URL="https://inatrace.${{ matrix.company == 'unocace' && 'unocace.com' || matrix.company == 'fortaleza' && 'fortalezadelvalle.org' || 'empacadoradufer.com' }}/health"

            for i in {1..5}; do
              sleep 10
              if curl -f "$HEALTH_URL"; then
                echo "‚úÖ Production deployment to ${{ matrix.company }} successful!"
                exit 0
              fi
              echo "‚è≥ Health check attempt $i/5 failed, retrying..."
            done

            echo "‚ùå Health check failed after 5 attempts"
            echo "üîÑ Rolling back..."
            docker compose down
            docker tag ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d)* ${{ env.IMAGE_NAME }}:rollback
            export TAG=rollback
            docker compose up -d
            exit 1

  notify:
    name: üìä Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-test, deploy-prod]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-test.result != 'skipped' || needs.deploy-prod.result != 'skipped')
    steps:
      - name: üìä Send notification
        run: |
          if [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "‚úÖ Development deployment successful"
          fi
          if [[ "${{ needs.deploy-test.result }}" == "success" ]]; then
            echo "‚úÖ Test environments deployment successful"
          fi
          if [[ "${{ needs.deploy-prod.result }}" == "success" ]]; then
            echo "‚úÖ Production deployment successful"
          fi

          # Aqu√≠ puedes agregar notificaciones a Slack, Teams, etc.
