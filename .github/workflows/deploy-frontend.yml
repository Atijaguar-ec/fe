name: Deploy Frontend to Hetzner

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (for codegen)
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          cache: 'npm'

      - name: Install dependencies (codegen)
        run: npm ci

      - name: Generate API client
        run: npm run generate-api

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILD_OPTIMIZATION=false

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            cd /opt/inatrace/frontend
            
            # Compose variables to match the image built in CI
            export IMAGE_NAME=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            export TAG=latest

            # Pull latest image for compose
            docker-compose pull

            # Recreate services with the new image
            docker-compose down
            docker-compose up -d --force-recreate --remove-orphans
            
            # Health check with retry
            for i in {1..3}; do
              sleep 10
              if curl -f http://localhost:80 > /dev/null 2>&1; then
                echo "Health check passed"
                break
              elif [ $i -eq 3 ]; then
                echo "Health check failed after 3 attempts, rolling back"
                docker-compose logs --tail=50
                docker-compose down
                docker-compose up -d --force-recreate
                exit 1
              else
                echo "Health check attempt $i failed, retrying..."
              fi
            done
            
            # Cleanup old images and containers
            docker system prune -f --volumes
            docker image prune -af --filter="until=24h"
