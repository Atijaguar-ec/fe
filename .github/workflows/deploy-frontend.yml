name: Deploy Frontend to Hetzner

on:
  push:
    branches:
      - main
      - develop
      - 'v*'
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm run test -- --watch=false --browsers=ChromeHeadless

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_name_lc: ${{ steps.set_image_name_lc.outputs.image_name_lc }}
      image_digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Compute lowercase image name
        id: set_image_name_lc
        run: |
          echo "image_name_lc=$(echo '${{ github.repository }}-frontend' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Setup Node.js (for codegen)
        uses: actions/setup-node@v4
        with:
          node-version: '14'
          cache: 'npm'

      - name: Install dependencies (codegen)
        run: npm ci

      - name: Generate API client
        env:
          SWAGGER_DOCS_HOST: ${{ secrets.BACKEND_API_ORIGIN }}/v3/api-docs
        run: npm run generate-api

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          platforms: linux/amd64
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.set_image_name_lc.outputs.image_name_lc }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BUILD_OPTIMIZATION=false

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            set -euo pipefail
            # Directorio de despliegue del FE en el servidor
            cd /opt/inatrace/frontend
            
            # Compose variables to match the image built in CI
            export IMAGE_NAME=${{ env.REGISTRY }}/${{ needs.build.outputs.image_name_lc }}
            export TAG=latest

            # Optional: login to GHCR if image is private (requires secrets)
            if [ -n "${{ secrets.GHCR_USERNAME }}" ] && [ -n "${{ secrets.GHCR_TOKEN }}" ]; then
              echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin || true
            fi

            # Pull exact image by digest (reproducible) and retag as :latest for docker-compose
            DIGEST='${{ needs.build.outputs.image_digest }}'
            echo "Pulling image by digest: ${IMAGE_NAME}@${DIGEST}"
            docker pull ${IMAGE_NAME}@${DIGEST}
            docker tag ${IMAGE_NAME}@${DIGEST} ${IMAGE_NAME}:${TAG}

            # Compose will use the freshly tagged local image; skip compose pull
            echo "Using locally tagged image ${IMAGE_NAME}:${TAG}"

            # Escribir/actualizar .ci/.env con parámetros del despliegue (multiempresa)
            mkdir -p .ci
            cat > .ci/.env << EOF
            IMAGE_NAME=${IMAGE_NAME}
            TAG=${TAG}
            FRONTEND_DOMAIN=${{ secrets.FRONTEND_DOMAIN }}
            LETSENCRYPT_EMAIL=${{ secrets.LETSENCRYPT_EMAIL }}
            EOF

            # Preflight: evitar conflicto por nombre de contenedor si quedó de corridas previas
            docker ps -a --format '{{.Names}}' | grep -q '^inatrace-fe$' && docker rm -f inatrace-fe || true

            # Asegurar red externa si es requerida por el compose
            docker network create inatrace-backend-network || true

            # Levantar/recrear solo los servicios necesarios sin bajar otros stacks
            docker compose --env-file .ci/.env -f .ci/docker-compose.https.yml up -d --force-recreate --remove-orphans
            
            # Health check with retry
            for i in {1..3}; do
              sleep 10
              if curl -fsS https://${{ secrets.FRONTEND_DOMAIN }}/ > /dev/null 2>&1; then
                echo "Health check passed"
                break
              elif [ $i -eq 3 ]; then
                echo "Health check failed after 3 attempts, rolling back"
                docker compose --env-file .ci/.env -f .ci/docker-compose.https.yml logs --tail=100 || true
                # Intento de reinicio simple del FE sin tumbar proxy (usar nombre del servicio del compose)
                docker compose --env-file .ci/.env -f .ci/docker-compose.https.yml up -d --force-recreate inatrace-frontend
                exit 1
              else
                echo "Health check attempt $i failed, retrying..."
              fi
            done
            
            # Cleanup old images and containers
            docker system prune -f --volumes
            docker image prune -af --filter="until=24h"
