name: üöÄ Frontend CI/CD Pipeline

on:
  push:
    branches: [ develop, staging, main ]
    paths:
      - 'fe/**'
      - 'deploy/frontend/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches: [ develop, staging, main ]
    paths:
      - 'fe/**'
      - 'deploy/frontend/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      company:
        description: 'Target company (for test/prod)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - unocace
          - fortaleza
          - dufer

env:
  IMAGE_NAME: atijaguar-ec/inatrace-frontend
  NODE_VERSION: '14'

jobs:
  quality:
    name: üîç Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4


      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint
        continue-on-error: true

      - name: Run unit tests
        run: npm run test -- --watch=false --progress=false

      - name: üìä Upload coverage reports
        if: ${{ false }}
        uses: codecov/codecov-action@v3
        with:
          files: fe/coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: üèóÔ∏è Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: quality
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üè∑Ô∏è Generate metadata
        id: meta
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            VERSION=$(grep -m1 '"version":' package.json | sed -E 's/.*"([0-9.]+)".*/\1/')
            TAG="v${VERSION}"
          elif [[ "${GITHUB_REF_NAME}" == "staging" ]]; then
            TAG="test-${GITHUB_SHA::7}"
          else
            TAG="dev-${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "üè∑Ô∏è Generated tag: $TAG"

      

      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üèóÔ∏è Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_OPTIMIZATION=true

      - name: üì¶ Save Docker image as tar
        run: docker save ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }} -o image.tar

      - name: üì§ Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe-image
          path: image.tar
          if-no-files-found: error

      - name: üîí Sign image with Cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: 'v2.1.1'

  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: dev
      url: http://inatrace.atijaguar.com
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            mkdir -p /srv/inatrace/frontend/dev

      - name: üìù Generate docker-compose.yml
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            inatrace-frontend:
              image: ${IMAGE_NAME}:${TAG}
              container_name: inatrace-frontend
              ports:
                - "8081:80"
              networks:
                - inatrace-frontend-network
              restart: always
          networks:
            inatrace-frontend-network:
              external: true
          EOF

      - name: üì• Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/srv/inatrace/frontend/dev"

      - name: üì§ Upload image tar
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "image.tar"
          target: "/srv/inatrace/frontend/dev"

      - name: üöÄ Deploy to Development Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USER }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            set -e
            echo "üöÄ Starting deployment to Development..."

            cd /srv/inatrace/frontend/dev

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs['image-tag'] }}"

            docker load -i image.tar

            # Ensure required networks exist
            docker network inspect inatrace-frontend-network >/dev/null 2>&1 || docker network create inatrace-frontend-network
            docker network inspect inatrace-backend-network >/dev/null 2>&1 || docker network create inatrace-backend-network

            docker compose up -d --remove-orphans

            sleep 10
            if curl -f http://localhost:8081/health; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Health check failed"
              exit 1
            fi

  deploy-test-unocace:
    name: üß™ Deploy to Unocace Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment:
      name: test-unocace
      url: https://inatrace-test.unocace.com
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: Preflight - validate required secrets (UNOCACE)
        run: |
          missing=0
          [ -z "${{ secrets.TEST_UNOCACE_HOST }}" ] && echo "Missing secret: TEST_UNOCACE_HOST" && missing=1
          [ -z "${{ secrets.TEST_UNOCACE_USER }}" ] && echo "Missing secret: TEST_UNOCACE_USER" && missing=1
          [ -z "${{ secrets.TEST_UNOCACE_PASSWORD }}" ] && echo "Missing secret: TEST_UNOCACE_PASSWORD" && missing=1
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_UNOCACE_HOST }}
          username: ${{ secrets.TEST_UNOCACE_USER }}
          password: ${{ secrets.TEST_UNOCACE_PASSWORD }}
          script: |
            mkdir -p /opt/inatrace/deploy/frontend/test/unocace

      - name: üì§ Upload docker-compose.yml from repo (unocace)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_UNOCACE_HOST }}
          username: ${{ secrets.TEST_UNOCACE_USER }}
          password: ${{ secrets.TEST_UNOCACE_PASSWORD }}
          source: "deploy/frontend/test/unocace/docker-compose.yml"
          target: "/opt/inatrace/deploy/frontend/test/unocace"

      - name: üì• Download image artifact (unocace)
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      

      - name: üì§ Upload image tar (unocace)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_UNOCACE_HOST }}
          username: ${{ secrets.TEST_UNOCACE_USER }}
          password: ${{ secrets.TEST_UNOCACE_PASSWORD }}
          source: "image.tar"
          target: "/opt/inatrace/deploy/frontend/test/unocace"

      - name: üß™ Deploy to Unocace Test
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_UNOCACE_HOST }}
          username: ${{ secrets.TEST_UNOCACE_USER }}
          password: ${{ secrets.TEST_UNOCACE_PASSWORD }}
          script: |
            set -e
            echo "üß™ Starting deployment to Unocace Test..."

            cd /opt/inatrace/deploy/frontend/test/unocace

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs['image-tag'] }}"
            export COMPANY="unocace"

            docker load -i image.tar

            # Ensure required networks exist
            docker network inspect inatrace-frontend-unocace-network >/dev/null 2>&1 || docker network create inatrace-frontend-unocace-network
            docker network inspect inatrace-backend-unocace-network >/dev/null 2>&1 || docker network create inatrace-backend-unocace-network

            # skipped: docker-compose pull (image is loaded locally)
            docker-compose up -d --remove-orphans

            sleep 15
            if curl -f "https://inatrace-test.unocace.com/health"; then
              echo "‚úÖ Deployment to Unocace successful!"
            else
              echo "‚ùå Health check failed for Unocace"
              exit 1
            fi

  deploy-test-fortaleza:
    name: üß™ Deploy to Fortaleza Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging' && vars.DEPLOY_TEST_FORTALEZA == 'true'
    environment:
      name: test-fortaleza
      url: https://inatrace-test.fortalezadelvalle.org
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_FORTALEZA_HOST }}
          username: ${{ secrets.TEST_FORTALEZA_USER }}
          key: ${{ secrets.TEST_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.TEST_FORTALEZA_PORT || '22' }}
          script: |
            mkdir -p /srv/inatrace/frontend/test/fortaleza

      - name: üìù Generate docker-compose.yml (fortaleza)
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            inatrace-frontend:
              image: ${IMAGE_NAME}:${TAG}
              container_name: inatrace-frontend
              ports:
                - "8081:80"
              networks:
                - inatrace-frontend-fortaleza-network
              restart: always
          networks:
            inatrace-frontend-fortaleza-network:
              external: true
          EOF

      - name: üì• Download image artifact (fortaleza)
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_FORTALEZA_HOST }}
          username: ${{ secrets.TEST_FORTALEZA_USER }}
          key: ${{ secrets.TEST_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.TEST_FORTALEZA_PORT || '22' }}
          source: "docker-compose.yml"
          target: "/srv/inatrace/frontend/test/fortaleza"

      - name: üì§ Upload image tar (fortaleza)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_FORTALEZA_HOST }}
          username: ${{ secrets.TEST_FORTALEZA_USER }}
          key: ${{ secrets.TEST_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.TEST_FORTALEZA_PORT || '22' }}
          source: "image.tar"
          target: "/srv/inatrace/frontend/test/fortaleza"

      - name: üß™ Deploy to Fortaleza Test
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_FORTALEZA_HOST }}
          username: ${{ secrets.TEST_FORTALEZA_USER }}
          key: ${{ secrets.TEST_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.TEST_FORTALEZA_PORT || '22' }}
          script: |
            set -e
            echo "üß™ Starting deployment to Fortaleza Test..."

            cd /srv/inatrace/frontend/test/fortaleza

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs['image-tag'] }}"
            export COMPANY="fortaleza"

            docker load -i image.tar

            # Ensure required networks exist
            docker network inspect inatrace-frontend-fortaleza-network >/dev/null 2>&1 || docker network create inatrace-frontend-fortaleza-network
            docker network inspect inatrace-backend-fortaleza-network >/dev/null 2>&1 || docker network create inatrace-backend-fortaleza-network

            docker compose pull
            docker compose up -d --remove-orphans

            sleep 15
            if curl -f "https://inatrace-test.fortalezadelvalle.org/health"; then
              echo "‚úÖ Deployment to Fortaleza successful!"
            else
              echo "‚ùå Health check failed for Fortaleza"
              exit 1
            fi

  deploy-test-dufer:
    name: üß™ Deploy to Dufer Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging' && vars.DEPLOY_TEST_DUFER == 'true'
    environment:
      name: test-dufer
      url: https://inatrace-test.empacadoradufer.com
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_DUFER_HOST }}
          username: ${{ secrets.TEST_DUFER_USER }}
          key: ${{ secrets.TEST_DUFER_SSH_KEY }}
          port: ${{ secrets.TEST_DUFER_PORT || '22' }}
          script: |
            mkdir -p /srv/inatrace/frontend/test/dufer

      - name: üìù Generate docker-compose.yml (dufer)
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            inatrace-frontend:
              image: ${IMAGE_NAME}:${TAG}
              container_name: inatrace-frontend
              ports:
                - "8081:80"
              networks:
                - inatrace-frontend-dufer-network
              restart: always
          networks:
            inatrace-frontend-dufer-network:
              external: true
          EOF

      - name: üì• Download image artifact (dufer)
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_DUFER_HOST }}
          username: ${{ secrets.TEST_DUFER_USER }}
          key: ${{ secrets.TEST_DUFER_SSH_KEY }}
          port: ${{ secrets.TEST_DUFER_PORT || '22' }}
          source: "docker-compose.yml"
          target: "/srv/inatrace/frontend/test/dufer"

      - name: üì§ Upload image tar (dufer)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TEST_DUFER_HOST }}
          username: ${{ secrets.TEST_DUFER_USER }}
          key: ${{ secrets.TEST_DUFER_SSH_KEY }}
          port: ${{ secrets.TEST_DUFER_PORT || '22' }}
          source: "image.tar"
          target: "/srv/inatrace/frontend/test/dufer"

      - name: üß™ Deploy to Dufer Test
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.TEST_DUFER_HOST }}
          username: ${{ secrets.TEST_DUFER_USER }}
          key: ${{ secrets.TEST_DUFER_SSH_KEY }}
          port: ${{ secrets.TEST_DUFER_PORT || '22' }}
          script: |
            set -e
            echo "üß™ Starting deployment to Dufer Test..."

            cd /srv/inatrace/frontend/test/dufer

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs['image-tag'] }}"
            export COMPANY="dufer"

            docker load -i image.tar

            # Ensure required networks exist
            docker network inspect inatrace-frontend-dufer-network >/dev/null 2>&1 || docker network create inatrace-frontend-dufer-network
            docker network inspect inatrace-backend-dufer-network >/dev/null 2>&1 || docker network create inatrace-backend-dufer-network

            docker compose pull
            docker compose up -d --remove-orphans

            sleep 15
            if curl -f "https://inatrace-test.empacadoradufer.com/health"; then
              echo "‚úÖ Deployment to Dufer successful!"
            else
              echo "‚ùå Health check failed for Dufer"
              exit 1
            fi

  deploy-prod-unocace:
    name: üè≠ Deploy to Unocace Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod-unocace
      url: https://inatrace.unocace.com
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_UNOCACE_HOST }}
          username: ${{ secrets.PROD_UNOCACE_USER }}
          key: ${{ secrets.PROD_UNOCACE_SSH_KEY }}
          port: ${{ secrets.PROD_UNOCACE_PORT || '22' }}
          script: |
            mkdir -p /srv/inatrace/frontend/prod/unocace

      - name: üìù Generate docker-compose.yml (prod unocace)
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            inatrace-frontend:
              image: ${IMAGE_NAME}:${TAG}
              container_name: inatrace-frontend
              pull_policy: never
              ports:
                - "8081:80"
              networks:
                - inatrace-frontend-unocace-network
              restart: always
          networks:
            inatrace-frontend-unocace-network:
              external: true
          EOF

      - name: üì• Download image artifact (prod unocace)
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_UNOCACE_HOST }}
          username: ${{ secrets.PROD_UNOCACE_USER }}
          key: ${{ secrets.PROD_UNOCACE_SSH_KEY }}
          port: ${{ secrets.PROD_UNOCACE_PORT || '22' }}
          source: "docker-compose.yml"
          target: "/srv/inatrace/frontend/prod/unocace"

      - name: üì§ Upload image tar (prod unocace)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_UNOCACE_HOST }}
          username: ${{ secrets.PROD_UNOCACE_USER }}
          key: ${{ secrets.PROD_UNOCACE_SSH_KEY }}
          port: ${{ secrets.PROD_UNOCACE_PORT || '22' }}
          source: "image.tar"
          target: "/srv/inatrace/frontend/prod/unocace"

      - name: üè≠ Deploy to Unocace Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_UNOCACE_HOST }}
          username: ${{ secrets.PROD_UNOCACE_USER }}
          key: ${{ secrets.PROD_UNOCACE_SSH_KEY }}
          port: ${{ secrets.PROD_UNOCACE_PORT || '22' }}
          script: |
            set -e
            echo "üè≠ Starting deployment to Unocace Production..."

            cd /srv/inatrace/frontend/prod/unocace

            if docker compose ps -q inatrace-frontend; then
              echo "üì¶ Creating backup..."
              docker tag $(docker compose images -q inatrace-frontend) ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
            fi

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs['image-tag'] }}"
            export COMPANY="unocace"

            # Ensure required networks exist
            docker network inspect inatrace-frontend-unocace-network >/dev/null 2>&1 || docker network create inatrace-frontend-unocace-network
            docker network inspect inatrace-backend-unocace-network >/dev/null 2>&1 || docker network create inatrace-backend-unocace-network

            docker compose pull
            docker compose up -d --remove-orphans

            echo "üîç Performing health checks..."
            for i in {1..5}; do
              sleep 10
              if curl -f "https://inatrace.unocace.com/health"; then
                echo "‚úÖ Production deployment to Unocace successful!"
                exit 0
              fi
              echo "‚è≥ Health check attempt $i/5 failed, retrying..."
            done

            echo "‚ùå Health check failed after 5 attempts"
            echo "üîÑ Rolling back..."
            docker compose down
            docker tag ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d)* ${{ env.IMAGE_NAME }}:rollback
            export TAG=rollback
            docker compose up -d
            exit 1

  deploy-prod-fortaleza:
    name: üè≠ Deploy to Fortaleza Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod-fortaleza
      url: https://inatrace.fortalezadelvalle.org
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_FORTALEZA_HOST }}
          username: ${{ secrets.PROD_FORTALEZA_USER }}
          key: ${{ secrets.PROD_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.PROD_FORTALEZA_PORT || '22' }}
          script: |
            mkdir -p /srv/inatrace/frontend/prod/fortaleza

      - name: üìù Generate docker-compose.yml (prod fortaleza)
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            inatrace-frontend:
              image: ${IMAGE_NAME}:${TAG}
              container_name: inatrace-frontend
              pull_policy: never
              ports:
                - "8081:80"
              networks:
                - inatrace-frontend-fortaleza-network
              restart: always
          networks:
            inatrace-frontend-fortaleza-network:
              external: true
          EOF

      - name: üì• Download image artifact (prod fortaleza)
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_FORTALEZA_HOST }}
          username: ${{ secrets.PROD_FORTALEZA_USER }}
          key: ${{ secrets.PROD_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.PROD_FORTALEZA_PORT || '22' }}
          source: "docker-compose.yml"
          target: "/srv/inatrace/frontend/prod/fortaleza"

      - name: üì§ Upload image tar (prod fortaleza)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_FORTALEZA_HOST }}
          username: ${{ secrets.PROD_FORTALEZA_USER }}
          key: ${{ secrets.PROD_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.PROD_FORTALEZA_PORT || '22' }}
          source: "image.tar"
          target: "/srv/inatrace/frontend/prod/fortaleza"

      - name: üè≠ Deploy to Fortaleza Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_FORTALEZA_HOST }}
          username: ${{ secrets.PROD_FORTALEZA_USER }}
          key: ${{ secrets.PROD_FORTALEZA_SSH_KEY }}
          port: ${{ secrets.PROD_FORTALEZA_PORT || '22' }}
          script: |
            set -e
            echo "üè≠ Starting deployment to Fortaleza Production..."

            cd /srv/inatrace/frontend/prod/fortaleza

            if docker compose ps -q inatrace-frontend; then
              echo "üì¶ Creating backup..."
              docker tag $(docker compose images -q inatrace-frontend) ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
            fi

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs.image-tag }}"
            export COMPANY="fortaleza"

            # Ensure required networks exist
            docker network inspect inatrace-frontend-fortaleza-network >/dev/null 2>&1 || docker network create inatrace-frontend-fortaleza-network
            docker network inspect inatrace-backend-fortaleza-network >/dev/null 2>&1 || docker network create inatrace-backend-fortaleza-network

            docker compose pull
            docker compose up -d --remove-orphans

            echo "üîç Performing health checks..."
            for i in {1..5}; do
              sleep 10
              if curl -f "https://inatrace.fortalezadelvalle.org/health"; then
                echo "‚úÖ Production deployment to Fortaleza successful!"
                exit 0
              fi
              echo "‚è≥ Health check attempt $i/5 failed, retrying..."
            done

            echo "‚ùå Health check failed after 5 attempts"
            echo "üîÑ Rolling back..."
            docker compose down
            docker tag ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d)* ${{ env.IMAGE_NAME }}:rollback
            export TAG=rollback
            docker compose up -d
            exit 1

  deploy-prod-dufer:
    name: üè≠ Deploy to Dufer Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: prod-dufer
      url: https://inatrace.empacadoradufer.com
    steps:
      - name: üì• Checkout deployment configs
        uses: actions/checkout@v4

      - name: üìÅ Ensure remote directory exists
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DUFER_HOST }}
          username: ${{ secrets.PROD_DUFER_USER }}
          key: ${{ secrets.PROD_DUFER_SSH_KEY }}
          port: ${{ secrets.PROD_DUFER_PORT || '22' }}
          script: |
            mkdir -p /srv/inatrace/frontend/prod/dufer

      - name: üìù Generate docker-compose.yml (prod dufer)
        run: |
          cat > docker-compose.yml <<'EOF'
          version: '3.8'
          services:
            inatrace-frontend:
              image: ${IMAGE_NAME}:${TAG}
              container_name: inatrace-frontend
              pull_policy: never
              ports:
                - "8081:80"
              networks:
                - inatrace-frontend-dufer-network
              restart: always
          networks:
            inatrace-frontend-dufer-network:
              external: true
          EOF

      - name: üì• Download image artifact (prod dufer)
        uses: actions/download-artifact@v4
        with:
          name: fe-image
          path: .

      - name: üì§ Upload docker-compose.yml
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_DUFER_HOST }}
          username: ${{ secrets.PROD_DUFER_USER }}
          key: ${{ secrets.PROD_DUFER_SSH_KEY }}
          port: ${{ secrets.PROD_DUFER_PORT || '22' }}
          source: "docker-compose.yml"
          target: "/srv/inatrace/frontend/prod/dufer"

      - name: üì§ Upload image tar (prod dufer)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.PROD_DUFER_HOST }}
          username: ${{ secrets.PROD_DUFER_USER }}
          key: ${{ secrets.PROD_DUFER_SSH_KEY }}
          port: ${{ secrets.PROD_DUFER_PORT || '22' }}
          source: "image.tar"
          target: "/srv/inatrace/frontend/prod/dufer"

      - name: üè≠ Deploy to Dufer Production
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_DUFER_HOST }}
          username: ${{ secrets.PROD_DUFER_USER }}
          key: ${{ secrets.PROD_DUFER_SSH_KEY }}
          port: ${{ secrets.PROD_DUFER_PORT || '22' }}
          script: |
            set -e
            echo "üè≠ Starting deployment to Dufer Production..."

            cd /srv/inatrace/frontend/prod/dufer

            if docker compose ps -q inatrace-frontend; then
              echo "üì¶ Creating backup..."
              docker tag $(docker compose images -q inatrace-frontend) ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
            fi

            export IMAGE_NAME="${{ env.IMAGE_NAME }}"
            export TAG="${{ needs.build.outputs.image-tag }}"
            export COMPANY="dufer"

            # Ensure required networks exist
            docker network inspect inatrace-frontend-dufer-network >/dev/null 2>&1 || docker network create inatrace-frontend-dufer-network
            docker network inspect inatrace-backend-dufer-network >/dev/null 2>&1 || docker network create inatrace-backend-dufer-network

            docker compose pull
            docker compose up -d --remove-orphans

            echo "üîç Performing health checks..."
            for i in {1..5}; do
              sleep 10
              if curl -f "https://inatrace.empacadoradufer.com/health"; then
                echo "‚úÖ Production deployment to Dufer successful!"
                exit 0
              fi
              echo "‚è≥ Health check attempt $i/5 failed, retrying..."
            done

            echo "‚ùå Health check failed after 5 attempts"
            echo "üîÑ Rolling back..."
            docker compose down
            docker tag ${{ env.IMAGE_NAME }}:backup-$(date +%Y%m%d)* ${{ env.IMAGE_NAME }}:rollback
            export TAG=rollback
            docker compose up -d
            exit 1

  notify:
    name: üìä Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-test-unocace, deploy-test-fortaleza, deploy-test-dufer, deploy-prod-unocace, deploy-prod-fortaleza, deploy-prod-dufer]
    if: always() && (needs.deploy-dev.result != 'skipped' || needs.deploy-test-unocace.result != 'skipped' || needs.deploy-test-fortaleza.result != 'skipped' || needs.deploy-test-dufer.result != 'skipped' || needs.deploy-prod-unocace.result != 'skipped' || needs.deploy-prod-fortaleza.result != 'skipped' || needs.deploy-prod-dufer.result != 'skipped')
    steps:
      - name: üìä Send notification
        run: |
          if [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "‚úÖ Development deployment successful"
          fi
          if [[ "${{ needs.deploy-test-unocace.result }}" == "success" && "${{ needs.deploy-test-fortaleza.result }}" == "success" && "${{ needs.deploy-test-dufer.result }}" == "success" ]]; then
            echo "‚úÖ Test environments deployment successful"
          fi
          if [[ "${{ needs.deploy-prod-unocace.result }}" == "success" && "${{ needs.deploy-prod-fortaleza.result }}" == "success" && "${{ needs.deploy-prod-dufer.result }}" == "success" ]]; then
            echo "‚úÖ Production deployment successful"
          fi

          # Aqu√≠ puedes agregar notificaciones a Slack, Teams, etc.
